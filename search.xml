<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>语音合成小工具</title>
      <link href="//TxtToSpeech/"/>
      <url>//TxtToSpeech/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本软件是基于Qt5开发的，实现的功能是文本转语音合成的功能。</p> <p>操作步骤：</p> <ul> <li>[v] 加载TXT</li> <li>[v] 选择发音人</li> <li>[v] 点击语音合成</li> </ul> <p>或者</p> <ul> <li>[v] 直接编辑最右边文本框</li> <li>[v] 选择发音人</li> <li>[v] 点击语音合成</li> </ul> <p><img src="/image6/TxtToSpeech_GUI.png" alt="界面"></p> <a id="more"></a> <h2 id="软件的整体演示效果"><a href="#软件的整体演示效果" class="headerlink" title="软件的整体演示效果"></a>软件的整体演示效果</h2><p>软件的整体的操作流程如下gif所示</p> <p><img src="/image6/texToSpeech.gif" alt="界面"></p> <p>语音合成的效果，随机演示效果声音如下：</p> <audio controls="controls"> <source src="./image6/output.mp3" type="audio/mp3"> </audio> <h2 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h2><p>以下代码为选择发音人的列表</p> <p><img src="/image6/text2speech_select.jpg" alt="发音人的列表"></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">self.voice_name_selecct = &#123;</span><br><span class="line"> <span class="string">'讯飞小燕'</span>: <span class="string">'xiaoyan'</span>, <span class="string">'讯飞许久'</span>: <span class="string">'aisjiuxu'</span>,<span class="string">'讯飞小萍'</span>: <span class="string">'aisxping'</span>, <span class="string">'讯飞小婧'</span>: <span class="string">'aisjinger'</span>,</span><br><span class="line"> <span class="string">'讯飞许小宝'</span>: <span class="string">'aisbabyxu'</span>,<span class="string">'讯飞小东'</span>: <span class="string">'x_xiaodong'</span>, <span class="string">'讯飞小王'</span>: <span class="string">'x_xiaowang'</span>,<span class="string">'讯飞萌萌'</span>: <span class="string">'x_mengmengneutral'</span>,</span><br><span class="line"> <span class="string">'讯飞宁宁'</span>: <span class="string">'x_ningning'</span>,<span class="string">'讯飞小南'</span>: <span class="string">'x_xiaonan'</span>, <span class="string">'讯飞玲姐姐'</span>: <span class="string">'x_xiaoling'</span>, <span class="string">'讯飞小坤'</span>: <span class="string">'x_xiaokun'</span>,</span><br><span class="line"> <span class="string">'讯飞小梅'</span>: <span class="string">'x_xiaomei'</span>, <span class="string">'讯飞小瑞'</span>: <span class="string">'x_xiaonuo_novel'</span>, <span class="string">'讯飞小师'</span>: <span class="string">'x_xiaoshi_cts'</span>, <span class="string">'讯飞小梦'</span>: <span class="string">'x_xiaomeng'</span>,</span><br><span class="line"> <span class="string">'讯飞小施'</span>: <span class="string">'x_xiaoshi'</span>, <span class="string">'讯飞小强'</span>: <span class="string">'x_xiaoqiang'</span>, <span class="string">'讯飞一峰'</span>: <span class="string">'x_yifeng'</span>, <span class="string">'讯飞小媛'</span>: <span class="string">'x_xiaoyuan'</span>,</span><br><span class="line"> <span class="string">'讯飞晓倩'</span>: <span class="string">'x_xiaoqian'</span>, <span class="string">'讯飞小莹'</span>: <span class="string">'x_xiaoying'</span>, <span class="string">'讯飞小乔'</span>: <span class="string">'x_xiaoqiao'</span>, <span class="string">'讯飞小瑶'</span>: <span class="string">'x_xiaoyao'</span>,</span><br><span class="line"> <span class="string">'讯飞萌萌-悲伤'</span>: <span class="string">'x_mengmengsad'</span>, <span class="string">'讯飞小春'</span>: <span class="string">'x_mengchun'</span>, <span class="string">'讯飞马叔'</span>: <span class="string">'x_laoma'</span>, <span class="string">'讯飞小蓉'</span>: <span class="string">'x_xiaorong'</span>,</span><br><span class="line"> <span class="string">'讯飞芳芳'</span>: <span class="string">'x_xiaofang'</span>, <span class="string">'讯飞晓峰'</span>: <span class="string">'x_xiaofeng'</span>, <span class="string">'讯飞小魏'</span>: <span class="string">'x_xiaowei'</span>, <span class="string">'讯飞楠楠'</span>: <span class="string">'x_nannan'</span>,</span><br><span class="line"> <span class="string">'讯飞小肥'</span>: <span class="string">'x_xiaofei'</span>, <span class="string">'讯飞小雪'</span>: <span class="string">'x_xiaoxue'</span>, <span class="string">'讯飞晓琳'</span>: <span class="string">'x_xiaolin'</span>, <span class="string">'讯飞小包'</span>: <span class="string">'x_xiaobao'</span>,</span><br><span class="line"> <span class="string">'讯飞小华'</span>: <span class="string">'x_xiaoyang_story'</span>, <span class="string">'讯飞宋宝宝'</span>: <span class="string">'x_xiaosong'</span>, <span class="string">'讯飞玉儿'</span>: <span class="string">'x_yuer'</span>, <span class="string">'讯飞萌萌-高兴'</span>: <span class="string">'x_mengmenghappy'</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure> <p>以下代码为软件背景发音的代码段</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pyqtSlot()</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">on_pushButton_hec_clicked</span><span class="params">(self)</span>:</span></span><br><span class="line"> <span class="string">"""</span></span><br><span class="line"><span class="string"> Slot documentation goes here.</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line"> <span class="comment"># # <span class="doctag">TODO:</span> not implemented yet</span></span><br><span class="line"> <span class="comment"># raise NotImplementedError</span></span><br><span class="line"> print(<span class="string">"语音合成"</span>)</span><br><span class="line"> yuyin_app = yuyi_hec()</span><br><span class="line"> str_voice_name = self.comboBox_voice_name.currentText()</span><br><span class="line"> InText_neirong = self.plainTextEdit.toPlainText().strip()</span><br><span class="line"> print(<span class="string">"zhi:"</span>, str_voice_name)</span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> InText_neirong:</span><br><span class="line"> print(<span class="string">"空文本警告"</span>)</span><br><span class="line"> self.label_tips.setText(<span class="string">"空文本警告,非法请求！"</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> self.label_tips.setText(<span class="string">"请求结果显示窗："</span>)</span><br><span class="line"> yuyin_app.yuyinhec(InText_neirong, self.voice_name_selecct[str_voice_name])</span><br><span class="line"> self.textEdit_tips.setText(<span class="string">"语音合成结果提示：\n"</span>+yuyin_app.Erro_Tips)</span><br><span class="line"> <span class="comment">#os.system('./output.mp3')</span></span><br><span class="line"> file = <span class="string">r'./output.mp3'</span></span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line"> pygame.mixer.init()</span><br><span class="line"> track = pygame.mixer.music.load(file)</span><br><span class="line"></span><br><span class="line"> pygame.mixer.music.play()</span><br><span class="line"> <span class="keyword">except</span>:</span><br><span class="line"> self.textEdit_tips.setText(<span class="string">"错误代码：\n"</span>+yuyin_app.Erro_Tips)</span><br><span class="line"> <span class="comment"># time.sleep(5)</span></span><br><span class="line"> <span class="comment"># pygame.mixer.music.stop()</span></span><br></pre></td></tr></table></figure> <h2 id="API的调用"><a href="#API的调用" class="headerlink" title="API的调用"></a>API的调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">yuyi_hec</span><span class="params">(object)</span>:</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"> <span class="comment"># API请求地址、API KEY、APP ID等参数，提前填好备用</span></span><br><span class="line"> self.api_url = <span class="string">"http://api.xfyun.cn/v1/service/v1/tts"</span></span><br><span class="line"> self.API_KEY = <span class="string">"38f30ffa5f297b12bb271e164736cd49"</span></span><br><span class="line"> self.APP_ID = <span class="string">"5d82345d"</span></span><br><span class="line"> self.OUTPUT_FILE = <span class="string">"./output.mp3"</span> <span class="comment"># 输出音频的保存路径，请根据自己的情况替换</span></span><br><span class="line"> <span class="comment"># TEXT = "苟利国家生死以，岂因祸福避趋之"</span></span><br><span class="line"> self.TEXT = <span class="string">"教育数据挖掘是一种这些数据，wake，orange是4种工具。周德清小姐姐, you are so cute, and you roommate is extremely the excellent one!"</span></span><br><span class="line"> self.Erro_Tips = <span class="string">""</span></span><br><span class="line"> <span class="comment"># 发送HTTP POST请求</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">getBody</span><span class="params">(self, text)</span>:</span></span><br><span class="line"> data = &#123;<span class="string">'text'</span>: text&#125;</span><br><span class="line"> <span class="keyword">return</span> data</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">yuyinhec</span><span class="params">(self,InText,str_voice_name)</span>:</span></span><br><span class="line"> <span class="comment"># 构造输出音频配置参数</span></span><br><span class="line"> Param = &#123;</span><br><span class="line"> <span class="string">"auf"</span>: <span class="string">"audio/L16;rate=16000"</span>, <span class="comment"># 音频采样率</span></span><br><span class="line"> <span class="string">"aue"</span>: <span class="string">"lame"</span>, <span class="comment"># 音频编码，raw(生成wav)或lame(生成mp3)</span></span><br><span class="line"> <span class="string">"voice_name"</span>: str_voice_name,<span class="comment"># "x_xiaowei", # x_xiaowei</span></span><br><span class="line"> <span class="string">"speed"</span>: <span class="string">"50"</span>, <span class="comment"># 语速[0,100]</span></span><br><span class="line"> <span class="string">"volume"</span>: <span class="string">"77"</span>, <span class="comment"># 音量[0,100]</span></span><br><span class="line"> <span class="string">"pitch"</span>: <span class="string">"50"</span>, <span class="comment"># 音高[0,100]</span></span><br><span class="line"> <span class="string">"engine_type"</span>: <span class="string">"aisound"</span> <span class="comment"># 引擎类型。aisound（普通效果），intp65（中文），intp65_en（英文）</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure> <p>其中比较重要的是如下三条秘钥的代码,对应着你的账号中的秘钥地址</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">self.api_url = <span class="string">"http://api.xfyun.cn/v1/service/v1/tts"</span></span><br><span class="line">self.API_KEY = <span class="string">"38f30ffa5f297b12bb271e164736cd49"</span></span><br><span class="line">self.APP_ID = <span class="string">"5d82345d"</span></span><br><span class="line">self.OUTPUT_FILE = <span class="string">"./output.mp3"</span> <span class="comment"># 输出音频的保存路径，请根据</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TxtToSpeech </tag>
            
            <tag> Tool </tag>
            
            <tag> Qt5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>输入一串字符串统计字符个数</title>
      <link href="//staticstringnum/"/>
      <url>//staticstringnum/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>1.利用键盘录入,输入一个字符串,统计该字符串中各个字符的数量,并输出。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> <a href="porterpan.github.io">Edit By Porter</a>, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h2 id="方法一-python"><a href="#方法一-python" class="headerlink" title="方法一(python)"></a>方法一(python)</h2><h3 id="直接统计英文字符，大写和小写"><a href="#直接统计英文字符，大写和小写" class="headerlink" title="直接统计英文字符，大写和小写"></a>直接统计英文字符，大写和小写</h3><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ul> <li>1、建立26个英文字母的大写和小写部分</li> <li>2、分别对输入数据进行轮寻</li> <li>3、查找这些字母中重复字母的个数。</li> </ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''牛客网的输入输出格式--'''</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">直接统计英文字符，大写和小写</span></span><br><span class="line"><span class="string">思路：</span></span><br><span class="line"><span class="string">1、建立26个英文字母的大写和小写部分</span></span><br><span class="line"><span class="string">2、分别对输入数据进行轮寻</span></span><br><span class="line"><span class="string">3、查找这些字母中重复字母的个数。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">data=<span class="string">"Thdddfffffffhhhhhbbbbbbbbb"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inputstr</span><span class="params">()</span>:</span></span><br><span class="line"> datastr = []</span><br><span class="line"> print(<span class="string">'请输入数据:'</span>)</span><br><span class="line"> <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"> line = sys.stdin.readline().strip()</span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> datastr.append(line)</span><br><span class="line"> <span class="comment"># print("-".join(datastr))</span></span><br><span class="line"> <span class="keyword">return</span> datastr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numstr</span><span class="params">(data)</span>:</span></span><br><span class="line"> list_num = [] <span class="comment"># A-z 26</span></span><br><span class="line"> list_num_ = [] <span class="comment"># a-z 26</span></span><br><span class="line"> out_dict = &#123;&#125;</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line"> list_num.append(chr(ord(<span class="string">'A'</span>) + i))</span><br><span class="line"> list_num_.append(chr(ord(<span class="string">'a'</span>) + i))</span><br><span class="line"> k = <span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> j <span class="keyword">in</span> range(len(data)):</span><br><span class="line"> <span class="keyword">if</span> list_num[i] == data[j]:</span><br><span class="line"> k += <span class="number">1</span></span><br><span class="line"> out_dict[list_num[i]] = k</span><br><span class="line"> k = <span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> j <span class="keyword">in</span> range(len(data)):</span><br><span class="line"> <span class="keyword">if</span> list_num_[i] == data[j]:</span><br><span class="line"> k += <span class="number">1</span></span><br><span class="line"> out_dict[list_num_[i]] = k</span><br><span class="line"> <span class="keyword">return</span> out_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"> outline = inputstr()[<span class="number">0</span>]</span><br><span class="line"> out_dict = numstr(outline)</span><br><span class="line"> <span class="keyword">for</span> key <span class="keyword">in</span> out_dict.keys():</span><br><span class="line"> print(key, out_dict[key])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># print(dict.keys(), type(dict.keys()))</span></span><br></pre></td></tr></table></figure> <p>输入输出演示</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/home/porter/tempprogram/bishi/venv/bin/python /home/porter/tempprogram/bishi/test2.py</span><br><span class="line">请输入数据:</span><br><span class="line">dfhgjhGGhjj</span><br><span class="line"></span><br><span class="line">G <span class="number">2</span></span><br><span class="line">f <span class="number">1</span></span><br><span class="line">j <span class="number">3</span></span><br><span class="line">d <span class="number">1</span></span><br><span class="line">g <span class="number">1</span></span><br><span class="line">h <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure> <h2 id="方法二-python"><a href="#方法二-python" class="headerlink" title="方法二(python)"></a>方法二(python)</h2><h3 id="直接统计英文字符，大写和小写包括数字符号等"><a href="#直接统计英文字符，大写和小写包括数字符号等" class="headerlink" title="直接统计英文字符，大写和小写包括数字符号等"></a>直接统计英文字符，大写和小写包括数字符号等</h3><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><ul> <li>1、统计输入字符串中的字符不一样的字符</li> <li>2、分别对不一样的字符在整个输入字符列表中进行遍历</li> <li>3、查找这些字母中重复字母的个数。</li> </ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">直接统计英文字符，大写和小写包括数字符号等</span></span><br><span class="line"><span class="string">思路：</span></span><br><span class="line"><span class="string">1、统计输入字符串中的字符不一样的字符</span></span><br><span class="line"><span class="string">2、分别对不一样的字符在整个输入字符列表中进行遍历</span></span><br><span class="line"><span class="string">3、查找这些字母中重复字母的个数。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">datastr = [<span class="string">'asddfgghhh'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inputstr</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="keyword">global</span> datastr</span><br><span class="line"> datastr = []</span><br><span class="line"> print(<span class="string">'请输入数据:'</span>)</span><br><span class="line"> <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"> line = sys.stdin.readline().strip()</span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> datastr.append(line)</span><br><span class="line"> <span class="comment"># print("-".join(datastr))</span></span><br><span class="line"> <span class="comment"># return datastr</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tongji</span><span class="params">(datain)</span>:</span></span><br><span class="line"> datadifferent = []</span><br><span class="line"> data_out = &#123;&#125;</span><br><span class="line"> <span class="comment"># 统计差异字母</span></span><br><span class="line"> <span class="keyword">for</span> data <span class="keyword">in</span> datain:</span><br><span class="line"> <span class="keyword">if</span> data <span class="keyword">not</span> <span class="keyword">in</span> datadifferent:</span><br><span class="line"> datadifferent.append(data)</span><br><span class="line"> print(datadifferent)</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(datadifferent)):</span><br><span class="line"> k = <span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> data <span class="keyword">in</span> datain:</span><br><span class="line"> <span class="keyword">if</span> data == datadifferent[i]:</span><br><span class="line"> k += <span class="number">1</span></span><br><span class="line"> data_out[data] = k</span><br><span class="line"> print(data_out)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"> inputstr()</span><br><span class="line"> tongji(datastr[<span class="number">0</span>])</span><br></pre></td></tr></table></figure> <p>输入输出演示</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请输入数据:</span><br><span class="line">asdfghhhhhhhhh</span><br><span class="line"></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'s'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>]</span><br><span class="line">&#123;<span class="string">'d'</span>: <span class="number">1</span>, <span class="string">'s'</span>: <span class="number">1</span>, <span class="string">'f'</span>: <span class="number">1</span>, <span class="string">'h'</span>: <span class="number">9</span>, <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'g'</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure> <h2 id="方法三-python"><a href="#方法三-python" class="headerlink" title="方法三(python)"></a>方法三(python)</h2><h3 id="直接统计英文字符，大写和小写包括数字符号等-1"><a href="#直接统计英文字符，大写和小写包括数字符号等-1" class="headerlink" title="直接统计英文字符，大写和小写包括数字符号等"></a>直接统计英文字符，大写和小写包括数字符号等</h3><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><ul> <li>1、将输入的字符串按照</li> <li>2、分别对不一样的字符在整个输入字符列表中进行遍历</li> <li>3、查找这些字母中重复字母的个数。</li> </ul> <blockquote> <p>方法三的代码是方法二的另一种简单的实现方法</p> </blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">直接统计英文字符，大写和小写包括数字符号等</span></span><br><span class="line"><span class="string">思路：</span></span><br><span class="line"><span class="string">1、统计输入字符串中的字符不一样的字符</span></span><br><span class="line"><span class="string">2、分别对不一样的字符在整个输入字符列表中进行遍历</span></span><br><span class="line"><span class="string">3、查找这些字母中重复字母的个数。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">datastr = [<span class="string">'asddfgghhh'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inputstr</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="keyword">global</span> datastr</span><br><span class="line"> datastr = []</span><br><span class="line"> print(<span class="string">'请输入数据:'</span>)</span><br><span class="line"> <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"> line = sys.stdin.readline().strip()</span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> datastr.append(line)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tongji</span><span class="params">(datain)</span>:</span></span><br><span class="line"> datadifferent = []</span><br><span class="line"> data_out = &#123;&#125;</span><br><span class="line"> <span class="comment"># 统计差异字母</span></span><br><span class="line"> <span class="keyword">for</span> data <span class="keyword">in</span> datain:</span><br><span class="line"> <span class="keyword">if</span> data <span class="keyword">not</span> <span class="keyword">in</span> datadifferent:</span><br><span class="line"> datadifferent.append(data)</span><br><span class="line"> data_out[data] = <span class="number">1</span></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> data_out[data] = data_out[data]+<span class="number">1</span></span><br><span class="line"> print(datadifferent)</span><br><span class="line"> print(data_out)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"> inputstr()</span><br><span class="line"> tongji(datastr[<span class="number">0</span>])</span><br></pre></td></tr></table></figure> <h3 id="输入输出演示"><a href="#输入输出演示" class="headerlink" title="输入输出演示"></a>输入输出演示</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请输入数据:</span><br><span class="line">fffghhh</span><br><span class="line"></span><br><span class="line">[<span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>]</span><br><span class="line">&#123;<span class="string">'g'</span>: <span class="number">1</span>, <span class="string">'h'</span>: <span class="number">3</span>, <span class="string">'f'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure> <hr> <p>上面的代码实现是python的实现方式，接下来我将进行C/C++的方式进行实现</p> <h2 id="方法一-c-c"><a href="#方法一-c-c" class="headerlink" title="方法一(c/c++)"></a>方法一(c/c++)</h2><h3 id="直接统计英文字符，大写和小写包括数字符号等-2"><a href="#直接统计英文字符，大写和小写包括数字符号等-2" class="headerlink" title="直接统计英文字符，大写和小写包括数字符号等"></a>直接统计英文字符，大写和小写包括数字符号等</h3><h3 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h3><ul> <li>1、将输入的字符串按照</li> <li>2、分别对不一样的字符在整个输入字符列表中进行遍历</li> <li>3、查找这些字母中重复字母的个数。</li> </ul> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 输入字符串数组不超过20个字符的输入 shurustr</span></span><br><span class="line"><span class="comment"> * 存储不同字符串的一个命名数组 chayimingm</span></span><br><span class="line"><span class="comment"> * 按照对应位置存储的差异字符对应的数目的字符数组 chayinum</span></span><br><span class="line"><span class="comment"> * 均为20个字符空间大小</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 算法，使用统计差异字符的符号，并存储到命名数组 chayimingm</span></span><br><span class="line"><span class="comment"> * 通过差异命名数组 chayimingm 中的元素，来轮询 输入字符串 shurustr 中的字符 *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 26</span></span><br><span class="line"><span class="keyword">char</span> shurustr[N]=&#123;<span class="string">'\0'</span>&#125;;<span class="comment">//输入字符串的存储变量</span></span><br><span class="line"><span class="keyword">char</span> chayimingm[N]=&#123;<span class="string">'\0'</span>&#125;,chayinum[N]=&#123;<span class="number">0</span>&#125;; <span class="comment">//输出字符串的变量存储区</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tongji</span><span class="params">(<span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(;*p!=<span class="string">'\0'</span>;p++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(*p == chayimingm[i])</span><br><span class="line"> &#123;</span><br><span class="line"> chayinum[i] += <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(chayimingm[i] == <span class="string">'\0'</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> chayimingm[i] = *p;</span><br><span class="line"> chayinum[i] = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(chayimingm[i] == <span class="string">'\0'</span>)<span class="keyword">break</span>;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"字符:%c 的个数为:%d\n"</span>,chayimingm[i],chayinum[i]);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"请输入字符串:\n"</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%s"</span>,shurustr);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"输出的字符串为：%s \n"</span>, shurustr);</span><br><span class="line"> tongji(shurustr);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <h3 id="输入输出演示-1"><a href="#输入输出演示-1" class="headerlink" title="输入输出演示"></a>输入输出演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">请输入字符串:</span><br><span class="line">aaassskkkkggc </span><br><span class="line">输出的字符串为：aaassskkkkggc </span><br><span class="line">字符:a 的个数为:<span class="number">3</span></span><br><span class="line">字符:s 的个数为:<span class="number">3</span></span><br><span class="line">字符:k 的个数为:<span class="number">4</span></span><br><span class="line">字符:g 的个数为:<span class="number">2</span></span><br><span class="line">字符:c 的个数为:<span class="number">1</span></span><br><span class="line">按 &lt;RETURN&gt; 来关闭窗口...</span><br></pre></td></tr></table></figure> <h2 id="方法二-c-c"><a href="#方法二-c-c" class="headerlink" title="方法二(c/c++)"></a>方法二(c/c++)</h2><h3 id="直接统计英文字符，大写和小写包括数字符号等-3"><a href="#直接统计英文字符，大写和小写包括数字符号等-3" class="headerlink" title="直接统计英文字符，大写和小写包括数字符号等"></a>直接统计英文字符，大写和小写包括数字符号等</h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul> <li>输入字符串数组不超过20个字符的输入 shurustr</li> <li>存储不同字符串的一个命名数组 chayimingm</li> <li>按照对应位置存储的差异字符对应的数目的字符数组 chayinum</li> <li>均为20个字符空间大小</li> <li><p>算法，分别匹配26个英文大写字母和英文小写字母</p> <p>代码如下：</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 输入字符串数组不超过20个字符的输入 shurustr</span></span><br><span class="line"><span class="comment"> * 存储不同字符串的一个命名数组 chayimingm</span></span><br><span class="line"><span class="comment"> * 按照对应位置存储的差异字符对应的数目的字符数组 chayinum</span></span><br><span class="line"><span class="comment"> * 均为20个字符空间大小</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 算法，分别匹配26个英文大写字母和英文小写字母</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 40</span></span><br><span class="line"><span class="keyword">int</span> chayimingm_up[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> chayimingm_small[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tongji_xiaoxie</span><span class="params">(<span class="keyword">char</span> *shurustr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">char</span> tempchar = <span class="string">'A'</span>;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"开始计算\n"</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> chayimingm_up[i] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// printf("数据为：%c\n",tempchar);</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(tempchar == shurustr[j])</span><br><span class="line"> &#123;</span><br><span class="line"> chayimingm_up[i]+=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> tempchar +=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> tempchar = <span class="string">'a'</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> chayimingm_small[i] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// printf("数据为：%c\n",tempchar);</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(tempchar == shurustr[j])</span><br><span class="line"> &#123;</span><br><span class="line"> chayimingm_small[i]+=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> tempchar +=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> tempchar = <span class="string">'a'</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(chayimingm_small[i]&gt;<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"字符:%c 个数为:%d "</span>,tempchar, chayimingm_small[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> tempchar +=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> tempchar = <span class="string">'A'</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(chayimingm_up[i]&gt;<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"字符:%c 个数为:%d "</span>,tempchar, chayimingm_up[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> tempchar +=<span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">char</span> strin[<span class="number">40</span>]=&#123;<span class="string">'\0'</span>&#125;;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"请输入字符串：\n"</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%s"</span>,strin);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"输入的字符串为：%s \n"</span>,strin);</span><br><span class="line"> tongji_xiaoxie(strin);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </li> </ul> <h3 id="代码效果演示"><a href="#代码效果演示" class="headerlink" title="代码效果演示"></a>代码效果演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请输入字符串：</span><br><span class="line">sddffffffdddssll</span><br><span class="line">输入的字符串为：sddffffffdddssll </span><br><span class="line">开始计算</span><br><span class="line">字符:d 个数为:<span class="number">5</span> 字符:f 个数为:<span class="number">6</span> 字符:l 个数为:<span class="number">2</span> 字符:s 个数为:<span class="number">3</span> 按 &lt;RETURN&gt; 来关闭窗口...</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writen </tag>
            
            <tag> exam </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>堆和栈的相关笔记</title>
      <link href="//heapAndStack/"/>
      <url>//heapAndStack/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>在计算机领域，堆栈是一个不容忽视的概念，堆栈是一种数据结构。</p> <p>堆栈都是一种数据项按序排列的数据结构，只能在一端(称为栈顶(top))对数据项进行插入和删除。</p> <p>在单片机应用中，堆栈是个特殊的存储区，主要功能是暂时存放数据和地址，通常用来保护断点和现场。</p> <blockquote> <p>堆栈中的物体具有一个特性：第一个放入堆栈中的物体总是被最后拿出来， 这个特性通常称为先进后出 (FILO—First-In/Last-Out)。 堆栈中定义了一些操作， 两个最重要的是PUSH和POP。 PUSH（入栈）操作：堆栈指针（SP）加1，然后在堆栈的顶部加入一 个元素。POP（出栈）操作相反，出栈则先将SP所指示的内部ram单元中内容送入直接地址寻址的单元中（目的位置），然后再将堆栈指针（SP）减1。这两种操作实现了数据项的插入和删除。</p> </blockquote> <a id="more"></a> <h2 id="栈简介"><a href="#栈简介" class="headerlink" title="栈简介"></a>栈简介</h2><p>栈由操作系统自动分配释放 ，用于存放函数的参数值、局部变量等，其操作方式类似于数据结构中的栈。参考如下代码：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int b; //栈</span><br><span class="line">char s[] = <span class="string">"abc"</span>; //栈</span><br><span class="line">char *p2; //栈</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>其中函数中定义的局部变量按照先后定义的顺序依次压入栈中，也就是说相邻变量的地址之间不会存在其它变量。栈的内存地址生长方向与堆相反，由高到底，所以后定义的变量地址低于先定义的变量，比如上面代码中变量s的地址小于变量b的地址，p2地址小于s的地址。栈中存储的数据的生命周期随着函数的执行完成而结束。</p> <p>————————————————</p> <p>版权声明：本文为CSDN博主「Dablelv」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</p> <p>原文链接：<a href="https://blog.csdn.net/K346K346/article/details/80849966" target="_blank" rel="noopener">https://blog.csdn.net/K346K346/article/details/80849966</a></p> <h2 id="堆简介"><a href="#堆简介" class="headerlink" title="堆简介"></a>堆简介</h2><p>堆由程序员分配释放， 若程序员不释放，程序结束时由OS回收，分配方式倒是类似于链表。参考如下代码：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//C中使用malloc函数申请</span><br><span class="line">char* p1 = (char *)malloc(<span class="number">10</span>);</span><br><span class="line">cout&lt;&lt;(int*)p1&lt;&lt;endl; //输出：<span class="number">00000000003</span>BA0C0</span><br><span class="line"> </span><br><span class="line">//使用free()释放</span><br><span class="line">free(p1);</span><br><span class="line"> </span><br><span class="line">//C++中用new运算符申请</span><br><span class="line">char p2 = new char[<span class="number">10</span>];</span><br><span class="line">cout&lt;&lt;(int*)p2&lt;&lt;endl; //输出：<span class="number">00000000003</span>BA0C0</span><br><span class="line"> </span><br><span class="line">//使用delete运算符释放</span><br><span class="line">delete[] p2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>其中p1所指的10字节的内存空间与p2所指的10字节内存空间都是存在于堆的。堆的内存地址生长方向与栈相反，由低到高，但需要注意的是，后申请的内存空间并不一定在先申请的内存空间的后面，即p2指向的地址并不一定大于p1所指向的内存地址，原因是先申请的内存空间一旦被释放，后申请的内存空间则会利用先前被释放的内存，从而导致先后分配的内存空间在地址上不存在先后关系。堆中存储的数据的若未释放，则其生命周期等同于程序的生命周期。</p> <p>关于堆上内存空间的分配过程，首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆节点，然后将该节点从空闲节点链表中删除，并将该节点的空间分配给程序。另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确地释放本内存空间。由于找到的堆节点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表。</p> <h2 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h2><p>堆与栈实际上是操作系统对进程占用的内存空间的两种管理方式，主要有如下几种区别：</p> <p>（1）管理方式不同。栈由操作系统自动分配释放，无需我们手动控制；堆的申请和释放工作由程序员控制，容易产生内存泄漏；</p> <p>（2）空间大小不同。每个进程拥有的栈的大小要远远小于堆的大小。理论上，程序员可申请的堆大小为虚拟内存的大小，进程栈的大小 64bits 的 Windows 默认 1MB，64bits 的 Linux 默认 10MB；</p> <p>（3）生长方向不同。堆的生长方向向上，内存地址由低到高；栈的生长方向向下，内存地址由高到低。</p> <p>（4）分配方式不同。堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是由操作系统完成的，比如局部变量的分配。动态分配由alloca函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由操作系统进行释放，无需我们手工实现。</p> <p>（5）分配效率不同。栈由操作系统自动分配，会在硬件层级对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是由C/C++提供的库函数或运算符来完成申请与管理，实现机制较为复杂，频繁的内存申请容易产生内存碎片。显然，堆的效率比栈要低得多。</p> <p>（6）存放内容不同。栈存放的内容，函数返回地址、相关参数、局部变量和寄存器内容等。当主函数调用另外一个函数的时候，要对当前函数执行断点进行保存，需要使用栈来实现，首先入栈的是主函数下一条语句的地址，即扩展指针寄存器的内容（EIP），然后是当前栈帧的底部地址，即扩展基址指针寄存器内容（EBP），再然后是被调函数的实参等，一般情况下是按照从右向左的顺序入栈，之后是被调函数的局部变量，注意静态变量是存放在数据段或者BSS段，是不入栈的。出栈的顺序正好相反，最终栈顶指向主函数下一条语句的地址，主程序又从该地址开始执行。堆，一般情况堆顶使用一个字节的空间来存放堆的大小，而堆中具体存放内容是由程序员来填充的。</p> <p>从以上可以看到，堆和栈相比，由于大量malloc()/free()或new/delete的使用，容易造成大量的内存碎片，并且可能引发用户态和核心态的切换，效率较低。栈相比于堆，在程序中应用较为广泛，最常见的是函数的调用过程由栈来实现，函数返回地址、EBP、实参和局部变量都采用栈的方式存放。虽然栈有众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，主要还是用堆。</p> <p>无论是堆还是栈，在内存使用时都要防止非法越界，越界导致的非法内存访问可能会摧毁程序的堆、栈数据，轻则导致程序运行处于不确定状态，获取不到预期结果，重则导致程序异常崩溃，这些都是我们编程时与内存打交道时应该注意的问题。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writen </tag>
            
            <tag> exam </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>华为软件笔试---汽水瓶编程</title>
      <link href="//huawei-qishuiping/"/>
      <url>//huawei-qishuiping/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>有这样一道智力题：“某商店规定：三个空汽水瓶可以换一瓶汽水。小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？”答案是5瓶，方法如下：先用9个空瓶子换3瓶汽水，喝掉3瓶满的，喝完以后4个空瓶子，用3个再换一瓶，喝掉这瓶满的，这时候剩2个空瓶子。然后你让老板先借给你一瓶汽水，喝掉这瓶满的，喝完以后用3个空瓶子换一瓶满的还给老板。如果小张手上有n个空汽水瓶，最多可以换多少瓶汽水喝？</p> <a id="more"></a> <h1 id="思路及解决"><a href="#思路及解决" class="headerlink" title="思路及解决"></a>思路及解决</h1><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><blockquote> <p>输入文件最多包含10组测试数据，每个数据占一行，仅包含一个正整数n（1&lt;=n&lt;=100），表示小张手上的空汽水瓶数。n=0表示输入结束，你的程序不应当处理这一行。</p> </blockquote> <h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><blockquote> <p>对于每组测试数据，输出一行，表示最多可以喝的汽水瓶数。如果一瓶也喝不到，输出0。</p> </blockquote> <h3 id="输入例子1"><a href="#输入例子1" class="headerlink" title="输入例子1:"></a>输入例子1:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">81</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure> <h3 id="输出例子1"><a href="#输出例子1" class="headerlink" title="输出例子1:"></a>输出例子1:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">40</span></span><br></pre></td></tr></table></figure> <h3 id="python-代码实现"><a href="#python-代码实现" class="headerlink" title="python 代码实现"></a>python 代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">有这样一道智力题：“某商店规定：三个空汽水瓶可以换一瓶汽水。小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？”答案是5瓶，</span></span><br><span class="line"><span class="string">方法如下：先用9个空瓶子换3瓶汽水，喝掉3瓶满的，喝完以后4个空瓶子，用3个再换一瓶，喝掉这瓶满的，这时候剩2个空瓶子。然后</span></span><br><span class="line"><span class="string">你让老板先借给你一瓶汽水，喝掉这瓶满的，喝完以后用3个空瓶子换一瓶满的还给老板。如果小张手上有n个空汽水瓶，最多可以换多</span></span><br><span class="line"><span class="string">少瓶汽水喝？</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_capture</span><span class="params">()</span>:</span></span><br><span class="line"> data = []</span><br><span class="line"> <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"> <span class="comment"># print("请输入数据:")</span></span><br><span class="line"> line = sys.stdin.readline().strip()</span><br><span class="line"> <span class="keyword">if</span> line == <span class="string">'0'</span> <span class="keyword">or</span> <span class="keyword">not</span> line:</span><br><span class="line"> <span class="comment"># print("输入的数据为：", data)</span></span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> <span class="comment"># tmp = list(map(int, line.split(" ")))</span></span><br><span class="line"> tmp = int(line)</span><br><span class="line"> data.append(tmp)</span><br><span class="line"> <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">(data_in)</span>:</span></span><br><span class="line"> data_he = <span class="number">0</span></span><br><span class="line"> data_kong = <span class="number">0</span></span><br><span class="line"> <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"> data_he = data_he + data_in//<span class="number">3</span></span><br><span class="line"> data_kong = data_in % <span class="number">3</span> + data_in // <span class="number">3</span></span><br><span class="line"> data_in = data_in // <span class="number">3</span> + data_in % <span class="number">3</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> data_in &lt; <span class="number">2</span>:</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> <span class="keyword">elif</span> data_in == <span class="number">2</span>:</span><br><span class="line"> data_he = data_he + <span class="number">1</span></span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> <span class="comment"># print("可以喝: %d , 留有空瓶：%d" % (data_he, data_kong))</span></span><br><span class="line"> print(data_he)</span><br><span class="line"> <span class="keyword">return</span> data_he</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"> get_data = []</span><br><span class="line"> data_get = data_capture()</span><br><span class="line"> <span class="keyword">for</span> k <span class="keyword">in</span> data_get:</span><br><span class="line"> get_value = get_result(k)</span><br><span class="line"> get_data.append(get_value)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writen </tag>
            
            <tag> exam </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python在线笔试学习笔记</title>
      <link href="//writenexam/"/>
      <url>//writenexam/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文主要介绍一些算法笔试过程中的几个输入输出python语句的代码格式</p> <a id="more"></a> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <h2 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h2><h3 id="单行输入"><a href="#单行输入" class="headerlink" title="单行输入"></a>单行输入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">line = sys.stdin.readline().strip()</span><br><span class="line">print(line)<span class="comment">#输出的字符串</span></span><br></pre></td></tr></table></figure> <h3 id="多行输入"><a href="#多行输入" class="headerlink" title="多行输入"></a>多行输入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"> data=[]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"> line = sys.stdin.readline().strip()</span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> data.append(line)</span><br><span class="line">print(<span class="string">"-"</span>.join(data))</span><br><span class="line"> </span><br><span class="line">比如输入</span><br><span class="line"><span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="number">3</span></span><br><span class="line">输出：<span class="number">1</span><span class="number">-2</span><span class="number">-3</span></span><br></pre></td></tr></table></figure> <h2 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h2><h3 id="输入数字"><a href="#输入数字" class="headerlink" title="输入数字"></a>输入数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n=int(input())</span><br><span class="line">print(n)<span class="comment">#输出为数字</span></span><br></pre></td></tr></table></figure> <h3 id="单行输入输出为数组"><a href="#单行输入输出为数组" class="headerlink" title="单行输入输出为数组"></a>单行输入输出为数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l=list(map(int,input().split(<span class="string">" "</span>)))</span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure> <h3 id="输出形式为矩阵"><a href="#输出形式为矩阵" class="headerlink" title="输出形式为矩阵"></a>输出形式为矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"> data=[]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"> line = sys.stdin.readline().strip()</span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> tmp = list(map(int, line.split(<span class="string">" "</span>)))</span><br><span class="line"> data.append(tmp)</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writen </tag>
            
            <tag> exam </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>方便的在线高速文件共享</title>
      <link href="//filetosendanyway/"/>
      <url>//filetosendanyway/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>[v] 百度网盘，上传下载都要客户端很不方便；</p> <p>[v] 打印店还要带u盘？病毒太多，u盘携带易丢</p> <p>[v] 下载速度太慢，上传速度也太慢</p> <p>[v] 分享个文件超过多大后还要登录账号或者依靠客户端才能下载</p> <ul> <li><font color="red">烦恼如此之多，如何解决</font> </li> </ul> <p>生活中你是否遇到过这么多的不如意，下面介绍几个免费，免注册，免VIP高速在线上传下载的文件分享神奇。</p> <p>推荐使用场所： 打印店打印资料，电脑分享文档，音乐，视频；淘宝资料发货(可设置过期时间和过期的下载次数)；危险亚健康的数据(加密性好，无记录账号等个人信息，谁知道是谁传的，就是安全)；传你所不敢传，分享你所不敢分享；方便才是王道。</p> <hr> <p>以上都是废话，下面才是干获，如何使用，客官还请见下文</p> <a id="more"></a> <h2 id="第一个、超高颜值的—牛奶快传"><a href="#第一个、超高颜值的—牛奶快传" class="headerlink" title="第一个、超高颜值的—牛奶快传"></a>第一个、超高颜值的—牛奶快传</h2><p><a href="https://c-t.work" target="_blank" rel="noopener">牛奶快传</a>,是我很喜欢的一个文件分享网站，特点如下：</p> <ul> <li>安全、可加密等特点就不说了</li> <li>免注册即可高速上传和下载文档</li> <li>支持批量上传</li> <li>共享可以是链接和取件码</li> <li>取件码形式下载文件(我最喜欢的，省去了短连接转换)</li> <li>提供免费的5G私人网盘(仅需邮箱就可以注册拥有)</li> </ul> <h3 id="我们感受下上下传的速度吧"><a href="#我们感受下上下传的速度吧" class="headerlink" title="我们感受下上下传的速度吧"></a><font color="blue">我们感受下上下传的速度吧</font></h3><p><img src="/image1/fileshare1.gif" alt="感受下上下传速度"></p> <h3 id="取件码形式下载文件"><a href="#取件码形式下载文件" class="headerlink" title="取件码形式下载文件"></a><font color="red">取件码形式下载文件</font></h3><p>共享还可以直接登录这个短的官网首页，输入你共享文件生成的共享取件码<strong>即可</strong>下载文件,这是我认为最方便的一点，很喜欢</p> <p><img src="/image1/fileshare1.jpeg" alt="取件码形式下载"></p> <h3 id="支持批量上传"><a href="#支持批量上传" class="headerlink" title="支持批量上传"></a>支持批量上传</h3><p>不仅上传飞快，还支持文件的批量上传。下载文件时也几乎是满速状态，完全不会出现像某盘那样的限速问题。</p> <h3 id="提供免费的5G私人网盘"><a href="#提供免费的5G私人网盘" class="headerlink" title="提供免费的5G私人网盘"></a>提供免费的5G私人网盘</h3><p>如果你想要私人网盘空间，你可以随便搞个邮箱就注册拥有私人空间了</p> <h2 id="第二个、Firefox-Send"><a href="#第二个、Firefox-Send" class="headerlink" title="第二个、Firefox Send"></a>第二个、Firefox Send</h2><p><a href="https://send.firefox.com/" target="_blank" rel="noopener">send.firefox.com</a>,也是一个很不错的文件分享网站，特点如下：</p> <ul> <li>安全、可加密等特点就不说了</li> <li>免注册即可高速上传和下载文档</li> <li>共享可以是链接</li> </ul> <p>非注册用户可上传最大 1G 的文件，注册后可上传 2.5G 的文件，文件均保留 24 小时。</p> <p><img src="/image1/fileshare21.jpeg" alt=""></p> <p>但这款工具的最大特点，是安全性强。可选择文件有效的时间、天数、下载次数。</p> <p><img src="/image1/fileshare22.jpeg" alt="强悍的安全性"></p> <p>但是呢，这个不能取件码式下载文件,但是也有很方便的解决办法哦</p> <p>不错就是短连接配合使用。</p> <hr> <p>推荐使用短连接<a href="http://suo.im/" target="_blank" rel="noopener">suo.im</a>,可以设置短连接的失效时间，比较不错的。</p> <h3 id="短连接使用步骤："><a href="#短连接使用步骤：" class="headerlink" title="短连接使用步骤："></a>短连接使用步骤：</h3><p><img src="/image1/fileshare32.jpeg" alt="短连接生成网址"></p> <p>用Firefox Send 生成共享文件链接，然后打开<a href="http://suo.im/" target="_blank" rel="noopener">suo.im短连接网</a>,然后执行生成短连接即可。</p> <h2 id="第三个、Sendanywhere（这个需要翻墙）"><a href="#第三个、Sendanywhere（这个需要翻墙）" class="headerlink" title="第三个、Sendanywhere（这个需要翻墙）"></a>第三个、Sendanywhere（这个需要翻墙）</h2><p><a href="https://send-anywhere.com/" target="_blank" rel="noopener">Sendanywhere</a>,这个是我曾经使用的，加密性很好，给朋友共享病毒发毒瘤啥的，很方便呀，大文件也可以，由于这款软件不具备国内小朋友们玩，能出去的就自己探索下吧，功能不小，很方便呀。</p> <p><img src="/image1/fileshare31.jpeg" alt="Sendanywhere"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> file </tag>
            
            <tag> share </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>argparse模块使用学习笔记</title>
      <link href="//argparsenotes/"/>
      <url>//argparsenotes/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>argparse是一个命令行参数解析模块，本文主要介绍python的终端交互模块argparse模块的一些简单而常用的使用方法。</p> <a id="more"></a> <p>首先导入一个简单的例子</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.parse_args()</span><br></pre></td></tr></table></figure> <p>以上的简单例子，就构成了，一个简单的命令行参数解析的例子。通过执行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py --<span class="built_in">help</span></span><br></pre></td></tr></table></figure> <p>将会有了参数用法的提示说明输出。</p> <p>下面开始正式的介绍这个模块的用法</p> <h2 id="为你的程序添加描述"><a href="#为你的程序添加描述" class="headerlink" title="为你的程序添加描述"></a>为你的程序添加描述</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'--echo'</span>)</span><br><span class="line">parser.description = <span class="string">'这是个测试脚本'</span></span><br><span class="line">args = parser.parse_args()</span><br></pre></td></tr></table></figure> <p><strong>parser.description</strong> 是一个程序的描述性语句。</p> <p>最终终端输入</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python test.py --<span class="built_in">help</span></span><br></pre></td></tr></table></figure> <p>执行该语句就会有相应的脚本描述被打印出来</p> <h2 id="必选参数和选择性填入的参数语法"><a href="#必选参数和选择性填入的参数语法" class="headerlink" title="必选参数和选择性填入的参数语法"></a>必选参数和选择性填入的参数语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"><span class="comment">#该参数是必须在终端有输入</span></span><br><span class="line">parser.add_argument(<span class="string">"ParA"</span>, help=<span class="string">"我是A"</span>,type=int) </span><br><span class="line"><span class="comment">#该参数是在终端可以有选择性输入的参数</span></span><br><span class="line">parser.add_argument(<span class="string">"--ParB"</span>, help=<span class="string">"我是A"</span>,type=int) </span><br><span class="line">args = parser.parse_args()</span><br><span class="line">print(args.ParA)</span><br><span class="line">print(args.ParB)</span><br></pre></td></tr></table></figure> <p>在参数的定义前面,未加双横线，表示终端中必须要有的一个参数；加了双横线表示，终端输入中可以不适用该参数。</p> <h2 id="提取命令行中输入参数的类型"><a href="#提取命令行中输入参数的类型" class="headerlink" title="提取命令行中输入参数的类型"></a>提取命令行中输入参数的类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"ParA"</span>, help=<span class="string">"我是A"</span>,type=int)</span><br><span class="line">parser.add_argument(<span class="string">"ParB"</span>, help=<span class="string">"我是B"</span>,type=int)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.ParA == <span class="number">1</span>:</span><br><span class="line"> print(<span class="string">'您的ParA参数输入正确，确实是1'</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> print(<span class="string">'请输入正确的参数，参数的输入不应该是&#123;&#125;'</span>%)</span><br></pre></td></tr></table></figure> <p>对于需要输入int类型的参数，只需要写入<strong>type=int</strong>.</p> <h2 id="下面使用一个完整的例子"><a href="#下面使用一个完整的例子" class="headerlink" title="下面使用一个完整的例子"></a>下面使用一个完整的例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'--echo'</span>)</span><br><span class="line">parser.description = <span class="string">'这是个测试脚本'</span></span><br><span class="line">args = parser.parse_args()</span><br><span class="line">print(args.echo)</span><br></pre></td></tr></table></figure> <p>我们针对这个例子，在终端中输入如下命令，将会有相应的效果。</p> <p><img src="/argparsenotes/argparse_example.png" alt="argparse_example"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python moudle </tag>
            
            <tag> argparse </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>anaconda运行出错现象及解决办法</title>
      <link href="//anacondaError/"/>
      <url>//anacondaError/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录ubuntu环境下的anaconda错误的现象及解决办法，为后期作死，做点善事。</p> <a id="more"></a> <h2 id="出错一、由于ubuntu操作系统更新或者qt版本问题导致（PyQt5分段错误（核心转储））"><a href="#出错一、由于ubuntu操作系统更新或者qt版本问题导致（PyQt5分段错误（核心转储））" class="headerlink" title="出错一、由于ubuntu操作系统更新或者qt版本问题导致（PyQt5分段错误（核心转储））"></a>出错一、由于ubuntu操作系统更新或者qt版本问题导致（PyQt5分段错误（核心转储））</h2><p>执行如下命令解决</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c anaconda pyqt</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> anaconda </tag>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo-neat网页代码压缩去空格</title>
      <link href="//htmlyasuo/"/>
      <url>//htmlyasuo/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><center> Porter Pan </center> <h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文主要介绍，网页空间压缩的办法，去除html或其他脚本中的空格和无用的换行符，注释等，以减少网页文件的响应速度，实现web的快速响应。</p> <ul> <li>安装和配置</li> <li>错误解决</li> <li>附录</li> </ul> <a id="more"></a> <h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><ul> <li>在你网站的根目录安装npm模块</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure> <ul> <li>配置站点文件_config.yml</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网页压缩，去掉空格，提升响应速度</span></span><br><span class="line"><span class="comment"># hexo-neat https://github.com/rozbo/hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line">neat_enable: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line">neat_html:</span><br><span class="line"> <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"> exclude:</span><br><span class="line"> - <span class="string">'**/index.h'</span> </span><br><span class="line"><span class="comment"># 压缩css </span></span><br><span class="line">neat_css:</span><br><span class="line"> <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"> exclude:</span><br><span class="line"> - <span class="string">'**/*.min.css'</span></span><br><span class="line"> - <span class="string">'**/*cntl.css'</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line">neat_js:</span><br><span class="line"> <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"> mangle: <span class="literal">true</span></span><br><span class="line"> output:</span><br><span class="line"> compress:</span><br><span class="line"> exclude:</span><br><span class="line"> - <span class="string">'**/*.min.js'</span></span><br><span class="line"> - <span class="string">'**/*.cntl.js'</span></span><br><span class="line"> - <span class="string">'**/jquery.fancybox.pack.js'</span></span><br><span class="line"> - <span class="string">'**/index.js'</span> </span><br><span class="line"> - <span class="string">'**/love.js'</span></span><br></pre></td></tr></table></figure> <p>这里exlude是排除的选项，根据自己的来合理调整</p> <p>具体的配置语法，见<a href="https://github.com/rozbo/hexo-neat" target="_blank" rel="noopener">hexo-neat</a></p> <h2 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h2><p>通过上面的配置后，我们还是会编译出错，常见错误及解决办法如下</p> <h3 id="错误现象"><a href="#错误现象" class="headerlink" title="错误现象"></a>错误现象</h3><ul> <li>遇到尖括号就报错啥的</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Error: Parse Error: &lt;--&gt; C2: Cool label&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;具体使用&lt;a href="https://github.com/knsv/mermaid"&gt;帮助文档请移步github&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure> <h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>查找这个文件<strong>node_modules/hexo-neat/index.js</strong></p> <ul> <li>[ x ] 我的文件路径为：</li> </ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/GitHub_Projects/porterpan.github.io/node_modules/hexo-neat/index.js</span><br></pre></td></tr></table></figure> <ul> <li>[ x ] 改写里面的代码：</li> </ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> ignoreCustomComments: [/^\s*more/],</span><br><span class="line"><span class="comment">///&lt;[^&gt;]*&gt;/去除所有的标签</span></span><br><span class="line"> ignoreCustomFragments: [/&lt;[^&gt;]*&gt;/,/&lt;img[^&gt;]*&gt;/],</span><br></pre></td></tr></table></figure> <blockquote> <p>ignoreCustomFragments: [/&lt;[^&gt;]<em>&gt;/,/&lt;img[^&gt;]</em>&gt;/],是新加的。忽略尖括号和图像链接</p> </blockquote> <ul> <li>改变的整个代码</li> </ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"><span class="keyword">var</span> assign = require(<span class="string">'object-assign'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//module.exports = function (hexo) &#123;</span></span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">true</span> === hexo.config.neat_enable) &#123;</span><br><span class="line"> <span class="comment">// HTML minifier</span></span><br><span class="line"> hexo.config.neat_html = assign(&#123;</span><br><span class="line"> enable: <span class="keyword">true</span>,</span><br><span class="line"> exclude: [],</span><br><span class="line"> ignoreCustomComments: [/^\s*more/],</span><br><span class="line"> <span class="comment">///&lt;[^&gt;]*&gt;/去除所有的标签</span></span><br><span class="line"> ignoreCustomFragments: [/&lt;[^&gt;]*&gt;/,/&lt;img[^&gt;]*&gt;/],</span><br><span class="line"> removeComments: <span class="keyword">true</span>,</span><br><span class="line"> removeCommentsFromCDATA: <span class="keyword">true</span>,</span><br><span class="line"> collapseWhitespace: <span class="keyword">true</span>,</span><br><span class="line"> collapseBooleanAttributes: <span class="keyword">true</span>,</span><br><span class="line"> removeEmptyAttributes: <span class="keyword">true</span>,</span><br><span class="line"> minifyJS: <span class="keyword">true</span>,</span><br><span class="line"> minifyCSS: <span class="keyword">true</span>,</span><br><span class="line"> &#125;, hexo.config.neat_html);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Css minifier</span></span><br><span class="line"> hexo.config.neat_css = assign(&#123;</span><br><span class="line"> enable: <span class="keyword">true</span>,</span><br><span class="line"> exclude: [<span class="string">'*.min.css'</span>]</span><br><span class="line"> &#125;, hexo.config.neat_css);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Js minifier</span></span><br><span class="line"> hexo.config.neat_js = assign(&#123;</span><br><span class="line"> enable: <span class="keyword">true</span>,</span><br><span class="line"> mangle: <span class="keyword">true</span>,</span><br><span class="line"> output: &#123;&#125;,</span><br><span class="line"> compress: &#123;&#125;,</span><br><span class="line"> exclude: [<span class="string">'*.min.js'</span>]</span><br><span class="line"> &#125;, hexo.config.neat_js, &#123;</span><br><span class="line"> fromString: <span class="keyword">true</span></span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> filter = require(<span class="string">'./lib/filter'</span>);</span><br><span class="line"> hexo.extend.filter.register(<span class="string">'after_render:html'</span>, filter.logic_html);</span><br><span class="line"> hexo.extend.filter.register(<span class="string">'after_render:css'</span>, filter.logic_css);</span><br><span class="line"> hexo.extend.filter.register(<span class="string">'after_render:js'</span>, filter.logic_js);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure> <hr> <h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>常见的正则表达式及注释</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="comment">//string regexstr = @"&lt;[^&gt;]*&gt;"; //去除所有的标签</span></span><br><span class="line"> <span class="comment">//@"&lt;script[^&gt;]*?&gt;.*?&lt;/script &gt;" //去除所有脚本，中间部分也删除</span></span><br><span class="line"> <span class="comment">// string regexstr = @"&lt;img[^&gt;]*&gt;"; //去除图片的正则</span></span><br><span class="line"> <span class="comment">// string regexstr = @"&lt;(?!br).*?&gt;"; //去除所有标签，只剩br</span></span><br><span class="line"> <span class="comment">// string regexstr = @"&lt;table[^&gt;]*?&gt;.*?&lt;/table&gt;"; //去除table里面的所有内容</span></span><br><span class="line"> string regexstr = @<span class="string">"&lt;(?!img|br|p|/p).*?&gt;"</span>; <span class="comment">//去除所有标签，只剩img,br,p</span></span><br><span class="line"> str = Regex.Replace(str, regexstr, string.Empty, RegexOptions.IgnoreCase);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站压缩 </tag>
            
            <tag> hexo-neat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于本修改过主题的blog写作格式</title>
      <link href="//bolgwriteformat/"/>
      <url>//bolgwriteformat/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录写博客文章，在我修改后的主题中的写作格式，格式固定后按照格式写作，可以保证效果最佳。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h2 id="文章开头的写作格式"><a href="#文章开头的写作格式" class="headerlink" title="文章开头的写作格式"></a>文章开头的写作格式</h2><p>-[x] title: 基于本修改过主题的blog写作格式</p> <p>在博客中显示的文章题目</p> <p>-[x]localimage: image1</p> <p>暂时该参数未使用</p> <p>-[x]urlname: installgitbook</p> <p>打开该文章后，显示该文章的网址后缀</p> <p>-[x]categories:<br>-[x] summary </p> <p>文章归类</p> <p>-[x]tags: [System Conf,Github]</p> <p>文章标签</p> <p>-[x]date: 2018-6-10 22:55:03</p> <p>文章写作时间</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 基于本修改过主题的blog写作格式</span><br><span class="line">localimage: image1</span><br><span class="line">urlname: installgitbook</span><br><span class="line">categories: </span><br><span class="line"> summary </span><br><span class="line">tags: [System Conf,Github]</span><br><span class="line">date: <span class="number">2018</span><span class="number">-6</span><span class="number">-10</span> <span class="number">22</span>:<span class="number">55</span>:<span class="number">03</span></span><br></pre></td></tr></table></figure> <h3 id="完整的开头格式"><a href="#完整的开头格式" class="headerlink" title="完整的开头格式"></a>完整的开头格式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 基于本修改过主题的blog写作格式</span><br><span class="line">localimage: image1</span><br><span class="line">urlname: installgitbook</span><br><span class="line">categories: </span><br><span class="line"> summary </span><br><span class="line">tags: [System Conf,Github]</span><br><span class="line">date: <span class="number">2018</span><span class="number">-6</span><span class="number">-10</span> <span class="number">22</span>:<span class="number">55</span>:<span class="number">03</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 摘要</span></span><br><span class="line"></span><br><span class="line">本文记录了 Ubuntu18安装Gitbook的相关步骤，和某些关键的终点输入指令，本文不是指导如何调试代码和修复代码，本文给出了一种安装的方法，具体修复方法见文中内容所示。</span><br><span class="line"></span><br><span class="line">- [x] Edit By Porter, 积水成渊,蛟龙生焉。</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure> <h2 id="文章本地图片加载"><a href="#文章本地图片加载" class="headerlink" title="文章本地图片加载"></a>文章本地图片加载</h2><p>本部分分两种本地图片加载的方式</p> <h3 id="文章在post下的本地图片加载（md）"><a href="#文章在post下的本地图片加载（md）" class="headerlink" title="文章在post下的本地图片加载（md）"></a>文章在post下的本地图片加载（md）</h3><p>在该模式下，文章中的图片要放在以image[x]开头的图片文件夹中，并且文件夹image[x]要放在source目录下。</p> <p>引用图片的格式为：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![peek 软件安装演示效果](./image1/Peek_yanshi.gif)</span><br></pre></td></tr></table></figure> <p>而文章要放在，_post路径下。</p> <h2 id="文章在source目录下的本地图片加载（html）"><a href="#文章在source目录下的本地图片加载（html）" class="headerlink" title="文章在source目录下的本地图片加载（html）"></a>文章在source目录下的本地图片加载（html）</h2><p>这种模式下，请仿照，diary路径下。的html来操作就好</p> <h2 id="解析本地图片加载的代码优化"><a href="#解析本地图片加载的代码优化" class="headerlink" title="解析本地图片加载的代码优化"></a>解析本地图片加载的代码优化</h2><p>加载本地图片是需要通过修改index.js文件实现</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">porterpan.github.io/node_modules/hex</span><br><span class="line">o-asset-image/index.js</span><br></pre></td></tr></table></figure> <p>代码修改后的整体代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = require(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function">function <span class="title">getPosition</span><span class="params">(str, m, i)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">function <span class="title">getLocation</span><span class="params">(str, n)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> index=str.lastIndexOf(<span class="string">'/'</span>);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n-<span class="number">1</span>; i++) &#123;</span><br><span class="line"> index=str.lastIndexOf(<span class="string">'/'</span>,index-<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> location=str.substring(index+<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">return</span> location;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, function(data)&#123;</span><br><span class="line"> <span class="keyword">var</span> config = hexo.config;</span><br><span class="line"> <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line"> <span class="keyword">var</span> link = data.permalink;</span><br><span class="line"> <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">4</span>);</span><br><span class="line"> <span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line"> <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line"> link = link.substring(beginPos, endPos);</span><br><span class="line"> <span class="comment">// link = getLocation(data.permalink, 3);</span></span><br><span class="line"> <span class="comment">// link = link.split('/')[0]</span></span><br><span class="line"> console.info&amp;&amp;console.info(<span class="string">"yuanshi link:"</span> + data.permalink+<span class="string">"del link: "</span>+link);</span><br><span class="line"> <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line"> <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line"> ignoreWhitespace: <span class="keyword">false</span>,</span><br><span class="line"> xmlMode: <span class="keyword">false</span>,</span><br><span class="line"> lowerCaseTags: <span class="keyword">false</span>,</span><br><span class="line"> decodeEntities: <span class="keyword">false</span></span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> $(<span class="string">'img'</span>).each(function()&#123;</span><br><span class="line"> <span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line"> <span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line"> <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line"> <span class="keyword">var</span> src_temp = getLocation(src, <span class="number">3</span>);</span><br><span class="line"> console.info&amp;&amp;console.info(<span class="string">"yuanshi src:"</span> + src+<span class="string">" del src: "</span>+src_temp);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line"> !/^\s*\<span class="comment">//.test(src)) &#123;</span></span><br><span class="line"> <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line"> <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line"> <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(function(elem)&#123;</span><br><span class="line"> <span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(function(elem)&#123;</span><br><span class="line"> <span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line"> srcArray.shift();</span><br><span class="line"> src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//$(this).attr('src', config.root + link + src);</span></span><br><span class="line"> <span class="comment">//notes: src is image name,and config.root is localhost:port,the middle cahr string is my local image Repository</span></span><br><span class="line"> <span class="keyword">if</span>(src_temp.split(<span class="string">'/'</span>)[<span class="number">1</span>].substring(<span class="number">0</span>,<span class="number">5</span>)==<span class="string">"image"</span>)&#123;</span><br><span class="line"> link = src_temp.split(<span class="string">'/'</span>)[<span class="number">1</span>]+<span class="string">'/'</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> link_temp = getLocation(data.permalink, <span class="number">3</span>);</span><br><span class="line"> link = link_temp.split(<span class="string">'/'</span>)[<span class="number">1</span>]+<span class="string">'/'</span>;</span><br><span class="line"> <span class="comment">// link = ''</span></span><br><span class="line"> <span class="comment">// src = src_temp</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(src_temp.substring(<span class="number">0</span>,<span class="number">5</span>) ==<span class="string">"img/a"</span>)&#123;</span><br><span class="line"> link=<span class="string">"diary/img/"</span>; </span><br><span class="line"> console.info&amp;&amp;console.info(<span class="string">"judement the seventh capture!"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line"> console.info&amp;&amp;console.info(<span class="string">"update link as:--&gt;"</span>+config.root + <span class="string">"=="</span> + link + <span class="string">"=="</span> + src);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> console.info&amp;&amp;console.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line"> console.info&amp;&amp;console.info($(<span class="keyword">this</span>));</span><br><span class="line"> console.info&amp;&amp;console.info(<span class="string">'config file = porterpan.github.io/node_modules/hexo-asset-image/index.js'</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> data[key] = $.html();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Conf </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>字节跳动笔试-算法岗（2019/07/31）</title>
      <link href="//zjtdbs/"/>
      <url>//zjtdbs/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文章介绍的字节跳动2019年的笔试过程回忆，本次笔试分为两个考题，因为面试的算法岗，所以笔试都为编程题。</p> <p>代码可选，c/c++/java/python 等</p> <p>内容包括如下：</p> <ul> <li>第一道题，关于排序</li> <li>第二道题关于发牌</li> </ul> <blockquote> <p>本人第一次参加这种刷题，可能代码比较乱，但是功能都已实现，仅供参考，谢谢批评指正</p> </blockquote> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h1 id="字节跳动笔试（2019-07-31）"><a href="#字节跳动笔试（2019-07-31）" class="headerlink" title="字节跳动笔试（2019/07/31）"></a>字节跳动笔试（2019/07/31）</h1><p>字节跳动笔试题目回忆</p> <h2 id="第一道题，对一串数据进行排序"><a href="#第一道题，对一串数据进行排序" class="headerlink" title="第一道题，对一串数据进行排序"></a>第一道题，对一串数据进行排序</h2><ul> <li><p>比如给一串数: [-1, 3, 2, 4, 5, -6, -7, -9],</p> </li> <li><p>输出为：[3, -1, 2, -6, -4, -9, 5, 7]</p> </li> </ul> <h3 id="题目要求："><a href="#题目要求：" class="headerlink" title="题目要求："></a>题目要求：</h3><p>我们输入一串数据后, 我们能够对其排序，开始第一个是正数，后面的是正数和负数交替穿插，要求排序后的正负数排列顺序不能改变</p> <h3 id="实现代码如下："><a href="#实现代码如下：" class="headerlink" title="实现代码如下："></a>实现代码如下：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(n)</span>:</span></span><br><span class="line">n_p = [] <span class="comment"># 正数</span></span><br><span class="line">n_n = []</span><br><span class="line">sort_resut = []</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> n:</span><br><span class="line"> <span class="keyword">if</span> i &gt;= <span class="number">0</span>:</span><br><span class="line"> n_p.append(i)</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> n_n.append(i)</span><br><span class="line"> <span class="keyword">if</span> n[<span class="number">0</span>] &gt;= <span class="number">0</span>:</span><br><span class="line"> flag_flip = <span class="number">1</span> <span class="comment"># 正数</span></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> flag_flip = <span class="number">0</span> <span class="comment"># 负数</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> i_num <span class="keyword">in</span> range(len(n)):</span><br><span class="line"> <span class="keyword">if</span> i_num &lt; len(n_p):</span><br><span class="line"> sort_resut.append(n_p[i_num])</span><br><span class="line"> <span class="keyword">if</span> i_num &lt; len(n_n):</span><br><span class="line"> sort_resut.append(n_n[i_num])</span><br><span class="line"> <span class="keyword">return</span> sort_resut</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"> zjtd 第一题</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> <span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line"> n_input = line.split()</span><br><span class="line"> n_input = list(map(int, n_input))</span><br><span class="line"> sort_resut = sort(n_input)</span><br><span class="line"> print(sort_resut)</span><br></pre></td></tr></table></figure> <p><img src="https://s2.ax1x.com/2019/07/31/eNcZ4K.png" alt="第一题"></p> <h2 id="第二道题，对发牌进行推算原来的牌的顺序"><a href="#第二道题，对发牌进行推算原来的牌的顺序" class="headerlink" title="第二道题，对发牌进行推算原来的牌的顺序"></a>第二道题，对发牌进行推算原来的牌的顺序</h2><ul> <li>手上一碟牌(从上往下堆叠)</li> <li>第一步，先发最上一张牌到桌子上</li> <li>第二步，从手中剩下的一叠牌中，最上面的一张放到手上一叠牌的最下面</li> <li>反复第一第二步骤进行发牌到桌子上也是从上到下堆成一叠</li> <li>直到牌发完</li> </ul> <h3 id="题目要求：-1"><a href="#题目要求：-1" class="headerlink" title="题目要求："></a>题目要求：</h3><p>需要输入两个参数：</p> <ul> <li><strong>输入行数n</strong>，代表你将要把整个数据分几行输入</li> <li><strong>发牌的数据</strong>，分成n行输入</li> <li>能正确推算出手上原来出牌的顺序</li> </ul> <h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p>手中一碟牌按照如上要求发完叠到桌子上</p> <p>桌子上的从上到下牌为：[4, 2, 3, 1]</p> <p>请推算原来手上的牌从上到下的顺序：</p> <p>举例输入参数n=2</p> <p>牌的数据为[4, 2, 3, 1]</p> <p>所以输入终端应该下面代码操作所示。</p> <p>计算结果为：[1, 2, 3, 4]</p> <h3 id="实现代码为："><a href="#实现代码为：" class="headerlink" title="实现代码为："></a>实现代码为：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortresult</span><span class="params">(pai_list = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>])</span>:</span></span><br><span class="line"></span><br><span class="line">list_result = []</span><br><span class="line"> <span class="keyword">while</span> (<span class="keyword">True</span>):</span><br><span class="line"> list_len = len(pai_list)</span><br><span class="line"> <span class="comment"># list_len_j = int(list_len)</span></span><br><span class="line"> <span class="keyword">for</span> j <span class="keyword">in</span> range(list_len):</span><br><span class="line"> num_j = j * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> list_len - num_j - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line"> list_result.append(pai_list[list_len - num_j - <span class="number">1</span>])</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> <span class="comment"># print("ff:", pai_list)</span></span><br><span class="line"> number = []</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(list_len):</span><br><span class="line"> num_j = i * <span class="number">2</span></span><br><span class="line"> <span class="keyword">if</span> list_len - num_j - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line"> number.append(list_len - num_j - <span class="number">1</span>)</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> <span class="comment"># print("ff:index", number, 'list:', pai_list)</span></span><br><span class="line"> <span class="keyword">for</span> del_index <span class="keyword">in</span> number:</span><br><span class="line"> pai_list.pop(del_index)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> list_len &lt;= <span class="number">1</span>:</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> <span class="keyword">return</span> list_result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"> zjtd 第二题</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">pai_list = []</span><br><span class="line">n = input()</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(int(n)):</span><br><span class="line"> line = sys.stdin.readline().strip().split(<span class="string">' '</span>)</span><br><span class="line"> <span class="keyword">for</span> li <span class="keyword">in</span> range(<span class="number">0</span>, len(line)):</span><br><span class="line"> values = line[li]</span><br><span class="line"> values = int(values)</span><br><span class="line"> pai_list.append(values)</span><br><span class="line"></span><br><span class="line">list_result = sortresult(pai_list)</span><br><span class="line">print(<span class="string">"result:"</span>, list_result)</span><br></pre></td></tr></table></figure> <p><img src="https://s2.ax1x.com/2019/07/31/eNckH1.png" alt="第二题"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法岗 </tag>
            
            <tag> 笔试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo Yelee网址修改为简短的英文</title>
      <link href="//hexoYeleeUrl/"/>
      <url>//hexoYeleeUrl/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>hexoYelee将以前时间或者文件夹的中文命名修改为简短的英文</p> <p>-[x] 第一步、修改<strong>_config.yml</strong>文件内容<br>-[x] 第二步、为每篇文章添加urlname属性</p> <a id="more"></a> <h2 id="第一步、修改-config-yml文件内容"><a href="#第一步、修改-config-yml文件内容" class="headerlink" title="第一步、修改_config.yml文件内容"></a>第一步、修改<strong>_config.yml</strong>文件内容</h2><ul> <li>permalink: /:urlname/ </li> </ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="comment"># 设置网页显示的地址后缀为文章中自定义的urlname,需要在文章开头加入 urlname: 标签</span></span><br><span class="line">permalink: /:urlname/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure> <p>将permalink:设置为 /:urlname/</p> <h2 id="第二步、为每篇文章添加urlname属性"><a href="#第二步、为每篇文章添加urlname属性" class="headerlink" title="第二步、为每篇文章添加urlname属性"></a>第二步、为每篇文章添加urlname属性</h2><ul> <li>urlname: hexoYeleeUrl</li> </ul> <p>具体内容如下</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo Yelee网址修改为简短的英文</span><br><span class="line">urlname: hexoYeleeUrl</span><br><span class="line">categories:</span><br><span class="line"> hexo</span><br><span class="line">tags: [url,英文网址]</span><br><span class="line">date: <span class="number">2019</span><span class="number">-7</span><span class="number">-28</span> <span class="number">22</span>:<span class="number">55</span>:<span class="number">07</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure> <h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>执行以下代码，本地查看效果</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure> <p>ok改名成功</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> url </tag>
            
            <tag> 英文网址 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo添加Gitment评论功能</title>
      <link href="//hexoFitment/"/>
      <url>//hexoFitment/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><ul> <li>修改代码</li> <li>添加gitment</li> <li>设置githubOAuth</li> <li>初始化评论</li> <li>常见问题</li> </ul> <a id="more"></a> <h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><p>我们要加入gitment评论功能，需要修改yelee</p> <p>该脚本的路径为：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GitHub_Projects/porterpan.github.io/themes/yelee/layout/_partial/article.ejs</span><br></pre></td></tr></table></figure> <p>这个文件中需要修改的地方为原该脚本的82行</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line"> &lt;% <span class="keyword">if</span> (theme.duoshuo.on) &#123; %&gt;</span><br><span class="line"> &lt;%- partial(<span class="string">'comments/duoshuo'</span>, &#123;</span><br><span class="line"> key: post.path,</span><br><span class="line"> title: post.title,</span><br><span class="line"> url: config.url+url_for(post.path),</span><br><span class="line"> &#125;) %&gt;</span><br><span class="line"> &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theme.youyan.on) &#123; %&gt;</span><br><span class="line"> &lt;%- partial(<span class="string">'comments/youyan'</span>) %&gt;</span><br><span class="line"> &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theme.disqus.on) &#123; %&gt;</span><br><span class="line"> &lt;%- partial(<span class="string">'comments/disqus'</span>, &#123;</span><br><span class="line"> shortname: theme.disqus.shortname</span><br><span class="line"> &#125;) %&gt;</span><br><span class="line"> &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.disqus_shortname) &#123; %&gt;</span><br><span class="line"> &lt;%- partial(<span class="string">'comments/disqus'</span>, &#123;</span><br><span class="line"> shortname: config.disqus_shortname</span><br><span class="line"> &#125;) %&gt;</span><br><span class="line"> &lt;% &#125; <span class="keyword">if</span> (theme.gitment_on) &#123; %&gt;</span><br><span class="line"> &lt;%- partial(<span class="string">'comments/gitment'</span>, &#123;</span><br><span class="line"> key: post.slug,</span><br><span class="line"> title: post.title,</span><br><span class="line"> url: config.url+url_for(post.path)</span><br><span class="line"> &#125;) %&gt;</span><br><span class="line"> &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure> <p>也就是添加的</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (theme.gitment_on) &#123; %&gt;</span><br><span class="line"> &lt;%- partial(<span class="string">'comments/gitment'</span>, &#123;</span><br><span class="line"> key: post.slug,</span><br><span class="line"> title: post.title,</span><br><span class="line"> url: config.url+url_for(post.path)</span><br><span class="line"> &#125;) %&gt;</span><br><span class="line"> &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure> <p>这句判断。</p> <h2 id="添加gitment"><a href="#添加gitment" class="headerlink" title="添加gitment"></a>添加gitment</h2><p>然后去下载<a href="https://github.com/porterpan/gitment/blob/gh-pages/link_src/gitment.ejs" target="_blank" rel="noopener">itment.ejs</a></p> <ul> <li>将gitment.ejs放到该路径中即可：</li> </ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GitHub_Projects/porterpan.github.io/themes/yelee/layout/_partial/comments/gitment.ejs</span><br></pre></td></tr></table></figure> <ul> <li>gitment.ejs 文件内容为</li> </ul> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="gitment-ctn"&gt;&lt;/div&gt; </span><br><span class="line">&lt;!--汉化--&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://porterpan.github.io/gitment/link_src/gitment.css"</span>&gt;</span><br><span class="line">&lt;script src="https://porterpan.github.io/gitment/link_src/gitment.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"gitment/gitment.css"</span>&gt;</span><br><span class="line">&lt;script src="gitment/gitment.js"&gt;&lt;/script&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!--原型--&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"//imsun.github.io/gitment/style/default.css"</span>&gt;</span><br><span class="line">&lt;script src="//imsun.github.io/gitment/dist/gitment.browser.js"&gt;&lt;/script&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line"> id: <span class="string">"&lt;%=url%&gt;"</span>,</span><br><span class="line"> owner: <span class="string">'&lt;%=theme.gitment_owner%&gt;'</span>,</span><br><span class="line"> repo: <span class="string">'&lt;%=theme.gitment_repo%&gt;'</span>,</span><br><span class="line"> oauth: &#123;</span><br><span class="line"> client_id: <span class="string">'&lt;%=theme.gitment_oauth.client_id%&gt;'</span>,</span><br><span class="line"> client_secret: <span class="string">'&lt;%=theme.gitment_oauth.client_secret%&gt;'</span>,</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render(<span class="string">'gitment-ctn'</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure> <h2 id="设置githubOAuth"><a href="#设置githubOAuth" class="headerlink" title="设置githubOAuth"></a>设置githubOAuth</h2><p>github 网页的OAuth的配置如下图</p> <p><img src="https://s2.ax1x.com/2019/08/01/edCIGn.png" alt="OAuth的配置"></p> <p>之后我们应该把本地的地址改为你仓库的地址</p> <p>根目录的_config.yml配置如下</p> <p><img src="https://s2.ax1x.com/2019/08/01/edCxi9.png" alt="_config.yml配置"></p> <h2 id="初始化评论"><a href="#初始化评论" class="headerlink" title="初始化评论"></a>初始化评论</h2><p>提示未初始化</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Comments Not Initialized</span><br></pre></td></tr></table></figure> <p>解决办法：<br>直接登录你的github,进入存放评论的仓库，选择Issue菜单，新建一条评论即可，如下图</p> <p><img src="https://s2.ax1x.com/2019/08/01/edSmuD.png" alt="Not Initialized"></p> <blockquote> <p>或者直接在页面登录你的github账号进行初始化</p> </blockquote> <h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>配置成功后的效果</p> <p><img src="https://s2.ax1x.com/2019/08/01/edFtK0.png" alt="成功后的效果"></p> <ul> <li>注意</li> </ul> <p>如果你的网页后缀字符长度超过50个字符，就会提示未初始化，或者初始化不成功，如下图，后缀超过了50个</p> <p><img src="https://s2.ax1x.com/2019/08/01/edFrG9.png" alt="初始化不成功"></p> <ul> <li>解决办法</li> </ul> <p>将你的网址缩短，具体怎么缩短，看我这篇文章<a href="https://porterpan.github.io/hexoYeleeUrl/" target="_blank" rel="noopener">如何把博客文章缩短，取消之前的带中文路径办法</a></p> <p><img src="https://s2.ax1x.com/2019/08/02/eBum0H.png" alt="缩短后的效果"></p> <p>更加详细的办法，直接看我这个<a href="https://github.com/porterpan/porterpan.github.io/tree/f8ee60945902346640dbb29f437f8b1d3ebf8df9" target="_blank" rel="noopener">第50次提交版本的源代码</a>，研究下</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 评论插件 </tag>
            
            <tag> Gitment </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jupyter notebook 使用</title>
      <link href="//jupyterGrammer/"/>
      <url>//jupyterGrammer/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><div align="center"><br><br><img src="/image1/jupyter_notebook_ico.jpg" alt="docker"><br><br></div> <p>本文主要介绍jupyter notebook 工具的相关的使用操作, jupyter notebook是一个交互式的笔记本，本身示意web应用，支持40+中语言。</p> <a id="more"></a> <h2 id="jupyter-notebook-安装扩展插件"><a href="#jupyter-notebook-安装扩展插件" class="headerlink" title="jupyter notebook 安装扩展插件"></a>jupyter notebook 安装扩展插件</h2><h2 id="jupyter-notebook-markdown-文本"><a href="#jupyter-notebook-markdown-文本" class="headerlink" title="jupyter notebook markdown 文本"></a>jupyter notebook markdown 文本</h2><h3 id="jupyter-notebook-markdown字体颜色"><a href="#jupyter-notebook-markdown字体颜色" class="headerlink" title="jupyter notebook markdown字体颜色"></a>jupyter notebook markdown字体颜色</h3><font color="red">红色字体</font> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">red</span>&gt;</span>红色字体<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure> <p>字体颜色可以举例列举如下，w3c仅仅支持如下16中颜色名。</p> <p>aqua、black、blue、fuchsia、gray、green、lime、maroon、navy、olive、purple、red、silver、teal、white、yellow。</p> <p>但是由于是web应用所以支持<a href="http://www.w3school.com.cn/tags/html_ref_colornames.asp" target="_blank" rel="noopener">w3school上罗列的所有颜色</a>。</p> <h3 id="蓝色斜体"><a href="#蓝色斜体" class="headerlink" title="蓝色斜体"></a>蓝色斜体</h3><p><em><font color="blue">蓝色+斜体</font></em></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">blue</span>&gt;</span>蓝色+斜体<span class="tag">&lt;/<span class="name">font</span>&gt;</span>*</span><br><span class="line">或</span><br><span class="line">_<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">blue</span>&gt;</span>蓝色+斜体<span class="tag">&lt;/<span class="name">font</span>&gt;</span>_</span><br></pre></td></tr></table></figure> <h3 id="绿色加粗斜体"><a href="#绿色加粗斜体" class="headerlink" title="绿色加粗斜体"></a>绿色加粗斜体</h3><p><strong><em><font color="green">绿色+加粗+斜体</font></em></strong></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">green</span>&gt;</span>绿色+加粗+斜体<span class="tag">&lt;/<span class="name">font</span>&gt;</span>***</span><br><span class="line">或</span><br><span class="line">_**<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">green</span>&gt;</span>绿色+加粗+斜体<span class="tag">&lt;/<span class="name">font</span>&gt;</span>**_</span><br><span class="line">或</span><br><span class="line">___<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">green</span>&gt;</span>绿色+加粗+斜体<span class="tag">&lt;/<span class="name">font</span>&gt;</span>___</span><br></pre></td></tr></table></figure> <h3 id="改变字体大小"><a href="#改变字体大小" class="headerlink" title="改变字体大小"></a>改变字体大小</h3><font color="steel" size="5" face="雅黑">5号雅黑</font> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">steel</span> <span class="attr">size</span>=<span class="string">5</span> <span class="attr">face</span>=<span class="string">雅黑</span>&gt;</span>5号雅黑<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure> <h3 id="文本进行高亮"><a href="#文本进行高亮" class="headerlink" title="文本进行高亮"></a>文本进行高亮</h3><p>黄色高亮显示</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mark</span> <span class="attr">style</span>=<span class="string">background-color:yellow</span>&gt;</span>改变高亮颜色<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br></pre></td></tr></table></figure> <h3 id="叠加字体和高亮"><a href="#叠加字体和高亮" class="headerlink" title="叠加字体和高亮"></a>叠加字体和高亮</h3><p><mark style="background-color:yellow"><font color="red" size="4" face="雅黑">叠加字体的变化<font></font></font></mark></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mark</span> <span class="attr">style</span>=<span class="string">background-color:yellow</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span> <span class="attr">size</span>=<span class="string">4</span> <span class="attr">face</span>=<span class="string">雅黑</span>&gt;</span>叠加字体的变化<span class="tag">&lt;<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jupyter notebook </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PDF在线预览嵌入到文章中的模板</title>
      <link href="//pdfqianruyulan/"/>
      <url>//pdfqianruyulan/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本节主要记录CIFAR-10 图像分类的相关学习笔记，该项目实战代码主要包括，2层卷积层，3层全连接层。</p> <p>内容包括如下：</p> <ul> <li>需要用到的python基础语法</li> <li>TensorFlow样本读取机制</li> <li>TensorFlow代码实现10类图像分类的相关函数和实现过程</li> </ul> <blockquote> <p>提示本部分是一个PDF手稿，暂时未整理排版，只能在电脑端预览本部分的PDF笔记,手机上的PDF笔记将不会显示出来。</p> </blockquote> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h2 id="开始放入在线预览PDF"><a href="#开始放入在线预览PDF" class="headerlink" title="开始放入在线预览PDF"></a>开始放入在线预览PDF</h2><div id="pdf1-view1" class=" pdfobject-container" style="height:400px"><br><embed class="pdfobject" src="/TensorFlow-index/CIFAR-10 - Colaboratory.pdf#navpanes=1&amp;view=FitH&amp;pagemode=thumbs&amp;page=3" type="application/pdf" style="overflow: auto; width: 100%; height: 180%;" internalinstanceid="29"><br></div> <div style="height:400px"><br><br></div> <hr> <p>PDF在线预览代码截止</p> <p>以下为正常显示的内容，上方的空白div不可删除</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="pdf1-view1" class=" pdfobject-container" style="height:400px"&gt;</span><br><span class="line">&lt;embed class="pdfobject" src="/TensorFlow-index/CIFAR-10 - Colaboratory.pdf#navpanes=1&amp;amp;view=FitH&amp;amp;pagemode=thumbs&amp;amp;page=3" type="application/pdf" style="overflow: auto; width: 100%; height: 180%;" internalinstanceid="29"&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CIFAR-10 图像分类Notes</title>
      <link href="//cifar10notes/"/>
      <url>//cifar10notes/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h2 id="CIFAR-10-图像分类PDF笔记"><a href="#CIFAR-10-图像分类PDF笔记" class="headerlink" title="CIFAR-10 图像分类PDF笔记"></a>CIFAR-10 图像分类PDF笔记</h2><p>本节主要记录CIFAR-10 图像分类的相关学习笔记，该项目实战代码主要包括，2层卷积层，3层全连接层。</p> <p>内容包括如下：</p> <ul> <li>需要用到的python基础语法</li> <li>TensorFlow样本读取机制</li> <li>TensorFlow代码实现10类图像分类的相关函数和实现过程</li> </ul> <blockquote> <p>提示本部分是一个PDF手稿，暂时未整理排版，只能在电脑端预览本部分的PDF笔记,手机上的PDF笔记将不会显示出来。</p> </blockquote> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <div id="pdf1-view1" class=" pdfobject-container" style="height:400px"><br><embed class="pdfobject" src="/TensorFlow-index/CIFAR-10 - Colaboratory.pdf#navpanes=1&amp;view=FitH&amp;pagemode=thumbs&amp;page=3" type="application/pdf" style="overflow: auto; width: 100%; height: 180%;" internalinstanceid="29"><br></div> <div style="height:400px"><br><br></div> <hr> <p>以下为截取我部分PDF笔记中的内容</p> <h2 id="二、TensorFlow读取机制图解"><a href="#二、TensorFlow读取机制图解" class="headerlink" title="二、TensorFlow读取机制图解"></a>二、TensorFlow读取机制图解</h2><p><img src="https://s2.ax1x.com/2019/07/10/Z65Du6.png" alt="普通的数据读取过程"></p> <p>假设我们的硬盘中有一个图片数据集0001.jpg，0002.jpg，0003.jpg……我们只需要把它们读取到内存中，然后提供给GPU或是CPU进行计算就可以了。这听起来很容易，但事实远没有那么简单。事实上，我们必须要把数据先读入后才能进行计算，假设读入用时0.1s，计算用时0.9s，那么就意味着每过1s，GPU都会有0.1s无事可做，这就大大降低了运算的效率。</p> <p>如何解决这个问题？方法就是将读入数据和计算分别放在两个线程中，将数据读入内存的一个队列，如下图所示：</p> <p><img src="https://s2.ax1x.com/2019/07/10/Z6IyMq.png" alt="高效率的读取文件方式"></p> <p>TensorFlow使用文件名队列+内存队列双队列的形式读入文件，可以很好地管理epoch。下面我们用图片的形式来说明这个机制的运行方式。如下图，还是以数据集A.jpg, B.jpg, C.jpg为例，假定我们要跑一个epoch，那么我们就在文件名队列中把A、B、C各放入一次，并在之后标注队列结束。</p> <p><img src="https://s2.ax1x.com/2019/07/10/Zcpjkd.png" alt="双队列"></p> <p>对于文件名队列，我们使用tf.train.string_input_producer函数。这个函数需要传入一个文件名list，系统会自动将它转为一个文件名队列。</p> <ul> <li>num_epochs：它就是我们上文中提到的epoch数</li> <li>shuffle：是指在一个epoch内文件的顺序是否被打乱。</li> </ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tf.train.string_input_producer(</span><br><span class="line"> string_tensor,</span><br><span class="line"> num_epochs=<span class="keyword">None</span>,</span><br><span class="line"> shuffle=<span class="keyword">True</span>,</span><br><span class="line"> seed=<span class="keyword">None</span>,</span><br><span class="line"> capacity=<span class="number">32</span>,</span><br><span class="line"> shared_name=<span class="keyword">None</span>,</span><br><span class="line"> name=<span class="keyword">None</span>,</span><br><span class="line"> cancel_op=<span class="keyword">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure> <h3 id="2-1-tf-WholeFileReader"><a href="#2-1-tf-WholeFileReader" class="headerlink" title="2.1 tf.WholeFileReader()"></a>2.1 tf.WholeFileReader()</h3><p>读取队列目录中的所有文件，并把文件 <strong><font color="blue">全部内容</font></strong> 提取出key和value返回。</p> <p>通常该函数一般用在一个文件就是一个图片的情况下。</p> <p>读取的代码如下</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入文件列表</span></span><br><span class="line">filename = [<span class="string">'A.jpg'</span>, <span class="string">'B.jpg'</span>, <span class="string">'C.jpg'</span>]</span><br><span class="line"><span class="comment"># 创建文件队列</span></span><br><span class="line">filename_queue = tf.train.string_input_producer(filename, shuffle=<span class="keyword">False</span>,</span><br><span class="line"> num_epochs=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 创建reader对象</span></span><br><span class="line">reader = tf.WholeFileReader()</span><br><span class="line"><span class="comment"># 从队列中读取key和value值</span></span><br><span class="line">key, value = reader.read(filename_queue)</span><br><span class="line"><span class="comment"># 初始化变量</span></span><br><span class="line">tf.local_variables_initializer().run()</span><br><span class="line"><span class="comment"># 入栈线程启动</span></span><br><span class="line">threads = tf.train.start_queue_runners(sess=sess)</span><br></pre></td></tr></table></figure> <blockquote> <p>如果要使用,请在队列(Queue)中的排列文件名.Read的输出将是一个文件名(key)和该文件的内容(value).</p> </blockquote> <h3 id="2-2-tf-FixedLengthRecordReader"><a href="#2-2-tf-FixedLengthRecordReader" class="headerlink" title="2.2 tf.FixedLengthRecordReader()"></a>2.2 tf.FixedLengthRecordReader()</h3><p>固定长度记录一个或多个二进制文件，送入队列中。</p> <p>tf.FixedLengthRecordReader<br>(<br> record_bytes,<br> header_bytes=None,<br> footer_bytes=None,<br> hop_bytes=None,<br> name=None,<br> encoding=None<br>)</p> <p>record_bytes: 整形数，输出的Record中每个文件的长度</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">label_bytes = <span class="number">1</span> <span class="comment"># 2 for CIFAR-100</span></span><br><span class="line">result.height = <span class="number">32</span></span><br><span class="line">result.width = <span class="number">32</span></span><br><span class="line">result.depth = <span class="number">3</span></span><br><span class="line">image_bytes = result.height * result.width * result.depth</span><br><span class="line"><span class="comment"># Every record consists of a label followed by the image, with a</span></span><br><span class="line"><span class="comment"># fixed number of bytes for each.</span></span><br><span class="line">record_bytes = label_bytes + image_bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read a record, getting filenames from the filename_queue. No</span></span><br><span class="line"><span class="comment"># header or footer in the CIFAR-10 format, so we leave header_bytes</span></span><br><span class="line"><span class="comment"># and footer_bytes at their default of 0.</span></span><br><span class="line">reader = tf.FixedLengthRecordReader(record_bytes=record_bytes)</span><br><span class="line">result.key, value = reader.read(filename_queue)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>古诗词验证码使用百度api自动识别</title>
      <link href="//gushiciyanzheng/"/>
      <url>//gushiciyanzheng/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文主要介绍，通过百度的文本识别api，实现爬虫登录中的古诗词验证码自动识别功能。不涉及具体的图像识别代码，本文识别图像中的文本直接通过百度图像本文识别api实现。</p> <p>本文将围绕这几步展开</p> <ul> <li style="list-style: none"><input type="checkbox" checked> 百度文本识别的api创建</li> <li style="list-style: none"><input type="checkbox" checked> 百度文本识别api调用接口介绍</li> <li style="list-style: none"><input type="checkbox" checked> 百度古诗词查询的接口介绍</li> <li style="list-style: none"><input type="checkbox" checked> python爬虫web页面数据清洗</li> <li style="list-style: none"><input type="checkbox" checked> 基于百度api的古诗词完整代码</li> </ul> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h2 id="百度文本识别的api创建"><a href="#百度文本识别的api创建" class="headerlink" title="百度文本识别的api创建"></a>百度文本识别的api创建</h2><p>创建步骤为：</p> <ul> <li><p>进入<a href="http://ai.baidu.com/" target="_blank" rel="noopener">百度AI</a>，右上角点击控制台选择登录</p> </li> <li><p>在你的控制台中点击左边栏的文字识别，如下图</p> </li> </ul> <p><img src="https://s2.ax1x.com/2019/08/01/eUZLE8.png" alt="百度文字识别"></p> <ul> <li>进入文字识别后，选择创建应用，如下图</li> </ul> <p><img src="https://s2.ax1x.com/2019/08/01/eUeZ8J.png" alt="创建文字识别应用"></p> <ul> <li><p>随便填写下，由于我们使用的爬虫可以不用文字识别包，这都不重要了，随便填。</p> </li> <li><p>ok应用创建成功</p> </li> </ul> <p>我们会用到三个应用接口参数[AppID, API Key, Secret Key]，如下图所示</p> <p><img src="https://s2.ax1x.com/2019/08/01/eUeart.png" alt="创建成功的应用"></p> <p>我们接下来进行api调用</p> <h2 id="百度文本识别api调用接口介绍"><a href="#百度文本识别api调用接口介绍" class="headerlink" title="百度文本识别api调用接口介绍"></a>百度文本识别api调用接口介绍</h2><h3 id="第一步、安装百度文本识别接口的python轮子"><a href="#第一步、安装百度文本识别接口的python轮子" class="headerlink" title="第一步、安装百度文本识别接口的python轮子"></a>第一步、安装百度文本识别接口的python轮子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install baidu-aip</span><br></pre></td></tr></table></figure> <blockquote> <p>请注意本文是在python3版本下实现的，如果你默认是python2 请用pip3 install baidu-aip 替代上面的命令</p> </blockquote> <h3 id="第二步、新建AipOcr-对象"><a href="#第二步、新建AipOcr-对象" class="headerlink" title="第二步、新建AipOcr 对象"></a>第二步、新建AipOcr 对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipOcr</span><br><span class="line"></span><br><span class="line"><span class="string">""" 你的 APPID AK SK """</span></span><br><span class="line">APP_ID = <span class="string">'你的 App ID'</span></span><br><span class="line">API_KEY = <span class="string">'你的 Api Key'</span></span><br><span class="line">SECRET_KEY = <span class="string">'你的 Secret Key'</span></span><br><span class="line"></span><br><span class="line">client = AipOcr(APP_ID, API_KEY, SECRET_KEY)</span><br></pre></td></tr></table></figure> <h3 id="第三步、获取验证码图像"><a href="#第三步、获取验证码图像" class="headerlink" title="第三步、获取验证码图像"></a>第三步、获取验证码图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> http.cookiejar <span class="keyword">as</span> cookielib</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"> <span class="string">'Accept'</span>: <span class="string">'image/webp,image/apng,image/*,*/*;q=0.8'</span>,</span><br><span class="line"> <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line"> <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line"> <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line"> <span class="string">'Cookie'</span>: <span class="string">'ASP.NET_SessionId=jwe1ekgshmlwzy2forzsubsd'</span>,</span><br><span class="line"> <span class="string">'Host'</span>: <span class="string">'mm.buy.com.cn'</span>,</span><br><span class="line"> <span class="string">'Referer'</span>: <span class="string">'http://buy.mm.com.cn/mimi/zhaozhao/neiyi/Default.aspx'</span>,</span><br><span class="line"> <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span></span><br><span class="line"> &#125;</span><br><span class="line">captcha_url = <span class="string">'http://buy.mm.com.cn/mimi/zhaozhao/neiyi/image.aspx?'</span></span><br><span class="line"><span class="comment"># captcha_url = "http://buy.mm.com.cn/mimi/zhaozhao/neiyi/image.aspx"</span></span><br><span class="line">response = session.get(captcha_url, headers=headers, timeout=<span class="number">0.1</span>)</span><br><span class="line"><span class="comment"># session.cookies.save()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># response = session.get(url)</span></span><br><span class="line">image = Image.open(BytesIO(response.content))</span><br><span class="line">image.save(<span class="string">'./verify.jpg'</span>)</span><br><span class="line">image = get_file_content(<span class="string">'verify.jpg'</span>)</span><br></pre></td></tr></table></figure> <h3 id="第三步、利用创建的AipOcr对象对图片进行识别"><a href="#第三步、利用创建的AipOcr对象对图片进行识别" class="headerlink" title="第三步、利用创建的AipOcr对象对图片进行识别"></a>第三步、利用创建的AipOcr对象对图片进行识别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""" 如果有可选参数 """</span></span><br><span class="line">options = &#123;&#125;</span><br><span class="line">options[<span class="string">"detect_direction"</span>] = <span class="string">"true"</span></span><br><span class="line">options[<span class="string">"probability"</span>] = <span class="string">"true"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"> <span class="string">""" 带参数调用通用文字识别（高精度版） """</span></span><br><span class="line"> Accuratemessage = client.basicAccurate(image, options)</span><br><span class="line"></span><br><span class="line"> words = Accuratemessage[<span class="string">'words_result'</span>][<span class="number">0</span>][<span class="string">'words'</span>]</span><br><span class="line"></span><br><span class="line"> print(<span class="string">"shuchu:"</span>, type(words), words)</span><br><span class="line"></span><br><span class="line"> verify_result = verify_result_flow_baidugushici(words)<span class="comment"># 自定义数据清洗函数</span></span><br><span class="line"> print(verify_result)</span><br><span class="line"> <span class="keyword">return</span> verify_result</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"> print(Accuratemessage)</span><br><span class="line"> <span class="keyword">return</span> <span class="string">'错'</span></span><br></pre></td></tr></table></figure> <blockquote> <p>verify_result_flow_baidugushici(words)# 这是我数据清洗的函数，在完整代码中有贴出</p> </blockquote> <h3 id="第四步、对AipOcr识别的结果数据进行清洗"><a href="#第四步、对AipOcr识别的结果数据进行清洗" class="headerlink" title="第四步、对AipOcr识别的结果数据进行清洗"></a>第四步、对AipOcr识别的结果数据进行清洗</h3><p>这部分直接贴代码，都叫不上清洗，不再重述。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Accuratemessage = client.basicAccurate(image, options)</span><br><span class="line">words = Accuratemessage[<span class="string">'words_result'</span>][<span class="number">0</span>][<span class="string">'words'</span>]</span><br></pre></td></tr></table></figure> <p>这个返回的words就是我们识别的结果的古诗词词组。</p> <h2 id="百度古诗词查询的接口介绍"><a href="#百度古诗词查询的接口介绍" class="headerlink" title="百度古诗词查询的接口介绍"></a>百度古诗词查询的接口介绍</h2><p>接下来我们需要进行古诗词匹配，古诗词匹配作者采用的是<a href="https://hanyu.baidu.com/" target="_blank" rel="noopener">百度汉语接口</a></p> <p>为什么使用这个可以把古诗词验证码中缺失的汉字匹配出来，客官请看图</p> <p>在<a href="https://hanyu.baidu.com/" target="_blank" rel="noopener">百度汉语搜索框中</a>输入 <strong>故西辞黄鹤楼</strong> ，这里我们缺失汉字人，所以我们先检索截图，如下图：</p> <p><img src="https://s2.ax1x.com/2019/08/01/eUMtBR.png" alt="故人西辞黄鹤楼"></p> <p><strong><mark style="background-color:yellow"><font color="red" size="4" face="雅黑">请注意图中箭头所示<font></font></font></mark></strong></p> <p>看到了那个缺失的汉字<strong>人</strong>了吧</p> <h2 id="python爬虫web页面数据清洗"><a href="#python爬虫web页面数据清洗" class="headerlink" title="python爬虫web页面数据清洗"></a>python爬虫web页面数据清洗</h2><p>这部分应该是清洗了，我们用的BeautifulSoup来清洗数据。</p> <p>代码如下</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_result_flow_baidugushici</span><span class="params">(inputpare = <span class="string">'故西辞黄鹤楼'</span>)</span>:</span></span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> :param inputpare: 输入古诗词除了缺失待验证的汉字外的其他汉字词组</span></span><br><span class="line"><span class="string"> :return:返回这句古诗词中确实待验证的验证汉字</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line"> <span class="comment"># 返回结果的数据</span></span><br><span class="line"> headers = &#123;</span><br><span class="line"> <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span>,</span><br><span class="line"> <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line"> <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line"> <span class="string">'Cache-Control'</span>: <span class="string">'max-age=0'</span>,</span><br><span class="line"> <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line"> <span class="string">'Cookie'</span>: <span class="string">'BAIDUID=3962E06AB8A904AC40FD84F3E2A70D90:FG=1; BIDUPSID=3962E06AB8A904AC40FD84F3E2A70D90; PSTM=1562918639; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; Hm_lvt_010e9ef9290225e88b64ebf20166c8c4=1563587125; BDUSS=p-LTh2WUpIbGJtVzR4TXJpemVVOFBUQTJTTzl5TW1wNXFMN2tvaHcwd1dVVnBkSUFBQUFBJCQAAAAAAAAAAAEAAADbXiAjcGFuY2hhb3BhbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbEMl0WxDJdQW; H_PS_PSSID=1434_21120_29523_29520_28518_29098_28832_29221_26350_29458; Hm_lpvt_010e9ef9290225e88b64ebf20166c8c4=1563609689'</span>,</span><br><span class="line"> <span class="string">'Host'</span>: <span class="string">'hanyu.baidu.com'</span>,</span><br><span class="line"> <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line"> <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span></span><br><span class="line"> &#125;</span><br><span class="line"> url = <span class="string">'https://hanyu.baidu.com/s?wd='</span>+ inputpare +<span class="string">'&amp;from=poem'</span></span><br><span class="line"> s = requests.Session()</span><br><span class="line"> <span class="comment"># 不需要验证码直接登录成功</span></span><br><span class="line"> response_page = s.get(url, headers=headers)</span><br><span class="line"> response_page.encoding = response_page.apparent_encoding</span><br><span class="line"></span><br><span class="line"> soup = BeautifulSoup(response_page.text, features=<span class="string">'html.parser'</span>)</span><br><span class="line"> <span class="comment"># print(soup)</span></span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line"> soup_obj = soup.find(<span class="string">"div"</span>, class_=<span class="string">u"poem-list-item-body check-red"</span>).text</span><br><span class="line"> <span class="keyword">except</span>:</span><br><span class="line"> soup_obj = soup.find(<span class="string">"div"</span>, class_=<span class="string">u"poem-detail-item-content"</span>).text</span><br><span class="line"> print(soup_obj)</span><br><span class="line"> <span class="keyword">except</span>:</span><br><span class="line"> soup_obj=<span class="string">""</span></span><br><span class="line"> <span class="comment"># soup_obj = soup.find_all(name="div", attrs=&#123;"class" : "poem-list-item-body"&#125;).text</span></span><br><span class="line"> print(type(soup_obj), <span class="string">"输出的字符串为:"</span>, soup_obj.strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> dealords = re.split(<span class="string">r'[， 。]'</span>, soup_obj.replace(<span class="string">'.'</span>, <span class="string">''</span>).strip().lstrip(<span class="string">'，'</span>).rstrip(<span class="string">'。'</span>))</span><br><span class="line"> print(dealords)</span><br><span class="line"> similarnumber = <span class="number">0</span></span><br><span class="line"> comparetext = <span class="string">''</span></span><br><span class="line"> outputtext = <span class="string">''</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(dealords)):</span><br><span class="line"> <span class="keyword">for</span> x <span class="keyword">in</span> dealords[i]:</span><br><span class="line"> <span class="keyword">if</span> x <span class="keyword">in</span> inputpare:</span><br><span class="line"> similarnumber += <span class="number">1</span></span><br><span class="line"> <span class="keyword">if</span> similarnumber &gt;= <span class="number">3</span>:</span><br><span class="line"> comparetext = dealords[i]</span><br><span class="line"> print(len(comparetext), comparetext)</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(comparetext)):</span><br><span class="line"> <span class="keyword">for</span> x <span class="keyword">in</span> comparetext[i]:</span><br><span class="line"> <span class="keyword">if</span> x <span class="keyword">in</span> inputpare:</span><br><span class="line"> similarnumber = <span class="number">0</span></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> outputtext=x</span><br><span class="line"> <span class="comment"># print(x)</span></span><br><span class="line"> <span class="keyword">return</span> outputtext</span><br></pre></td></tr></table></figure> <p>这部分应该也是网页清洗的步骤，虽然代码多点，但是也不是很难理解，暂时先这样贴出来，忘记了，在评论区留言</p> <blockquote> <p>评论区，采用的<a href="https://disqus.com/" target="_blank" rel="noopener">DISQUS</a>留言系统，需要翻墙才能展示流言板块，靠缘分了。</p> </blockquote> <hr> <p>到此古诗词验证码的自动识别过程已经带概记录了下，接下来直接贴完整python3的代码，qt5的GUI就不贴了</p> <h2 id="基于百度api的古诗词完整代码"><a href="#基于百度api的古诗词完整代码" class="headerlink" title="基于百度api的古诗词完整代码"></a>基于百度api的古诗词完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> http.cookiejar <span class="keyword">as</span> cookielib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> aip <span class="keyword">import</span> AipOcr</span><br><span class="line"><span class="comment"># import requests</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment"># session.cookies = cookielib.LWPCookieJar(filename='cookies')</span></span><br><span class="line">session.cookies = cookielib.LWPCookieJar(filename=<span class="string">"cookies.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_result_flow_baidugushici</span><span class="params">(inputpare = <span class="string">'故西辞黄鹤楼'</span>)</span>:</span></span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> :param inputpare: 输入古诗词除了缺失待验证的汉字外的其他汉字词组</span></span><br><span class="line"><span class="string"> :return:返回这句古诗词中确实待验证的验证汉字</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line"> <span class="comment"># 返回结果的数据</span></span><br><span class="line"> headers = &#123;</span><br><span class="line"> <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span>,</span><br><span class="line"> <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line"> <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line"> <span class="string">'Cache-Control'</span>: <span class="string">'max-age=0'</span>,</span><br><span class="line"> <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line"> <span class="string">'Cookie'</span>: <span class="string">'BAIDUID=3962E06AB8A904AC40FD84F3E2A70D90:FG=1; BIDUPSID=3962E06AB8A904AC40FD84F3E2A70D90; PSTM=1562918639; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; Hm_lvt_010e9ef9290225e88b64ebf20166c8c4=1563587125; BDUSS=p-LTh2WUpIbGJtVzR4TXJpemVVOFBUQTJTTzl5TW1wNXFMN2tvaHcwd1dVVnBkSUFBQUFBJCQAAAAAAAAAAAEAAADbXiAjcGFuY2hhb3BhbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbEMl0WxDJdQW; H_PS_PSSID=1434_21120_29523_29520_28518_29098_28832_29221_26350_29458; Hm_lpvt_010e9ef9290225e88b64ebf20166c8c4=1563609689'</span>,</span><br><span class="line"> <span class="string">'Host'</span>: <span class="string">'hanyu.baidu.com'</span>,</span><br><span class="line"> <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line"> <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span></span><br><span class="line"> &#125;</span><br><span class="line"> url = <span class="string">'https://hanyu.baidu.com/s?wd='</span>+ inputpare +<span class="string">'&amp;from=poem'</span></span><br><span class="line"> s = requests.Session()</span><br><span class="line"> <span class="comment"># 不需要验证码直接登录成功</span></span><br><span class="line"> response_page = s.get(url, headers=headers)</span><br><span class="line"> response_page.encoding = response_page.apparent_encoding</span><br><span class="line"></span><br><span class="line"> soup = BeautifulSoup(response_page.text, features=<span class="string">'html.parser'</span>)</span><br><span class="line"> <span class="comment"># print(soup)</span></span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line"> soup_obj = soup.find(<span class="string">"div"</span>, class_=<span class="string">u"poem-list-item-body check-red"</span>).text</span><br><span class="line"> <span class="keyword">except</span>:</span><br><span class="line"> soup_obj = soup.find(<span class="string">"div"</span>, class_=<span class="string">u"poem-detail-item-content"</span>).text</span><br><span class="line"> print(soup_obj)</span><br><span class="line"> <span class="keyword">except</span>:</span><br><span class="line"> soup_obj=<span class="string">""</span></span><br><span class="line"> <span class="comment"># soup_obj = soup.find_all(name="div", attrs=&#123;"class" : "poem-list-item-body"&#125;).text</span></span><br><span class="line"> print(type(soup_obj), <span class="string">"输出的字符串为:"</span>, soup_obj.strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> dealords = re.split(<span class="string">r'[， 。]'</span>, soup_obj.replace(<span class="string">'.'</span>, <span class="string">''</span>).strip().lstrip(<span class="string">'，'</span>).rstrip(<span class="string">'。'</span>))</span><br><span class="line"> print(dealords)</span><br><span class="line"> similarnumber = <span class="number">0</span></span><br><span class="line"> comparetext = <span class="string">''</span></span><br><span class="line"> outputtext = <span class="string">''</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(dealords)):</span><br><span class="line"> <span class="keyword">for</span> x <span class="keyword">in</span> dealords[i]:</span><br><span class="line"> <span class="keyword">if</span> x <span class="keyword">in</span> inputpare:</span><br><span class="line"> similarnumber += <span class="number">1</span></span><br><span class="line"> <span class="keyword">if</span> similarnumber &gt;= <span class="number">3</span>:</span><br><span class="line"> comparetext = dealords[i]</span><br><span class="line"> print(len(comparetext), comparetext)</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(comparetext)):</span><br><span class="line"> <span class="keyword">for</span> x <span class="keyword">in</span> comparetext[i]:</span><br><span class="line"> <span class="keyword">if</span> x <span class="keyword">in</span> inputpare:</span><br><span class="line"> similarnumber = <span class="number">0</span></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> outputtext=x</span><br><span class="line"> <span class="comment"># print(x)</span></span><br><span class="line"> <span class="keyword">return</span> outputtext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_content</span><span class="params">(filePath)</span>:</span></span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"> 从本地读取古诗词验证码的待识别文字的图片</span></span><br><span class="line"><span class="string"> :param inputpare: 本地验证码图片的保留位置</span></span><br><span class="line"><span class="string"> :return:返回从本地读取的图片</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line"> <span class="keyword">with</span> open(filePath, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line"> <span class="keyword">return</span> fp.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_by_gushici</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> :return: 返回验证码中缺少的古诗词中的那个文字</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line"> <span class="string">""" 你的 APPID AK SK """</span></span><br><span class="line"> APP_ID = <span class="string">'16xxxx43'</span></span><br><span class="line"> API_KEY = <span class="string">'IFeIxxxxxxEl'</span></span><br><span class="line"> SECRET_KEY = <span class="string">'S0OPhLxxxxxxxxwX'</span></span><br><span class="line"></span><br><span class="line"> client = AipOcr(APP_ID, API_KEY, SECRET_KEY)</span><br><span class="line"></span><br><span class="line"> headers = &#123;</span><br><span class="line"> <span class="string">'Accept'</span>: <span class="string">'image/webp,image/apng,image/*,*/*;q=0.8'</span>,</span><br><span class="line"> <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line"> <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line"> <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line"> <span class="string">'Cookie'</span>: <span class="string">'ASP.NET_SessionId=jwe1ekgshmlwzy2forzsubsd'</span>,</span><br><span class="line"> <span class="string">'Host'</span>: <span class="string">'buy.mm.com.cn'</span>,<span class="comment"># 这个主机地址我已经影藏掉了，请自己配置</span></span><br><span class="line"> <span class="string">'Referer'</span>: <span class="string">'http://buy.mm.com.cn/mimi/zhaozhao/neiyi/Default.aspx'</span>,</span><br><span class="line"> <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span></span><br><span class="line"> &#125;</span><br><span class="line"> captcha_url = <span class="string">'http://buy.mm.com.cn/mimi/zhaozhao/neiyi/image.aspx?'</span></span><br><span class="line"> <span class="comment"># captcha_url = "http://buy.mm.com.cn/mimi/zhaozhao/neiyi/image.aspx"</span></span><br><span class="line"> response = session.get(captcha_url, headers=headers, timeout=<span class="number">0.1</span>)</span><br><span class="line"> <span class="comment"># session.cookies.save()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># response = session.get(url)</span></span><br><span class="line"> image = Image.open(BytesIO(response.content))</span><br><span class="line"> image.save(<span class="string">'./verify.jpg'</span>)</span><br><span class="line"> image = get_file_content(<span class="string">'verify.jpg'</span>)</span><br><span class="line"></span><br><span class="line"> <span class="string">""" 如果有可选参数 """</span></span><br><span class="line"> options = &#123;&#125;</span><br><span class="line"> options[<span class="string">"detect_direction"</span>] = <span class="string">"true"</span></span><br><span class="line"> options[<span class="string">"probability"</span>] = <span class="string">"true"</span></span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line"> <span class="string">""" 带参数调用通用文字识别（高精度版） """</span></span><br><span class="line"> Accuratemessage = client.basicAccurate(image, options)</span><br><span class="line"></span><br><span class="line"> words = Accuratemessage[<span class="string">'words_result'</span>][<span class="number">0</span>][<span class="string">'words'</span>]</span><br><span class="line"></span><br><span class="line"> print(<span class="string">"shuchu:"</span>, type(words), words)</span><br><span class="line"></span><br><span class="line"> verify_result = verify_result_flow_baidugushici(words)</span><br><span class="line"> print(verify_result)</span><br><span class="line"> <span class="keyword">return</span> verify_result</span><br><span class="line"> <span class="keyword">except</span>:</span><br><span class="line"> print(Accuratemessage)</span><br><span class="line"> <span class="keyword">return</span> <span class="string">'错'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_out</span><span class="params">()</span>:</span></span><br><span class="line"> session.cookies.clear()</span><br><span class="line"> print(<span class="string">"login out"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moni_login</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"> 模拟客户端登录操作</span></span><br><span class="line"><span class="string"> :return:none</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line"> headers = &#123;</span><br><span class="line"> <span class="string">'Accept'</span>: <span class="string">'application/json, text/javascript, */*; q=0.01'</span>,</span><br><span class="line"> <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line"> <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line"> <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line"> <span class="string">'Content-Length'</span>: <span class="string">'56'</span>,</span><br><span class="line"> <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>,</span><br><span class="line"> <span class="string">'Cookie'</span>: <span class="string">'ASP.NET_SessionId=jwe1ekgshmlwzy2forzsubsd'</span>,</span><br><span class="line"> <span class="string">'Host'</span>: <span class="string">'buy.mm.com.cn'</span>,</span><br><span class="line"> <span class="string">'Origin'</span>: <span class="string">'buy.mm.com.cn'</span>,</span><br><span class="line"> <span class="string">'Referer'</span>: <span class="string">'http://buy.mm.com.cn/mimi/zhaozhao/neiyi/Default.aspx'</span>,</span><br><span class="line"> <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span>,</span><br><span class="line"> <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span></span><br><span class="line"> &#125;</span><br><span class="line"> log_out()</span><br><span class="line"> url = <span class="string">'http://buy.mm.com.cn/mimi/zhaozhao/neiyi/login.aspx'</span></span><br><span class="line"> code = verify_by_gushici()</span><br><span class="line"> print(code)</span><br><span class="line"> <span class="comment"># code = '123'</span></span><br><span class="line"> <span class="comment"># String2 = input("Enter The Value of String2:")</span></span><br><span class="line"> form = &#123;</span><br><span class="line"> <span class="string">'id'</span>: <span class="string">'2035229347'</span>,</span><br><span class="line"> <span class="string">'pwd'</span>: <span class="string">'dddddd2035229347'</span>,</span><br><span class="line"> <span class="string">'number'</span>: code,</span><br><span class="line"> <span class="string">'act'</span>: <span class="string">'dlogin'</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment"># form = urllib.parse.urlencode(form)</span></span><br><span class="line"> print(type(code), <span class="string">"su:"</span>, form)</span><br><span class="line"> <span class="comment"># time.sleep(2)</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 不需要验证码直接登录成功</span></span><br><span class="line"> login_page = session.post(url, data=form, headers=headers, timeout=<span class="number">0.5</span>)</span><br><span class="line"> context = login_page.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"> <span class="comment"># 保存 cookies 到文件，</span></span><br><span class="line"> <span class="comment"># 下次可以使用 cookie 直接登录，不需要输入账号和密码</span></span><br><span class="line"> session.cookies.save()</span><br><span class="line"> print(context)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shoudongxuanzuo</span><span class="params">()</span>:</span></span><br><span class="line"> headers = &#123;</span><br><span class="line"> <span class="string">'Accept'</span>: <span class="string">'application/json, text/javascript, */*; q=0.01'</span>,</span><br><span class="line"> <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line"> <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line"> <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line"> <span class="string">'Cookie'</span>: <span class="string">'ASP.NET_SessionId=xjen3olvq5lbydin0rgjafqr'</span>,</span><br><span class="line"> <span class="string">'Host'</span>: <span class="string">'buy.mm.com.cn'</span>,</span><br><span class="line"> <span class="string">'Referer'</span>: <span class="string">'http://buy.mm.com.cn/mimi/zhaozhao/neiyi/Default.aspx'</span>,</span><br><span class="line"> <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span>,</span><br><span class="line"> <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> content = &#123;</span><br><span class="line"> <span class="string">'dialogid'</span>: <span class="string">''</span>,</span><br><span class="line"> <span class="string">'type'</span>: <span class="string">'ts'</span>,</span><br><span class="line"> <span class="string">'prop'</span>: <span class="string">''</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> url = <span class="string">"http://buy.mm.com.cn/mimi/zhaozhao/neiyi/reserve.aspx?"</span></span><br><span class="line"> url_code1 = verify_by_gushici()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> print(<span class="string">"xuanzdebug:\n%s"</span> % url)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># choise_seat = session.get(url, json=content, headers=headers, timeout=0.1)</span></span><br><span class="line"> <span class="comment"># cookies = dict(cookies_are='working')</span></span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line"> session.cookies.load(ignore_discard=<span class="keyword">True</span>)</span><br><span class="line"> print(<span class="string">"Cookie正常加载"</span>)</span><br><span class="line"> <span class="keyword">except</span>:</span><br><span class="line"> print(<span class="string">"Cookie未能加载"</span>)</span><br><span class="line"> choise_seat = session.get(url, params=content, headers=headers, timeout=<span class="number">0.5</span>)</span><br><span class="line"> <span class="comment"># session.cookies.save()</span></span><br><span class="line"> context = choise_seat.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"> print(context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"> <span class="comment"># outresult = verify_result_flow_baidugushici('轻罗小扇扑萤')在尔东西北风</span></span><br><span class="line"> <span class="comment"># print("output:",outresult)</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 图像文字识别结果</span></span><br><span class="line"> <span class="comment"># verify_result = verify_by_gushici()</span></span><br><span class="line"> <span class="comment"># print("verify reslt:",verify_result)</span></span><br><span class="line"></span><br><span class="line"> moni_login()<span class="comment"># 带自动识别古诗词验证码的模拟登录函数</span></span><br><span class="line"> shoudongxuanzuo() <span class="comment"># 登录后的操作，这个函数可以省略，内容我也削了</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 验证码 </tag>
            
            <tag> 古诗词识别 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo加载本地图片的方法</title>
      <link href="//hexoloadlocalimage/"/>
      <url>//hexoloadlocalimage/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了 如何修改hexo以便于实现</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>插入本地图片格式</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![xxxx](./image/xxxxx.png)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 加载本地图片 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.14 kmeans算法</title>
      <link href="//kmeans/"/>
      <url>//kmeans/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>在监督学习中，模型通常是对训练样本进行训练得到模型的参数，而在非监督学习中，训练样本的标记信息是是未知的，需要对未标记的样本数据进行训练来学习其内部的性质及规律。为进一步的数据分析提供基础。对于无监督学习应用最广的就是聚类（clustering）</p> <h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul> <li style="list-style: none"><input type="checkbox" checked> 有利于增加泛化能力</li> <li style="list-style: none"><input type="checkbox" checked> 做了平滑处理</li> <li style="list-style: none"><input type="checkbox" checked> 防止过拟合</li> </ul> <blockquote> <p>题外笔记小知识：LRN 层模仿生物神经系统的侧抑制机制，对局部神经元的活动创建竞争机制，使得响应比较大的值相对更大，提高模型的泛化能力,但目前都不大使用，都被Dropout所替代。</p> </blockquote> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>今日分歌单在此</p> <p>[^1]: Here is the footnote.</p> <p>[^longnote]: Here’s one with multiple blocks.<br> Subsequent paragraphs are indented to show that they<br> belong to the previous footnote.</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> kmean </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker 配置权限问题</title>
      <link href="//dockerConf/"/>
      <url>//dockerConf/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><div align="center"><br><br><img src="/image1/docker01.png" alt="docker"><br><br></div> <p>本文主要介绍Docker 安装结束后的全权限配置问题</p> <ul> <li>一、解决终端运行每次需要运行root权限问题</li> </ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">porter@porter-Aspire:~$ docker images </span><br><span class="line">Got permission denied <span class="keyword">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%<span class="number">2</span>Fvar%<span class="number">2</span>Frun%<span class="number">2</span>Fdocker.sock/v1<span class="number">.39</span>/images/json: dial unix /var/run/docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure> <ul> <li>二、解决Pycharm中导入docker时提示权限问题</li> </ul> <p><img src="/image1/docker_configure_root.png" alt="docker权限配置问题"></p> <a id="more"></a> <h2 id="一、问题分析"><a href="#一、问题分析" class="headerlink" title="一、问题分析"></a>一、问题分析</h2><p>以上两种问题的出现，都是因为没把当前的用户组加到 /var/run/docker.sock 执行组中去</p> <h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="步骤一、检查docker-sock-的用户权限情况"><a href="#步骤一、检查docker-sock-的用户权限情况" class="headerlink" title="步骤一、检查docker.sock  的用户权限情况"></a>步骤一、检查docker.sock 的用户权限情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -l /var/run/docker.sock</span><br><span class="line">srw-rw---- 1 root docker 0 Aug 23 09:40 /var/run/docker.sock</span><br></pre></td></tr></table></figure> <h3 id="步骤二、将当前用户组添加到docker的组中"><a href="#步骤二、将当前用户组添加到docker的组中" class="headerlink" title="步骤二、将当前用户组添加到docker的组中"></a>步骤二、将当前用户组添加到docker的组中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line">cat /etc/group | grep ^docker</span><br></pre></td></tr></table></figure> <h3 id="步骤三、重启docker"><a href="#步骤三、重启docker" class="headerlink" title="步骤三、重启docker"></a>步骤三、重启docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure> <h3 id="步骤四、更新docker的用户和组"><a href="#步骤四、更新docker的用户和组" class="headerlink" title="步骤四、更新docker的用户和组"></a>步骤四、更新docker的用户和组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newgrp docker <span class="comment">#更新用户组</span></span><br></pre></td></tr></table></figure> <h3 id="步骤五、终端测试"><a href="#步骤五、终端测试" class="headerlink" title="步骤五、终端测试"></a>步骤五、终端测试</h3><p>可以发现可以不用root权限就可以操作docker相关的命令了</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps <span class="comment">#测试docker命令是否可以使用sudo正常使用</span></span><br></pre></td></tr></table></figure> <h2 id="二、-问题分析"><a href="#二、-问题分析" class="headerlink" title="二、 问题分析"></a>二、 问题分析</h2><p>导致问题二中的pycharm出问题的原因是因为file的读写权限的问题，我们只需要改下，出问题的文件的读写权限就可以了</p> <p>问题的现象如下图</p> <p><img src="/image1/docker_configure_root.png" alt="docker权限配置问题"></p> <p>问题的解决方法如下</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+rw /var/run/docker.sock</span><br></pre></td></tr></table></figure> <p>然后再重新+一个Docker 看下效果如下</p> <p><img src="/image1/docker_configure_unroot.png" alt="docker权限配置问题"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.20 docker 基础</title>
      <link href="//dockerCommand/"/>
      <url>//dockerCommand/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><div align="center"><br><br><img src="/image1/docker01.png" alt="docker"><br><br></div> <p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。</p> <p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p> <p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p> <a id="more"></a> <h2 id="docker-常见命令"><a href="#docker-常见命令" class="headerlink" title="docker 常见命令"></a>docker 常见命令</h2><p>-i (interactive, 交互) 以交互式模式运行容器，一般与t搭配运行</p> <p>-t (tty, 终端) 为容器重新分配一个伪终端输入，通常与i搭配使用</p> <p>-P (大写) 随机端口映射</p> <p>-p (小写) 指定端口映射，有以下四种模式</p> <blockquote> <p>ip:hostPort:containerPort</p> </blockquote> <blockquote> <p>ip::containerPort</p> </blockquote> <blockquote> <p>hostPort:containerPort</p> </blockquote> <blockquote> <p>containerPort</p> </blockquote> <p>–name=”新容器名字” 为容器指定新的名字</p> <p>-d 后台运行容器，并返回容器id，也即启动守护模式容器</p> <p>docker ps 查询docker当前运行的进程有哪些。</p> <p>docker ps -l 查看上一次运行的容器</p> <p>docker ps -a 查看历史运行过得所有容器</p> <p>docker ps -n num 查看历史运行过得前num个容器</p> <p>docker ps -q 查看当前运行容器的编号ID，其他不显示</p> <p>docker ps –no-trunc:不截断输出(输出很详细)</p> <p>ctrl+P+Q 暂时离开容器，不退出容器</p> <p>exit 关闭容器并退出</p> <p>docker start 容器ID 或者容器名name,运行退出后的容器</p> <p>docker stop 容器ID 或者容器名name,停止运行容器</p> <p>docker kill 容器ID 或者容器名name,强制停止容器</p> <p>docker rm ID 删除容器(容器停止后删除)</p> <p>docker rm -f ID 强制删除容器(容器未停止就删除)</p> <p>docker rm -f $(docker ps -a -q) 一次删除当前的所有容器</p> <p>docker ps -a -q | xargs docker rm 一次删除当前的所有容器</p> <p>docker rmi ID 删除镜像</p> <p>docker run -d 镜像的REPOSITORY|ID 后台运行容器(字节这样的话容器会自动退出的，因为没有前台交互，容器会自动退出)</p> <p>docker logs 容器ID, 查看docker上对应容器的日志</p> <p>docker logs -t 容器ID ;加时间戳</p> <p>docker logs -t -f 容器ID; 跟随最新的容器日志打印</p> <p>docker logs -t -f –tail num 容器ID; 跟随最新的容器日志打印,只显示最后的第num个最新的日志</p> <p>docker top 容器ID ，查看容器内部正在运行的进程</p> <p>docker inspect 容器ID， 查看容器内部细节</p> <p>docker attach 容器ID， 进入你之前没有关闭但临时退出的容器</p> <p>docker exec -t 容器ID 你要操作内部容器的命令； 就是在容器外面执行容器命令，不用非得进入容器才能运行容器命令</p> <p>docker cp 容器ID:容器内路径 主机路径；将容器内拷贝文件到主机</p> <p>docker commit ，提交容器副本使之称为一个新的镜像</p> <p>docker commit -m=”描述性文字” -a=”作者” 容器ID 要创建目标镜像名:版本号TAG; 提交容器副本</p> <p>docker run -it -v /宿主机绝对目录:/容器内目录 镜像名； 实现本地的宿主机内文件目录和容器内目录文件的对接，类似于移动硬盘的插入 </p> <p>docker run -it -v /宿主机绝对目录:/容器内目录:ro(read only) 镜像名； 实现本地的宿主机内文件目录和容器内目录文件的对接，类似于移动硬盘的插入, ro 容器只能读，不能写</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.15 机器学习算法GBDT</title>
      <link href="//GBDT/"/>
      <url>//GBDT/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p><div align="center"> <img src="/image1/docker01.png" alt="docker"></div></p> <p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。</p> <p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p> <p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p> <a id="more"></a><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第七章 TensorFlow 卷积神经网络</title>
      <link href="//tfCNN7/"/>
      <url>//tfCNN7/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本节主要是学习TensorFlow的相关学习笔记，主要是基础的学习路线，包括简单的实例笔记等。</p> <p>内容包括如下：</p> <ul> <li>TensorFlow 卷积神经网络基础</li> <li>卷积神经网络常用的函数</li> <li>CNN原理</li> <li>代码实现</li> </ul> <blockquote> <p>提示本部分是一个PDF手稿，暂时未整理排版，只能在电脑端预览本部分的PDF笔记,手机上的PDF笔记将不会显示出来。</p> </blockquote> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h1 id="第七章-TensorFlow-卷积神经网络"><a href="#第七章-TensorFlow-卷积神经网络" class="headerlink" title="第七章 TensorFlow 卷积神经网络"></a>第七章 TensorFlow 卷积神经网络</h1><h2 id="7-1-基本概念"><a href="#7-1-基本概念" class="headerlink" title="7.1 基本概念"></a>7.1 基本概念</h2><ul> <li>全连接NN</li> </ul> <p>每个神经元与前后相邻层的每一个神经元都有连接关系，输入时特征，输出为预测结果。</p> <ul> <li>卷积(<del>Convolutional</del>)</li> </ul> <p>卷积是一种有效提取图像特征的方法，一般用一个正方形的卷积核，遍历图像上的每一像素点。图片上与卷积核对应重叠区域的像素值与卷积核上对应点的权值相乘再求和，再加上偏置，得到一个输出像素。</p> <ul> <li>全零填充(padding)</li> </ul> <p>全零填充可以保证，卷积后的图像尺寸可以保持输入输出大小一致。</p> <h2 id="7-2-神经网络的常用函数"><a href="#7-2-神经网络的常用函数" class="headerlink" title="7.2 神经网络的常用函数"></a>7.2 神经网络的常用函数</h2><h3 id="7-2-1-tf-nn-conv2d-输入图像的描述，-卷积核描述，核滑动步长描述，padding-’VALID’"><a href="#7-2-1-tf-nn-conv2d-输入图像的描述，-卷积核描述，核滑动步长描述，padding-’VALID’" class="headerlink" title="7.2.1 tf.nn.conv2d(输入图像的描述， 卷积核描述，核滑动步长描述，padding=’VALID’)"></a>7.2.1 tf.nn.conv2d(输入图像的描述， 卷积核描述，核滑动步长描述，padding=’VALID’)</h3><h4 id="输入图像的描述"><a href="#输入图像的描述" class="headerlink" title="输入图像的描述"></a>输入图像的描述</h4><p>给出一次喂入的图片数量；像素大小；颜色通道数量</p> <p>例如: [5, 28, ,28, 3] ,表示一次喂入5张图片，每张图像的像素的大小28x28，颜色通道数为3个。</p> <h4 id="卷积核描述"><a href="#卷积核描述" class="headerlink" title="卷积核描述"></a>卷积核描述</h4><p>例如 [3, 3, 1, 16] 表示三行三列1个通道的核函数共16个这样的核函数</p> <p>一共这样的核函数，也就是说卷积操作后输出图像的深度是16，也就是输出为16通道</p> <h4 id="核滑动步长"><a href="#核滑动步长" class="headerlink" title="核滑动步长"></a>核滑动步长</h4><p>例如： [1, 1, 1, 1] 第一个和最后一个1都是固定的，中间两个1是表示为横向坐标和纵向坐标。</p> <h4 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h4><p>padding = ‘VALID’ 表示不使用填充</p> <p>padding = “SAME” 表示全零填充</p> <h3 id="7-2-2-tf-nn-avg-pool-输入描述，池化描述，池化核滑动步长的描述，padding"><a href="#7-2-2-tf-nn-avg-pool-输入描述，池化描述，池化核滑动步长的描述，padding" class="headerlink" title="7.2.2 tf.nn.avg_pool(输入描述，池化描述，池化核滑动步长的描述，padding)"></a>7.2.2 tf.nn.avg_pool(输入描述，池化描述，池化核滑动步长的描述，padding)</h3><p>函数功能：平均池化函数</p> <p>输入描述：给出一次输入batch张图片的描述，例如：[batch, 28, 28, 6]</p> <p>表示图像像素大小为28x28 通道数为6。</p> <p>池化核滑动步长： 例如：[1, 2, 2, 1] 第一个和最后一个都固定为1, 中间两个表示，横纵坐标像素个数。</p> <h3 id="7-2-3-tf-nn-max-pool-输入描述，池化描述，池化核滑动步长的描述，padding"><a href="#7-2-3-tf-nn-max-pool-输入描述，池化描述，池化核滑动步长的描述，padding" class="headerlink" title="7.2.3 tf.nn.max_pool(输入描述，池化描述，池化核滑动步长的描述，padding)"></a>7.2.3 tf.nn.max_pool(输入描述，池化描述，池化核滑动步长的描述，padding)</h3><p>函数功能：最大池化函数</p> <p>输入描述：给出一次输入batch张图片的描述，例如：[batch, 28, 28, 6]</p> <p>表示图像像素大小为28x28 通道数为6。</p> <p>池化核滑动步长： 例如：[1, 2, 2, 1] 第一个和最后一个都固定为1, 中间两个表示，横纵坐标像素个数。</p> <h3 id="7-2-4-tf-nn-dropout-上层输入，暂时舍弃神经元的概率"><a href="#7-2-4-tf-nn-dropout-上层输入，暂时舍弃神经元的概率" class="headerlink" title="7.2.4  tf.nn.dropout(上层输入，暂时舍弃神经元的概率)"></a>7.2.4 tf.nn.dropout(上层输入，暂时舍弃神经元的概率)</h3><p>在神经网络的计算过程中，为了减少过多参数常使用dropout的方法，将一部分神经元按照一定概率从神经网络中舍弃。这种舍弃是临时的，仅在训练师舍弃一些神经元。</p> <p>在使用神经网络时，会把所有的神经元恢复到神经网络中。</p> <ul> <li><p>dropout 可以有效的减少过拟合</p> </li> <li><p>常常在前向传播构建神经网络中使用dropout来减小过拟合加快模型的训练速度</p> </li> <li><p>dropout 一般放到全连接网络中</p> </li> </ul> <h4 id="输出-tf-nn-dropout-上层输入，暂时舍弃神经元的概率"><a href="#输出-tf-nn-dropout-上层输入，暂时舍弃神经元的概率" class="headerlink" title="输出 = tf.nn.dropout(上层输入，暂时舍弃神经元的概率)"></a>输出 = tf.nn.dropout(上层输入，暂时舍弃神经元的概率)</h4><p>这样就有指定概率的神经元随机被置零，置零的神经元不参加当前轮的参数优化</p> <h2 id="7-3-CNN：-借助卷积核-kernel-提取特征后，送入全连接网络"><a href="#7-3-CNN：-借助卷积核-kernel-提取特征后，送入全连接网络" class="headerlink" title="7.3 CNN： 借助卷积核(kernel)提取特征后，送入全连接网络"></a>7.3 CNN： 借助卷积核(kernel)提取特征后，送入全连接网络</h2><p>卷积神经网络可以认为由两部分组成，一部分是对输入图片进行特征提取，另一部分是全连接网络。只不过喂入全连接网络的不再是原始图片，而是经过若干次卷积，激活和池化后的特征信息。</p> <p>目前经典的卷积神经网络有很多经典的结构，比如：Lenet-5、Alenet、VGGNet、GoogleNet、ResNet.每一种都是以卷积、激活、池化四种操作为基础展开。</p> <h3 id="7-3-1-卷积神经网络的连个概念"><a href="#7-3-1-卷积神经网络的连个概念" class="headerlink" title="7.3.1 卷积神经网络的连个概念"></a>7.3.1 卷积神经网络的连个概念</h3><p>局部感知野、权值共享</p> <h4 id="局部感知野"><a href="#局部感知野" class="headerlink" title="局部感知野"></a>局部感知野</h4><p>卷积神经网络的出现是受到了生物处理过程的启发，因为神经元之间的连接模式类似于动物的视觉皮层组织。</p> <p><img src="https://s2.ax1x.com/2019/06/22/ZplRhR.png" alt="人脑的视觉结构"></p> <p>个体皮层神经元仅在被称为感受野的视野受限区域中对刺激作出反应，不同神经元的<strong>感受野</strong>部分重叠，使得它们能够覆盖整个视野。</p> <h4 id="共享权重和偏置"><a href="#共享权重和偏置" class="headerlink" title="共享权重和偏置"></a>共享权重和偏置</h4><p>理解卷积的一个简单方法是考虑作用于矩阵的滑动窗函数。<br>在下面的例子中，给定输入矩阵 I 和核 K，得到卷积输出。将 3×3 核 K（有时称为滤波器或特征检测器）与输入矩阵逐元素地相乘以得到输出卷积矩阵中的一个元素。<br>所有其他元素都是通过在 I 上滑动窗口获得的：</p> <p><img src="https://s2.ax1x.com/2019/06/22/ZpcvnO.png" alt="共享权值的核卷积"></p> <blockquote> <p>简单理解就是一张图片的一个通道中的像素是与同样的核函数进行卷积计算的，可以理解为共享相同的权值和偏置。</p> </blockquote> <h3 id="7-3-2-卷积层"><a href="#7-3-2-卷积层" class="headerlink" title="7.3.2 卷积层"></a>7.3.2 卷积层</h3><p><img src="https://s2.ax1x.com/2019/06/22/ZpKafx.png" alt="CNN"></p> <p>卷积神经网络如上图所示，经过卷积层和后面的全连接网络，其后面的全连接和之前的全连接形式相当，是人工神经网络的样子。但是输入层却有所不同了，之前的人工神经网络的输入层是现将图片打散成一个一维的数据矩阵，在CNN中，数据的输入可以直接是RGB通道的图片。</p> <ul> <li>CNN的输入如果是n个深度的图像数据，那么卷积核(滤波器)的深度也应该是要n个深度。</li> </ul> <p>如下图，三个通道的图像数据矩阵</p> <p><img src="https://s2.ax1x.com/2019/06/22/ZpK2tI.png" alt="RGB三通道的数据图像矩阵"></p> <p>卷基层将会也是3个深度的核矩阵（滤波器）,卷积的计算过程如下：</p> <ul> <li>矩阵的区域对应卷积核(滤波器)的重叠区域进行权值相乘并最终求和得到一个数值结果，并将该结果作为输出结果。</li> <li><p>滤波器将滑过整个图像，重复相同的点积运算。这里</p> </li> <li><p>滤波器必须具有与输入图像相同数量的通道；</p> </li> <li>网络越深，使用的滤波器就越多；拥有的滤波器越多，获得的边缘和特征检测就越多；</li> </ul> <p><img src="https://s2.ax1x.com/2019/06/22/ZpKTBQ.gif" alt="卷积运算"></p> <h3 id="7-3-3-卷积层的输出尺寸"><a href="#7-3-3-卷积层的输出尺寸" class="headerlink" title="7.3.3 卷积层的输出尺寸"></a>7.3.3 卷积层的输出尺寸</h3><p>输出宽度： $\frac{W-F_{w}+2P}{S}+1$</p> <p>输出高度：$\frac{H-F_{h}+2P}{S}+1$</p> <p>其中：</p> <ul> <li>$W$ ：输入图像的宽度</li> <li>$H$ ：输入图像的高度</li> <li>$F_{w}$ ：滤波器或内核的宽度</li> <li>$F_{h}$ ：滤波器的高度</li> <li>P ：填充</li> <li><p>S ：移动步幅</p> <pre><code>卷积层输出的通道数等于卷积操作期间使用的滤波器的个数。 </code></pre></li> </ul> <h2 id="7-4-卷积神经网络的代码实现"><a href="#7-4-卷积神经网络的代码实现" class="headerlink" title="7.4 卷积神经网络的代码实现"></a>7.4 卷积神经网络的代码实现</h2><p>卷积、激活函数、池化三个过程可以说是卷基层的标配（有时也会去掉池化）。卷积计算后的激活函数大多使用的ReLU作为激活函数，这样可以保证卷积后的数值如果小于0 则用零替换，否则保持正数的数值不变。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line"> initial = tf.truncated_normal(shape, stddev=<span class="number">0.1</span>)</span><br><span class="line"> <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variables</span><span class="params">(shape)</span>:</span></span><br><span class="line"> initial = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line"> <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> tf.nn.conv2d(x, W, stides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pol_2x2</span><span class="params">(x)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一层卷积</span></span><br><span class="line"></span><br><span class="line">W_conv1 = weight_variable([<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">32</span>])</span><br><span class="line">b_conv1 = bias_variable([<span class="number">32</span>])</span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image,W_conv1)+b_conv1) <span class="comment"># 卷积和激活</span></span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1) <span class="comment"># 池化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二层卷积</span></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>,<span class="number">5</span>,<span class="number">32</span>,<span class="number">64</span>])</span><br><span class="line">b_conv2 = bias_variable([<span class="number">64</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1,W_conv2)+b_conv2) <span class="comment"># 卷积和激活</span></span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2) <span class="comment"># 池化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后是全连接</span></span><br><span class="line"></span><br><span class="line">w_fc1 = weight_variable([<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>, <span class="number">1024</span>])</span><br><span class="line">b_fc1 = bias_variabl([<span class="number">1024</span>])</span><br><span class="line">h_pool2_flat = tf.reshape(h_hool2, [<span class="number">-1.</span> <span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2, [<span class="number">-1</span>, <span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])+b_fc1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用dropout, keep_prob是一个占位符,训练时为0.5， 测试时为1</span></span><br><span class="line">keep_prob = tf.placeholder(tf.float32)</span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再使用全连接将一层前向传播变成onehot编码模式的输出</span></span><br><span class="line">W_fc2 = weight_variable([<span class="number">1024</span>, <span class="number">10</span>])</span><br><span class="line">b_fc2 = bias_variable([<span class="number">10</span>])</span><br><span class="line">y_conv = tf.matmul(h_fc1_drop, W_fc2)+b_fc2</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第五章 TensorFlow MNIST 手写字识别笔记</title>
      <link href="//tfshouxiezi/"/>
      <url>//tfshouxiezi/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本节主要是学习TensorFlow的相关学习笔记，主要是基础的学习路线，包括简单的实例笔记等。</p> <p>内容包括如下：</p> <ul> <li>部分数学推导</li> <li>部分代码实现</li> <li>MNIST手写数字识别的模型训练过程</li> <li>MNIST手写数字识别的模型测试过程</li> <li>MNIST手写数字是别的模型应用</li> </ul> <blockquote> <p>提示本部分是一个PDF手稿，暂时未整理排版，只能在电脑端预览本部分的PDF笔记,手机上的PDF笔记将不会显示出来。</p> </blockquote> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <div id="pdf1-view1" class=" pdfobject-container" style="height:400px"><br><embed class="pdfobject" src="/TensorFlow-index/第五章 TensorFlow MNIST 手写字识别.ipynb - Colaboratory.pdf#navpanes=1&amp;view=FitH&amp;pagemode=thumbs&amp;page=3" type="application/pdf" style="overflow: auto; width: 100%; height: 180%;" internalinstanceid="29"><br></div> <div style="height:400px"><br><br></div> <h1 id="五、-TensorFlow-MNIST-手写字识别"><a href="#五、-TensorFlow-MNIST-手写字识别" class="headerlink" title="五、 TensorFlow MNIST 手写字识别"></a>五、 TensorFlow MNIST 手写字识别</h1><h2 id="5-1-具体实现过程"><a href="#5-1-具体实现过程" class="headerlink" title="5.1 具体实现过程"></a>5.1 具体实现过程</h2><p>MNIST 手写字识别的训练图片是28*28寸的图片。</p> <ul> <li>第一层隐藏层</li> </ul> <p>第一步是将图片矩阵打平处理为 $[image]_{1×784}$</p> <p>第二 步是我们将第一层隐藏层将要设置的参数数量，这些数量会影响我们的训练精度，将设我们设置第一层的影藏层权重和偏置参数分别为500个，则可以设置第一个隐藏层的维数为$[\omega_{1}]<em>{784×500}$，同样偏置的维数为$[b</em>{1}]_{1×500}$</p> <ul> <li>第二层隐藏层</li> </ul> <p>第三步是设置第二层隐藏层的权重和偏置维数，因为我们只需要三层神经网络结构实现，所以我们这一层应该做池化实现onehot，输出应该为1×10的独热编码。所以$\omega_{2}$应该是500行和10列。即 $[\omega_{2}]<em>{500×10}$，$[b</em>{2}]_{1×10}$</p> <ul> <li>整个流程</li> </ul> <p><img src="https://s2.ax1x.com/2019/07/31/etxrBn.png" alt="流程"></p> <h2 id="5-2-前向传播"><a href="#5-2-前向传播" class="headerlink" title="5.2 前向传播"></a>5.2 前向传播</h2><p> 训练的过程是，首先输入一批数据，然后对每批数据进行上个流程的计算过程，比如我一批次输入200张图片进行训练。</p> <p><img src="https://s2.ax1x.com/2019/07/31/etxfc4.png" alt="流程"></p> <p> 前向传播算法的代码如下部分代码所示</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">INPUT_NODE = <span class="number">784</span></span><br><span class="line">OUTPUT_NODE = <span class="number">10</span></span><br><span class="line">LAYER1_NODE = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_weight</span><span class="params">(shape, regularizer)</span>:</span></span><br><span class="line"> w = tf.Variables(tf.truncated_normal(shape,stddev=<span class="number">0.1</span>))</span><br><span class="line"> <span class="keyword">if</span> regularizer != <span class="keyword">None</span>: tf.add_to_collection(<span class="string">'losses'</span>, tf.contrib.layers.l2_regularizer(regularizer)(w))</span><br><span class="line"> <span class="keyword">return</span> w</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bias</span><span class="params">(shape)</span>:</span> </span><br><span class="line"> b = tf.Variable(tf.zeros(shape)) </span><br><span class="line"> <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(x, regularizer)</span>:</span></span><br><span class="line"> <span class="comment"># []_&#123;784*500&#125;</span></span><br><span class="line"> w1 = get_weight([INPUT_NODE, LAYER1_NODE], regularizer)</span><br><span class="line"> b1 = get_bias([LAYER1_NODE])</span><br><span class="line"><span class="comment"># relu 非线性函数的，修正线性单元</span></span><br><span class="line"> y1 = tf.nn.relu(tf.matmul(x, w1) + b1)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 这里w= get_weight([500, 784] 因为x=[None,784]</span></span><br><span class="line"> w2 = get_weight([LAYER1_NODE, OUTPUT_NODE], regularizer)</span><br><span class="line"> b2 = get_bias([OUTPUT_NODE])</span><br><span class="line"> y = tf.matmul(y1, w2) + b2</span><br><span class="line"> <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure> <h2 id="5-3-反向传播-最小化损失函数"><a href="#5-3-反向传播-最小化损失函数" class="headerlink" title="5.3 反向传播(最小化损失函数)"></a>5.3 反向传播(最小化损失函数)</h2><p>反向传播过程就是利用梯度下降算法进行最佳的各隐藏层的权值和偏置的优化过程。</p> <p>一般选择的梯度优化算法有：</p> <ul> <li>批量梯度优化算法</li> <li>随机梯度优化</li> <li><p>自适应梯度优化</p> </li> <li><p>等等</p> </li> </ul> <p>train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)</p> <p>整个流程</p> <p>前向传播输出结果–&gt; 归一化(softmax()) —&gt; 求取每回batch中样本的输出相似度（交叉熵求求相似度sparse_softmax_cross_entropy_with_logits）—&gt; 得到每个batch中每个样本中的交叉熵均值(tf.reduce_mean()) –&gt;<br>正则化输出–&gt; loss(loss = cem + tf.add_n(tf.get_collection(‘losses’)))</p> <p><a href="https://imgchr.com/i/VwajeO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/07/VwajeO.md.png" alt="VwajeO.md.png"></a></p> <hr> <p>相关函数解释：</p> <ul> <li>tf.add_n(p1, p2, p3…)</li> </ul> <p>实现列表中的元素相加</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input1 = tf.constant([<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>])</span><br><span class="line">input2 = tf.Variable(tf.random_uniform([<span class="number">3</span>]))</span><br><span class="line">output = tf.add_n([input1, input2]) <span class="comment"># = input1 + input2</span></span><br></pre></td></tr></table></figure> <h3 id="5-3-1-Softmax-归一化前向传播输出结果"><a href="#5-3-1-Softmax-归一化前向传播输出结果" class="headerlink" title="5.3.1 Softmax(归一化前向传播输出结果)"></a>5.3.1 Softmax(归一化前向传播输出结果)</h3><p>之前我们选择的代价函数为均方误差函数，表达式为</p> <p>$$<br>loss = \frac{(y-y_)^{2}}{n}<br>$$</p> <p>实现的代码如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loss_mse = tf.reduce_mean(tf.square(y_ - y))</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.001</span>).minimize(loss_mse)</span><br></pre></td></tr></table></figure> <p>Softmax 归一化操作，实现输出各通道的数值编程, 概率和为1的概率表达形式</p> <p>$$<br>\mathit{<br>y_{j} = \frac{e^{z^{j}}}{\sum\limits <em>{i} e^{z</em>{i}}}<br>}<br>$$</p> <p><img src="https://s2.ax1x.com/2019/06/07/Vw10Zn.png" alt="Vw10Zn.png"></p> <p>如上图所示，softmax函数的作用是归一化，将所有的输出以概率和为1的方式，将输出结果用概率表示。</p> <h3 id="5-3-2-交叉熵-比较输出和样本标签的相似度"><a href="#5-3-2-交叉熵-比较输出和样本标签的相似度" class="headerlink" title="5.3.2 交叉熵(比较输出和样本标签的相似度)"></a>5.3.2 交叉熵(比较输出和样本标签的相似度)</h3><p>本部分我们不简单的使用均方误差函数，而是使用交叉熵的方式实现</p> <p>$$<br>H_{y_ (y)} = - \sum_{i}^{} y_{i} _log(y_{i})<br>$$</p> <p>$y_$为样本的标签，而$y$为前向传播的输出计算结果。</p> <p>例子：</p> <p>$$<br>y=[0.005899750.87560060.11849965] $$</p> <p>,也就是如果batch为1(输入的训练数据，只输入1组含有一个样本的数据，一般训练一个batch会包含多个batch所以，会对本次的batch中的多个交叉熵求取均值“ tf.reduce_mean(ce)”)</p> <p>$$<br>H_{y_ (y)} =−0×log(0.00589975)−1×log(0.8756006)−0×log(0.11849965) \<br>=0.6355716 -0\times log(0.00589975)-1\times log(0.8756006)-0\times log(0.11849965) \<br>= 0.6355716−0×log(0.00589975)−1×log(0.8756006)−0×log(0.11849965) \<br>=0.6355716<br>$$</p> <p>实现的代码如下</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ce = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y, labels=tf.argmax(y_, <span class="number">1</span>))</span><br><span class="line">cem = tf.reduce_mean(ce)</span><br><span class="line">loss = cem + tf.add_n(tf.get_collection(<span class="string">'losses'</span>))</span><br></pre></td></tr></table></figure> <p>这里的logits=y, 是前向传播中的3层神经网络的输出层结果$y_{[200×10]}$</p> <hr> <ul> <li><p>tf.nn.sparse_softmax_cross_entropy_with_logits()与tf.nn.softmax_cross_entropy_with_logits的差别</p> <p>sparse_softmax_cross_entropy_with_logits(_sentinel=None, labels=None, logits=None, name=None)</p> </li> </ul> <font color="blue">唯一的区别是sparse的labels是int类型，而非sparse的labels是one-hot类型。</font> <ul> <li>tf.argmax(input,axis)根据axis取值的不同返回每行或者每列最大值的索引</li> </ul> <p>axis = 0: </p> <p> axis=0时比较每一列的元素，将每一列最大元素所在的索引记录下来，最后输出每一列最大元素所在的索引数组。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test[<span class="number">0</span>] = array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">test[<span class="number">1</span>] = array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">test[<span class="number">2</span>] = array([<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>])</span><br><span class="line">test[<span class="number">3</span>] = array([<span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment"># output : [3, 3, 1]</span></span><br></pre></td></tr></table></figure> <p>axis = 1: </p> <p> axis=1的时候，将每一行最大元素所在的索引记录下来，最后返回每一行最大元素所在的索引数组。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test[<span class="number">0</span>] = array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">#2</span></span><br><span class="line">test[<span class="number">1</span>] = array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">#2</span></span><br><span class="line">test[<span class="number">2</span>] = array([<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>]) <span class="comment">#0</span></span><br><span class="line">test[<span class="number">3</span>] = array([<span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>]) <span class="comment">#0</span></span><br></pre></td></tr></table></figure> <h3 id="5-3-3-batch个样本的交叉熵后整体均值计算"><a href="#5-3-3-batch个样本的交叉熵后整体均值计算" class="headerlink" title="5.3.3 batch个样本的交叉熵后整体均值计算"></a>5.3.3 batch个样本的交叉熵后整体均值计算</h3><p>cem = tf.reduce_mean(ce)</p> <hr> <p>reduce_mean()函数的用法举例</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"> </span><br><span class="line">x = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line"> </span><br><span class="line">xx = tf.cast(x,tf.float32)</span><br><span class="line"> </span><br><span class="line">mean_all = tf.reduce_mean(xx, keep_dims=<span class="keyword">False</span>)</span><br><span class="line">mean_0 = tf.reduce_mean(xx, axis=<span class="number">0</span>, keep_dims=<span class="keyword">False</span>)</span><br><span class="line">mean_1 = tf.reduce_mean(xx, axis=<span class="number">1</span>, keep_dims=<span class="keyword">False</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"> m_a,m_0,m_1 = sess.run([mean_all, mean_0, mean_1])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> m_a <span class="comment"># output: 2.0</span></span><br><span class="line"><span class="keyword">print</span> m_0 <span class="comment"># output: [ 1. 2. 3.]</span></span><br><span class="line"><span class="keyword">print</span> m_1 <span class="comment">#output: [ 2. 2.]</span></span><br></pre></td></tr></table></figure> <h3 id="5-3-4-正则化"><a href="#5-3-4-正则化" class="headerlink" title="5.3.4 正则化"></a>5.3.4 正则化</h3><p>在前向传播中将正则化对象设置成$\omega$</p> <p> $L^{2}$参数正则化</p> <p> $$\Omega(\theta)=\frac{1}{2} ||\omega||^{2}_{2}$$</p> <p>将上面的公式整理可得到</p> <p>$$<br>\widetilde{J}(\omega;X,y) = J(\omega;X,y)+\alpha \Omega(\theta) \<br>= J(\omega;X,y)+ \frac{\alpha}{2} \omega^{\top}\omega<br>$$</p> <p>与之对应的梯度为：</p> <p>$$<br>\triangledown_{\omega} \widetilde{J}(\omega;X,y)=\alpha \omega + \triangledown_{\omega}J(\omega;X,y)<br>$$</p> <p>得到$L^{2}$参数正则化的参数$\omega$参数更新的表达式为</p> <p>$$<br>\omega \leftarrow \omega - \epsilon \triangledown_{\omega} \widetilde{J}(\omega;X,y)<br>$$</p> <p>正则化后的代价函数$J(\omega;X,y)$实现代码为</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss = cem + tf.add_n(tf.get_collection(<span class="string">'losses'</span>))</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="comment"># import mnist_forward</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BATCH_SIZE = <span class="number">200</span></span><br><span class="line">LEARNING_RATE_BASE = <span class="number">0.1</span></span><br><span class="line">LEARNING_RATE_DECAY = <span class="number">0.99</span></span><br><span class="line">REGULARIZER = <span class="number">0.0001</span></span><br><span class="line">STEPS = <span class="number">50000</span></span><br><span class="line">MOVING_AVERAGE_DECAY = <span class="number">0.99</span></span><br><span class="line">MODEL_SAVE_PATH=<span class="string">"./model/"</span></span><br><span class="line">MODEL_NAME=<span class="string">"mnist_model"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(mnist)</span>:</span></span><br><span class="line"></span><br><span class="line"> x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.INPUT_NODE])</span><br><span class="line"> y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.OUTPUT_NODE])</span><br><span class="line"> y = mnist_forward.forward(x, REGULARIZER)</span><br><span class="line"> global_step = tf.Variable(<span class="number">0</span>, trainable=<span class="keyword">False</span>)</span><br><span class="line"> </span><br><span class="line"> ce = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=y, labels=tf.argmax(y_, <span class="number">1</span>))</span><br><span class="line"> cem = tf.reduce_mean(ce)</span><br><span class="line"> loss = cem + tf.add_n(tf.get_collection(<span class="string">'losses'</span>))</span><br><span class="line"></span><br><span class="line"> learning_rate = tf.train.exponential_decay(</span><br><span class="line"> LEARNING_RATE_BASE,</span><br><span class="line"> global_step,</span><br><span class="line"> mnist.train.num_examples / BATCH_SIZE, </span><br><span class="line"> LEARNING_RATE_DECAY,</span><br><span class="line"> staircase=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"> train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)</span><br><span class="line"></span><br><span class="line"> ema = tf.train.ExponentialMovingAverage(MOVING_AVERAGE_DECAY, global_step)</span><br><span class="line"> ema_op = ema.apply(tf.trainable_variables())</span><br><span class="line"> <span class="keyword">with</span> tf.control_dependencies([train_step, ema_op]):</span><br><span class="line"> train_op = tf.no_op(name=<span class="string">'train'</span>)</span><br><span class="line"></span><br><span class="line"> saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"> init_op = tf.global_variables_initializer()</span><br><span class="line"> sess.run(init_op)</span><br><span class="line"></span><br><span class="line"> ckpt = tf.train.get_checkpoint_state(MODEL_SAVE_PATH)</span><br><span class="line"> <span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</span><br><span class="line"> saver.restore(sess, ckpt.model_checkpoint_path)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(STEPS):</span><br><span class="line"> xs, ys = mnist.train.next_batch(BATCH_SIZE)</span><br><span class="line"> _, loss_value, step = sess.run([train_op, loss, global_step], feed_dict=&#123;x: xs, y_: ys&#125;)</span><br><span class="line"> <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line"> print(<span class="string">"After %d training step(s), loss on training batch is %g."</span> % (step, loss_value))</span><br><span class="line"> saver.save(sess, os.path.join(MODEL_SAVE_PATH, MODEL_NAME), global_step=global_step)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"> mnist = input_data.read_data_sets(<span class="string">"./data/"</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"> backward(mnist)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"> main()</span><br></pre></td></tr></table></figure> <h2 id="5-4-训练过程"><a href="#5-4-训练过程" class="headerlink" title="5.4 训练过程"></a>5.4 训练过程</h2><h3 id="5-4-1-指数衰减学习率"><a href="#5-4-1-指数衰减学习率" class="headerlink" title="5.4.1 指数衰减学习率"></a>5.4.1 指数衰减学习率</h3><p>训练过程我们使用指数衰减学习率实现，梯度下降算法中的学习率以指数形式衰减，可以提高训练的效率。</p> <p>指数衰减学习率的公式为：</p> <p>$$<br>dlr = lr * dr ^{\frac{globals}{decays}}<br>$$</p> <p>各个简写分别为</p> <table> <thead> <tr> <th style="text-align:left">简写</th> <th style="text-align:left">对应的全程</th> <th style="text-align:left">代表的含义</th> </tr> </thead> <tbody> <tr> <td style="text-align:left">dlr</td> <td style="text-align:left">decayed_learning_rate</td> <td style="text-align:left">指数衰减学习率</td> </tr> <tr> <td style="text-align:left">lr</td> <td style="text-align:left">learining_rate</td> <td style="text-align:left">为学习率初始设定值</td> </tr> <tr> <td style="text-align:left">dr</td> <td style="text-align:left">decay_rate</td> <td style="text-align:left">为学习率的衰减率</td> </tr> <tr> <td style="text-align:left">globals</td> <td style="text-align:left">global_step</td> <td style="text-align:left">记录了当前训练轮数</td> </tr> <tr> <td style="text-align:left">decays</td> <td style="text-align:left">decay_steps</td> <td style="text-align:left">多少轮更新一次学习率</td> </tr> </tbody> </table> <p>也可以用如下的表达式表示指数衰减学习率的表示</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decayed_learning_rate=learining_rate*decay_rate^(global_step/decay_steps)</span><br></pre></td></tr></table></figure> <p>具体的实现代码如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exponential_decay</span><span class="params">(learning_rate,</span></span></span><br><span class="line"><span class="function"><span class="params"> global_step,</span></span></span><br><span class="line"><span class="function"><span class="params"> decay_steps,</span></span></span><br><span class="line"><span class="function"><span class="params"> decay_rate,</span></span></span><br><span class="line"><span class="function"><span class="params"> staircase=False,</span></span></span><br><span class="line"><span class="function"><span class="params"> name=None)</span>:</span></span><br></pre></td></tr></table></figure> <p>函数的的使用</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LEARNING_RATE_BASE = <span class="number">0.8</span></span><br><span class="line">BATCH_SIZE = <span class="number">200</span></span><br><span class="line">LEARNING_RATE_DECAY = <span class="number">0.99</span></span><br><span class="line">global_step = tf.Variable(<span class="number">0</span>, trainable=<span class="keyword">False</span>)</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)</span><br><span class="line"></span><br><span class="line">learning_rate = tf.train.exponential_decay(learning_rate = LEARNING_RATE_BASE,</span><br><span class="line"> global_step = global_step,</span><br><span class="line"> decay_steps = mnist.train.num_examples / BATCH_SIZE,</span><br><span class="line"> decay_rate = LEARNING_RATE_DECAY,</span><br><span class="line"> staircase=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure> <h3 id="5-4-2-梯度下降并开始迭代训练"><a href="#5-4-2-梯度下降并开始迭代训练" class="headerlink" title="5.4.2 梯度下降并开始迭代训练"></a>5.4.2 梯度下降并开始迭代训练</h3><p>上面步骤确定了学习率，并且5.2 节也确定了前向传播，5.3节确定了代价函数，此时可以进行梯度下降算法的迭代训练模型参数</p> <p>模型的训练，此处选择梯度下降算法，开始训练模型参数，代码如下</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)</span><br></pre></td></tr></table></figure> <h3 id="5-4-3-滑动平均优化模型参数"><a href="#5-4-3-滑动平均优化模型参数" class="headerlink" title="5.4.3 滑动平均优化模型参数"></a>5.4.3 滑动平均优化模型参数</h3><p>滑动平均可以使训练的模型能在测试数据上更加健壮(好的泛化能力、鲁棒性好),其实滑动平均模型，主要是通过控制衰减率来控制参数更新前后之间的差距，从而达到减缓参数的变化值（如，参数更新前是5，更新后的值是4，通过滑动平均模型之后，参数的值会在4到5之间），如果参数更新前后的值保持不变，通过滑动平均模型之后，参数的值仍然保持不变。</p> <p>函数的原型如下</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.train.ExponentialMovingAverage(decay, num_updates=<span class="keyword">None</span>, zero_debias=<span class="keyword">False</span>,name=<span class="string">"ExponentialMovingAverage"</span>)</span><br></pre></td></tr></table></figure> <font color="red"><br>参数：<br><br><br>decay：实数类型，衰减率。<br><br>num_updates：可选，为轮数，设置这个参数之后，将会通过min(decay, (1 + num_updates) / (10 + num_updates))函数，从中选择最小值做为衰减率。<br><br><font color="red"><br>返回值：<br></font> <pre><code>ExponentialMovingAverage对象，通过对象调用apply方法可以通过滑动平均模型来更新参数。 </code></pre><font color="red"><br>计算公式：<br> </font> <p>shadow_variable = decay <em> shadow_variable + (1-decay) </em> variable</p> <p>计算公式中的shadow_variable为影子变量，也就是变量在更新之前的值，variable是变量现在的值，可能这样说不是很明白，下面用TensorFlow的程序来实现滑动平均模型。</p> <p>本次模型训练使用的滑动平均算法调用如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ma_decay = <span class="number">0.99</span></span><br><span class="line">ema = tf.train.ExponentialMovingAverage(decay = ma_decay, </span><br><span class="line"> num_updates = global_step)</span><br><span class="line">ema_op = ema.apply(tf.trainable_variables())</span><br></pre></td></tr></table></figure> <p>总结下；</p> <p>滑动平均值的参数更新，比如对权重$\omega_{1}$更新，开始轮数为num_updates= 0 次时，$\omega_{1}$初值设置0, 第1轮更新为variable=1($\omega_{1}=1$); decay=0.99 ;此时有：</p> <p>$\omega_{1}$ = $min(ma_decay, \frac{1+0}{10+0})<em>0+(1-min(1-min(decay,\frac{1+0}{10+0})</em>1))= 0.1<em>0+(1-0.9)</em>1=0.9$</p> <p>训练过程的代码如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">import</span> mnist_forward</span><br><span class="line"><span class="keyword">import</span> mnist_backward</span><br><span class="line">TEST_INTERVAL_SECS = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(mnist)</span>:</span></span><br><span class="line"> <span class="keyword">with</span> tf.Graph().as_default() <span class="keyword">as</span> g:</span><br><span class="line"> x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.INPUT_NODE])</span><br><span class="line"> y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.OUTPUT_NODE])</span><br><span class="line"> y = mnist_forward.forward(x, <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"> ema = tf.train.ExponentialMovingAverage(mnist_backward.MOVING_AVERAGE_DECAY)</span><br><span class="line"> ema_restore = ema.variables_to_restore()</span><br><span class="line"> saver = tf.train.Saver(ema_restore)</span><br><span class="line"> </span><br><span class="line"> correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(y_, <span class="number">1</span>))</span><br><span class="line"> accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) </span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"> <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"> ckpt = tf.train.get_checkpoint_state(mnist_backward.MODEL_SAVE_PATH)</span><br><span class="line"> <span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</span><br><span class="line"> saver.restore(sess, ckpt.model_checkpoint_path)</span><br><span class="line"> global_step = ckpt.model_checkpoint_path.split(<span class="string">'/'</span>)[<span class="number">-1</span>].split(<span class="string">'-'</span>)[<span class="number">-1</span>]</span><br><span class="line"> accuracy_score = sess.run(accuracy, feed_dict=&#123;x: mnist.test.images, y_: mnist.test.labels&#125;)</span><br><span class="line"> print(<span class="string">"After %s training step(s), test accuracy = %g"</span> % (global_step, accuracy_score))</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> print(<span class="string">'No checkpoint file found'</span>)</span><br><span class="line"> <span class="keyword">return</span></span><br><span class="line"> time.sleep(TEST_INTERVAL_SECS)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"> mnist = input_data.read_data_sets(<span class="string">"../MNIST_data/"</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"> test(mnist)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"> main()</span><br></pre></td></tr></table></figure> <h2 id="5-5-模型训练后的断点保存和恢复"><a href="#5-5-模型训练后的断点保存和恢复" class="headerlink" title="5.5 模型训练后的断点保存和恢复"></a>5.5 模型训练后的断点保存和恢复</h2><h3 id="5-5-1-保存模型"><a href="#5-5-1-保存模型" class="headerlink" title="5.5.1 保存模型"></a>5.5.1 保存模型</h3><p>在反向传播中，为防止模型训练过程中由于硬件或者断电的情况下，使模型前期训练全部失效，我们一般会在训练了一定间隔轮数后保存当前训练后的神经网络模型。</p> <p>保存模型后会产生3个文件。 </p> <ul> <li>保存当前图解钩的.meta文件</li> <li>保存当前参数名的.index文件</li> <li>保存当前参数的.data文件</li> </ul> <p>具体的保存过程代码，如下</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MODEL_SAVE_PATH = <span class="string">"./model/"</span></span><br><span class="line">MODEL_NAME = <span class="string">"mnist_model"</span></span><br><span class="line">saver = tf.train.Server()<span class="comment"># 实例化Sever对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(STEPS):</span><br><span class="line"> <span class="keyword">if</span> i%轮数 == <span class="number">0</span>:</span><br><span class="line"> saver.save(sess, os.path.join(MODEL_SAVE_PATH,</span><br><span class="line"> MODEL_NAME), global_step = global_step)</span><br></pre></td></tr></table></figure> <p>os.path.join() 是将括号中的参数都变成路径的字符形式。</p> <p>比如，当前的global_step=100，则save后的文件名是“./model/mnist_model-100.meta、./model/mnist_model-100.index ”等</p> <h3 id="5-5-2-恢复模型"><a href="#5-5-2-恢复模型" class="headerlink" title="5.5.2 恢复模型"></a>5.5.2 恢复模型</h3><p>恢复训练中的神经网络模型</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ckpt = tf.train.get_checkpoint_state(mnist_backward.MODEL_SAVE_PATH)</span><br><span class="line"> <span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</span><br><span class="line"> saver.restore(sess, ckpt.model_checkpoint_path)</span><br></pre></td></tr></table></figure> <p>恢复模型中调用的滑动平均模型参数</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ema = tf.train.ExponentialMovingAverage(滑动平均基数)</span><br><span class="line">ema_restore = ema.variables_to_restore()</span><br><span class="line">saver = tf.train.Saver(ema_restore)</span><br></pre></td></tr></table></figure> <h2 id="5-6-验证阶段神经网络模型准确性的评估方法"><a href="#5-6-验证阶段神经网络模型准确性的评估方法" class="headerlink" title="5.6 验证阶段神经网络模型准确性的评估方法"></a>5.6 验证阶段神经网络模型准确性的评估方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>),tf.argmax(y_, <span class="number">1</span>))<span class="comment"># 返回的都是bool型变量</span></span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))<span class="comment"># 将bool型转化为float型，然后求均值</span></span><br></pre></td></tr></table></figure> <p>对训练后的模型进行准确度评判</p> <p>神经网络的测试验证阶段，只需要前向传播的模型，不需要对模型参数进行梯度下降的迭代优化，具体的过程入下</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Graph().as_default() <span class="keyword">as</span> g:</span><br><span class="line"> x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.INPUT_NODE])</span><br><span class="line"> y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.OUTPUT_NODE])</span><br><span class="line"> y = mnist_forward.forward(x, <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"> ema = tf.train.ExponentialMovingAverage(mnist_backward.MOVING_AVERAGE_DECAY)</span><br><span class="line"> ema_restore = ema.variables_to_restore()</span><br><span class="line"> saver = tf.train.Saver(ema_restore)</span><br><span class="line"></span><br><span class="line"> correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(y_, <span class="number">1</span>))</span><br><span class="line"> accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 开始读取保存后的神经网络模型参数，恢复到我们复制Graph()中 ，然后开始准确性判断</span></span><br><span class="line"> <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"> ckpt = tf.train.get_checkpoint_state(mnist_backward.MODEL_SAVE_PATH)</span><br><span class="line"> <span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</span><br><span class="line"> saver.restore(sess, ckpt.model_checkpoint_path)</span><br><span class="line"> global_step = ckpt.model_checkpoint_path.split(<span class="string">'/'</span>)[<span class="number">-1</span>].split(<span class="string">'-'</span>)[<span class="number">-1</span>]</span><br><span class="line"> accuracy_score = sess.run(accuracy, feed_dict=&#123;x:mnist.test.images, y_:mnist.test.labels&#125;)</span><br><span class="line"> print(<span class="string">"After %s training step(s), test accuracy = %g"</span> % (global_step, accuracy_score))</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> print(<span class="string">'No checkpoint file found'</span>)</span><br><span class="line"> <span class="keyword">return</span></span><br></pre></td></tr></table></figure> <h2 id="5-7-训练后的模型使用"><a href="#5-7-训练后的模型使用" class="headerlink" title="5.7 训练后的模型使用"></a>5.7 训练后的模型使用</h2><p>本部分的过程和测试部分的过程稍微不同的是，需要引入输入待识别的图片的图像预处理工作。</p> <p>预处理工作，应该是如下步骤</p> <ul> <li>图片的灰度化（0-255取值范围）</li> <li>将灰度化处理后的图片像素取值进行缩放（0-1的取值范围np.multiply(nm_arr, 1.0/255.0)）</li> <li>图像的reshape</li> </ul> <p>复制神经网络计算图</p> <p>tf.Graph().as_default()</p> <p>然后重保存的神经网络训练参数文件中恢复模型参数</p> <p>（和测试程序一样，这部分也不需要反向传播优化模型参数）</p> <p>然后就是用前向传播计算的流程一样</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.INPUT_NODE])</span><br><span class="line">y = mnist_forward.forward(x, <span class="keyword">None</span>)</span><br><span class="line">preValue = tf.argmax(y, <span class="number">1</span>)</span><br></pre></td></tr></table></figure> <p>具体的整体代码如下部分所示</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> mnist_backward</span><br><span class="line"><span class="keyword">import</span> mnist_forward</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restore_model</span><span class="params">(testPicArr)</span>:</span></span><br><span class="line"> <span class="keyword">with</span> tf.Graph().as_default() <span class="keyword">as</span> tg:</span><br><span class="line"> x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, mnist_forward.INPUT_NODE])</span><br><span class="line"> y = mnist_forward.forward(x, <span class="keyword">None</span>)</span><br><span class="line"> preValue = tf.argmax(y, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"> variable_averages = tf.train.ExponentialMovingAverage(mnist_backward.MOVING_AVERAGE_DECAY)</span><br><span class="line"> variables_to_restore = variable_averages.variables_to_restore()</span><br><span class="line"> saver = tf.train.Saver(variables_to_restore)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"> ckpt = tf.train.get_checkpoint_state(mnist_backward.MODEL_SAVE_PATH)</span><br><span class="line"> <span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</span><br><span class="line"> saver.restore(sess, ckpt.model_checkpoint_path)</span><br><span class="line"> </span><br><span class="line"> preValue = sess.run(preValue, feed_dict=&#123;x:testPicArr&#125;)</span><br><span class="line"> <span class="keyword">return</span> preValue</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> print(<span class="string">"No checkpoint file found"</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_pic</span><span class="params">(picName)</span>:</span></span><br><span class="line">img = Image.open(picName)</span><br><span class="line">reIm = img.resize((<span class="number">28</span>,<span class="number">28</span>), Image.ANTIALIAS)</span><br><span class="line">im_arr = np.array(reIm.convert(<span class="string">'L'</span>))</span><br><span class="line">threshold = <span class="number">50</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">28</span>):</span><br><span class="line"> <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">28</span>):</span><br><span class="line"> im_arr[i][j] = <span class="number">255</span> - im_arr[i][j]</span><br><span class="line"> <span class="keyword">if</span> (im_arr[i][j] &lt; threshold):</span><br><span class="line"> im_arr[i][j] = <span class="number">0</span></span><br><span class="line"> <span class="keyword">else</span>: im_arr[i][j] = <span class="number">255</span></span><br><span class="line"></span><br><span class="line">nm_arr = im_arr.reshape([<span class="number">1</span>, <span class="number">784</span>])</span><br><span class="line">nm_arr = nm_arr.astype(np.float32)</span><br><span class="line">img_ready = np.multiply(nm_arr, <span class="number">1.0</span>/<span class="number">255.0</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> img_ready</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">()</span>:</span></span><br><span class="line">testNum = input(<span class="string">"input the number of test pictures:"</span>)</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(testNum):</span><br><span class="line"> testPic = raw_input(<span class="string">"the path of test picture:"</span>)</span><br><span class="line"> testPicArr = pre_pic(testPic)</span><br><span class="line"> preValue = restore_model(testPicArr)</span><br><span class="line"> print(<span class="string">"The prediction number is:"</span>, preValue)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">application()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><!-- rebuild by neat --></font>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第四章个人笔记-神经网络优化笔记</title>
      <link href="//tfyouhua4/"/>
      <url>//tfyouhua4/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本节主要是学习TensorFlow的相关学习笔记，主要是基础的学习路线，包括简单的实例笔记等。</p> <p>内容包括如下：</p> <ul> <li>部分数学推导</li> <li>部分代码实现</li> <li>神经网络的优化过程</li> <li>正则化过程数学推导</li> <li>正则化过程代码实现</li> </ul> <blockquote> <p>提示本部分是一个PDF手稿，暂时未整理排版，只能在电脑端预览本部分的PDF笔记,手机上的PDF笔记将不会显示出来。</p> </blockquote> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <div id="pdf1-view1" class=" pdfobject-container" style="height:400px"><br><embed class="pdfobject" src="/TensorFlow-index/第四章个人笔记-神经网络优化.ipynb - Colaboratory.pdf#navpanes=1&amp;view=FitH&amp;pagemode=thumbs&amp;page=3" type="application/pdf" style="overflow: auto; width: 100%; height: 180%;" internalinstanceid="29"><br></div> <div style="height:400px"><br><br></div> <h1 id="第四章、神经网络优化"><a href="#第四章、神经网络优化" class="headerlink" title="第四章、神经网络优化"></a>第四章、神经网络优化</h1><p>针对《TensorFlow学习笔记》做相关学习笔记，这一段落主要记录神经网络的优化相关的知识。</p> <h2 id="4-1-正则化的理论知识"><a href="#4-1-正则化的理论知识" class="headerlink" title="4.1 正则化的理论知识"></a>4.1 正则化的理论知识</h2><h3 id="4-1-1-过拟合"><a href="#4-1-1-过拟合" class="headerlink" title="4.1.1 过拟合"></a>4.1.1 过拟合</h3><p>神经网络模型在训练数据集上表现很好，但是却在新的预测或者分类的数据集上的表现不是很理想，这就说明模型的泛化能力差，可能存在过拟合现象(也有可能是存在欠拟合的情况)</p> <h3 id="4-1-2-正则化"><a href="#4-1-2-正则化" class="headerlink" title="4.1.2 正则化"></a>4.1.2 正则化</h3><p>在损失函数中给每个参数加上权重参数$\omega$加上权重系数$\eta$,引入模型复杂度指标，实现对模型的噪声抑制，避免最终的模型存在过拟合现象。</p> <h3 id="4-1-3-正则化的理论思路"><a href="#4-1-3-正则化的理论思路" class="headerlink" title="4.1.3 正则化的理论思路"></a>4.1.3 正则化的理论思路</h3><p>机器学习的大部分带参模型的结构基本上和如下模型形似，模型如下：</p> <p>$$<br>\omega^{*} = arg \min_{\omega} \sum_{i}^{} L(y_{i},f(x_{i};\omega)) + \alpha \Omega(\omega)<br>$$</p> <p>其中$\alpha $为正则化系数, 也是一个权值。$\Omega$是一个规则化函数。</p> <ul> <li>[1] 规则化函数$\Omega$</li> </ul> <p>规则化函数$\Omega$, 有很多种选择，一般是性复杂度的单调递增函数,模型越复杂，规则化值就越大。一般常见的比如L0范数, L1范数，迹范数，Frobenius范数和核范数等等。</p> <ul> <li>[2] 正则化的目标函数</li> </ul> <p>$$<br>\widetilde{J}(\theta;X,y) = J(\theta;X,y)+\alpha \Omega(\theta)<br>$$</p> <p>$\widetilde{J}$为正则化后的函数；</p> <p>$J(\theta;X,y)$为标准目标函数；</p> <p>$\Omega$是权衡范数惩罚项；</p> <p>$\alpha \in [0, \propto)$是权衡范数惩罚项$\Omega$和标准目标函数$J(\theta;X,y)$的相对贡献超参数；</p> <h4 id="注解1-分类和回归问题的区别"><a href="#注解1-分类和回归问题的区别" class="headerlink" title="注解1:分类和回归问题的区别"></a><font color="blue">注解1:</font>分类和回归问题的区别</h4><hr> <p>输入变量与输出变量均为连续变量的预测问题是回归问题； </p> <p>输出变量为有限个离散变量的预测问题成为分类问题；</p> <p>Logistic回归，也可以说是二分类的情况；</p> <h3 id="4-1-4-L-2-参数正则化"><a href="#4-1-4-L-2-参数正则化" class="headerlink" title="4.1.4 $L^{2}$参数正则化"></a>4.1.4 $L^{2}$参数正则化</h3><p>$L_{2}$范数可以防止过拟合，提升模型的泛化能力。</p> <p>$$\Omega(\theta)=\frac{1}{2} ||\omega||^{2}_{2}$$</p> <p>为了简单的表示，我们假设不考虑偏置,模型中只存在权重系数$\omega$<br>,则$\theta == \omega$,代入模型的总的目标函数，得到如下表达式。<br>$$<br>\widetilde{J}(\omega;X,y) = J(\omega;X,y)+\alpha \frac{1}{2} ||\omega||^{2}_{2} \<br>= J(\omega;X,y)+ \frac{\alpha}{2} \omega^{\top}\omega<br>$$</p> <p>与之对应的梯度为：</p> <p>$$<br>\triangledown_{\omega} \widetilde{J}(\omega;X,y)=\alpha \omega + \triangledown_{\omega}J(\omega;X,y)<br>$$</p> <p>使用单步梯度下降更新权重，即执行如下更新：</p> <p>$$<br>\omega \leftarrow \omega - \epsilon(\alpha \omega + \triangledown_{\omega}J(\omega;X,y))<br>$$</p> <p>这种写法对上面的进一步改写就是这样的</p> <p>$$<br>\omega \leftarrow \omega - \epsilon \triangledown_{\omega} \widetilde{J}(\omega;X,y)<br>$$</p> <p>有没有发现 $\epsilon $和梯度下降算法的学习率表达式还是有点相似, 但是别忘了$\widetilde{J}$和$J$两个表达式里面是不一样的。</p> <h3 id="4-1-5-L-1-参数正则化"><a href="#4-1-5-L-1-参数正则化" class="headerlink" title="4.1.5 $L^{1}$参数正则化"></a>4.1.5 $L^{1}$参数正则化</h3><p>类似，对模型参数$\omega$的$L^{1}$正则化被定义为：</p> <p>$$<br>\Omega(\theta) = ||\omega||<em>{1} = \sum</em>{i}|\omega_{i}|<br>$$</p> <p>对应的正则化目标函数为：</p> <p>$$<br>\widetilde{ J}(\omega;X,y)=\alpha||\omega||_{1}+J(\omega;X,y)<br>$$</p> <h3 id="4-1-6-L-2-、L-2-参数正则化的区别"><a href="#4-1-6-L-2-、L-2-参数正则化的区别" class="headerlink" title="4.1.6 $L^{2}、L^{2}$参数正则化的区别"></a>4.1.6 $L^{2}、L^{2}$参数正则化的区别</h3><p>为了便于可视化，我们考虑两维的情况，在(w1, w2)平面上可以画出目标函数的等高线，而约束条件则成为平面上半径为C的一个 norm ball 。等高线与 norm ball 首次相交的地方就是最优解，如下图：</p> <p><img src="https://s2.ax1x.com/2019/06/07/Vw17RO.png" alt="Vw17RO.png"></p> <p>通过这个$L_{1}-ball$和$L_{2}-ball$图像可以看出，$L_{1}$和每隔坐标轴都有“角”的出现，最优解如果出现在轴上，代表对应的轴上的$\omega$参数为0，例如图中的相交点就有w1=0，而更高维的时候（想象一下三维的L1-ball 是什么样的？）除了角点以外，还有很多边的轮廓也是既有很大的概率成为第一次相交的地方，又会产生稀疏性。</p> <p>相比之下，L2-ball 就没有这样的性质，因为没有角，所以第一次相交的地方出现在具有稀疏性的位置的概率就变得非常小了。这就从直观上来解释了为什么L1-regularization 能产生稀疏性，而L2-regularization 不行的原因了。</p> <h4 id="注解1-批量梯度下降算法"><a href="#注解1-批量梯度下降算法" class="headerlink" title="注解1:批量梯度下降算法"></a><font color="blue">注解1:</font>批量梯度下降算法</h4><hr> <p>批量梯度下降算法(batch gradient descent)的公式为：</p> <p>repeat until convergence{<br>$$<br>\theta_{j}: = \theta_{j} - \alpha \frac{\partial}{\partial <em>{j}}J(\theta</em>{0}, \theta_{1}) \qquad (for j = 0 \quad and \quad j = 1)<br>$$<br>}</p> <p>$\alpha$就是学习率, 他决定了代价函数沿着梯度下降程度最大的方向向下迈出的下一步的步长；</p> <p>其中代价函数的梯度代表下一步迈步的方向；</p> <p>前面一个负号，代表，方向永远向着局部梯度最优点的方向；</p> <hr> <h4 id="参考来自："><a href="#参考来自：" class="headerlink" title="参考来自："></a><font color="red">参考来自：</font></h4><ul> <li><a href="https://blog.csdn.net/zouxy09/article/details/24971995" target="_blank" rel="noopener">机器学习中的范数规则化之（一）L0、L1与L2范数</a></li> <li><a href="href:" target="_blank" rel="noopener">小花书</a></li> </ul> <h2 id="4-2-正则化的代码实现"><a href="#4-2-正则化的代码实现" class="headerlink" title="4.2 正则化的代码实现"></a>4.2 正则化的代码实现</h2><h3 id="4-2-1-基础知识"><a href="#4-2-1-基础知识" class="headerlink" title="4.2.1 基础知识"></a>4.2.1 基础知识</h3><p>通过对未经正则化前的散点图和经过正则化后的散点图进行对比，我们可以发现，如果引入正则化后，所能够带来的优势。</p> <h3 id="4-2-1-TensorFlow基本函数"><a href="#4-2-1-TensorFlow基本函数" class="headerlink" title="4.2.1 TensorFlow基本函数"></a>4.2.1 TensorFlow基本函数</h3><ul> <li>tf.add_to_collection(‘list_name’,element) </li> </ul> <p>将元素element添加到列表list_name中。</p> <ul> <li>tf.get_collection(‘list_name’)</li> </ul> <p>返回名称为list_name的列表</p> <ul> <li>tf.add_n(list)</li> </ul> <p>将列表元素相加并返回</p> <ul> <li>tf.train.AdamOptimizer()</li> </ul> <p>Adam 这个名字来源于 <strong>adaptive moment estimation</strong> , 自适应矩估计，如果一个随机变量X服从某个分布，X的一阶矩是求取X样本的平均值，表示为$E(X)$。X的二阶矩是表示求取样本的平方的平均值，表示为$E(X^{2})$</p> <p>Adam 也是基于梯度下降的方法，但是每次迭代参数的学习步长都有一个确定的范围，不会因为很大的梯度导致很大的学习步长，参数的值比较稳定，AdamOptimizer通过动量（参数的移动平均数）来改善传统梯度下降，促进超参数动态调整。</p> <hr> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf.add_to_collection(<span class="string">'losses'</span>, tf.constant(<span class="number">2.2</span>))</span><br><span class="line">tf.add_to_collection(<span class="string">'losses'</span>, tf.constant(<span class="number">3.</span>))</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"> print(sess.run(tf.get_collection(<span class="string">'losses'</span>)))</span><br><span class="line"> print(sess.run(tf.add_n(tf.get_collection(<span class="string">'losses'</span>))</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">[<span class="number">2.2</span>, <span class="number">3.0</span>] </span><br><span class="line"><span class="number">5.2</span></span><br><span class="line">注意： </span><br><span class="line">使用tf.add_n对列表元素进行相加时，列表内元素类型必须一致，否则会报错。</span><br></pre></td></tr></table></figure> <h2 id="4-3-综合代码"><a href="#4-3-综合代码" class="headerlink" title="4.3 综合代码"></a>4.3 综合代码</h2><p>包括了正则化，包括指数衰减学习率</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#0导入模块 ，生成模拟数据集</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">seed = <span class="number">2</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateds</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="comment">#基于seed产生随机数</span></span><br><span class="line">rdm = np.random.RandomState(seed)</span><br><span class="line"> <span class="comment">#随机数返回300行2列的矩阵，表示300组坐标点（x0,x1）作为输入数据集</span></span><br><span class="line">X = rdm.randn(<span class="number">300</span>,<span class="number">2</span>)</span><br><span class="line"> <span class="comment">#从X这个300行2列的矩阵中取出一行,判断如果两个坐标的平方和小于2，给Y赋值1，其余赋值0</span></span><br><span class="line"> <span class="comment">#作为输入数据集的标签（正确答案）</span></span><br><span class="line">Y_ = [int(x0*x0 + x1*x1 &lt;<span class="number">2</span>) <span class="keyword">for</span> (x0,x1) <span class="keyword">in</span> X]</span><br><span class="line"> <span class="comment">#遍历Y中的每个元素，1赋值'red'其余赋值'blue'，这样可视化显示时人可以直观区分</span></span><br><span class="line">Y_c = [[<span class="string">'red'</span> <span class="keyword">if</span> y <span class="keyword">else</span> <span class="string">'blue'</span>] <span class="keyword">for</span> y <span class="keyword">in</span> Y_]</span><br><span class="line"> <span class="comment">#对数据集X和标签Y进行形状整理，第一个元素为-1表示跟随第二列计算，第二个元素表示多少列，可见X为两列，Y为1列</span></span><br><span class="line">X = np.vstack(X).reshape(<span class="number">-1</span>,<span class="number">2</span>)</span><br><span class="line">Y_ = np.vstack(Y_).reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> X, Y_, Y_c</span><br><span class="line"> </span><br><span class="line"><span class="comment">#print X</span></span><br><span class="line"><span class="comment">#print Y_</span></span><br><span class="line"><span class="comment">#print Y_c</span></span><br><span class="line"><span class="comment">#用plt.scatter画出数据集X各行中第0列元素和第1列元素的点即各行的（x0，x1），用各行Y_c对应的值表示颜色（c是color的缩写） </span></span><br><span class="line"><span class="comment">#plt.scatter(X[:,0], X[:,1], c=np.squeeze(Y_c)) </span></span><br><span class="line"><span class="comment">#plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义神经网络的输入、参数和输出，定义前向传播过程 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_weight</span><span class="params">(shape, regularizer)</span>:</span></span><br><span class="line">w = tf.Variable(tf.random_normal(shape), dtype=tf.float32)</span><br><span class="line">tf.add_to_collection(<span class="string">'losses'</span>, tf.contrib.layers.l2_regularizer(regularizer)(w))</span><br><span class="line"> <span class="keyword">return</span> w</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bias</span><span class="params">(shape)</span>:</span> </span><br><span class="line"> b = tf.Variable(tf.constant(<span class="number">0.01</span>, shape=shape)) </span><br><span class="line"> <span class="keyword">return</span> b</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(x, regularizer)</span>:</span></span><br><span class="line"> </span><br><span class="line">w1 = get_weight([<span class="number">2</span>,<span class="number">11</span>], regularizer)</span><br><span class="line">b1 = get_bias([<span class="number">11</span>])</span><br><span class="line">y1 = tf.nn.relu(tf.matmul(x, w1) + b1)</span><br><span class="line"></span><br><span class="line">w2 = get_weight([<span class="number">11</span>,<span class="number">1</span>], regularizer)</span><br><span class="line">b2 = get_bias([<span class="number">1</span>])</span><br><span class="line">y = tf.matmul(y1, w2) + b2 </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>跨平台好用且小巧的pdf阅读器</title>
      <link href="//linuxPDF/"/>
      <url>//linuxPDF/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><center> Porter Pan </center> <h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>在跨平台的PDF阅读器中，<a href="https://www.foxitsoftware.cn/" target="_blank" rel="noopener">Foxit</a>阅读器还是比较不错的，但是Foxit 在linux下的变现还是有点令人不大满意，首先是看英文文献中，做notes很不convenient，没有快捷键使用注释工具，还不能取词，复制有时也必须在选择模式下才能复制，总之很不方便。下面给推荐两款跨平台，windows和linux都好用的PDF阅读和编辑的软件</p> <ul> <li style="list-style: none"><input type="checkbox" checked> master pdf editor5 （破解后很好用哦）</li> <li style="list-style: none"><input type="checkbox" checked> Pdf studio viewer 2018(免费版可以做笔记很好用)</li> <li><a href="https://www.foxitsoftware.cn/products/reader/" target="_blank" rel="noopener">Foxit Reader</a>（感觉linux里一般般，取词不行，应该是快捷键冲突和复制内容有时抽风）</li> <li><a href="https://www.baidu.com/link?url=J6vLX1mF7Cnhgl-aex7_ZuW97Vp56RR_weJDjEe-AgwNxhrgF9PgYcmRv73LtKtM&amp;wd=&amp;eqid=a53efd0400025b13000000035cd76943" target="_blank" rel="noopener">Okular</a> （差强人意吧，但是没什么科夸赞的）</li> </ul> <a id="more"></a> <h2 id="master-pdf-editor5-官方地址"><a href="#master-pdf-editor5-官方地址" class="headerlink" title="master pdf editor5 官方地址"></a><a href="https://code-industry.net/get-masterpdfeditor/" target="_blank" rel="noopener">master pdf editor5 官方地址</a></h2><p>Master pdf editor is the most popular and featured rich commercial Linux pdf editor available in the market. You can do almost everything ranging from creating and editing a pdf file to signature handling and editing scanned documents. It provides a wide range of features including add or edit text, images, notes into the pdf documents, <font color="red">offers powerful annotation tools</font>, ability to edit pdf forms etc.</p> <p>Though Master PDF Editor is a proprietary application, still you can do some basic task by using the free version. But digital signatures, encryption, and watermarks are not available in the free version.</p> <p>but there have some approch to get it by crick.</p> <h2 id="master-pdf-editor5-破解版linux安装教程"><a href="#master-pdf-editor5-破解版linux安装教程" class="headerlink" title="master pdf editor5 破解版linux安装教程"></a>master pdf editor5 破解版linux安装教程</h2><h3 id="linux下从get-masterpdfeditor官方下载最新版rpm或者其他方式安装，下面以rpm安装为例"><a href="#linux下从get-masterpdfeditor官方下载最新版rpm或者其他方式安装，下面以rpm安装为例" class="headerlink" title="linux下从get-masterpdfeditor官方下载最新版rpm或者其他方式安装，下面以rpm安装为例"></a>linux下从<a href="https://code-industry.net/get-masterpdfeditor/" target="_blank" rel="noopener">get-masterpdfeditor官方下载最新版rpm</a>或者其他方式安装，下面以rpm安装为例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">porter@porter-Aspire:~$ <span class="built_in">cd</span> ~</span><br><span class="line">porter@porter-Aspire:~$ wget https://code-industry.net/public/master-pdf-editor-5.4.10_qt5.x86_64.rpm</span><br><span class="line">porter@porter-Aspire:~$ dpkg -i ./master-pdf-editor-5.4.10_qt5.x86_64.rpm</span><br><span class="line">porter@porter-Aspire:~$ masterpdfeditor5 <span class="comment"># 或者直接去软件中心打开这个安装好的软件</span></span><br></pre></td></tr></table></figure> <p>master-pdf-editor软件将会运行界面效果如下</p> <p><img src="/appendix/masterpdfeditor-5.png" alt="masterpdfeditor-5"></p> <h3 id="离线激活教程"><a href="#离线激活教程" class="headerlink" title="离线激活教程"></a>离线激活教程</h3><p>Off Line Activation</p> <p>In order to activate Master PDF Editor in autonomous mode, preform following actions:</p> <p>Double click Master PDF Editor icon on your desktop and choose Help -&gt; Register… </p> <p>Set Offline Activation checkbox on. </p> <p>Activation Code field will appear near Registration Code field. System will also generate unique identifier for you (ID is selected on screenshot below).</p> <p>出现如下的激活界面：</p> <p><img src="/appendix/masterpdfeditor-5-register.jpg" alt="masterpdfeditor-5-register"></p> <p>到此不要看下面一段官方购买的激活教程，我们跳过，</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Please, copy-paste to e-mail and send ID and Registration Code to our e-mail address support@code-industry.net.</span><br><span class="line"></span><br><span class="line">Please, inform your Order ID or e-mail address that you used <span class="keyword">for</span> purchasing! Letter without this information will be ignored!</span><br><span class="line"></span><br><span class="line">After you receive the response with activation code, <span class="keyword">do</span> not <span class="built_in">type</span> it <span class="keyword">in</span> manually. Instead, copy-paste it to Activation Code field and paste registration code to Registration Code field and <span class="keyword">then</span> click Activate.</span><br></pre></td></tr></table></figure> <p>好了，跳转到这，现在告诉你们如何用免费的手段激活</p> <ul> <li>[1.] 找台windows机器，在windows上运行破解软件<a href="/appendix/Keygen.exe">Keygen.exe</a></li> <li>[2.] 将 ##masterpdfeditor-5-register## 图片中的ID，复制到破解软件中</li> </ul> <p><img src="/appendix/masterpdfeditor-5-creak1.jpg" alt="masterpdfeditor-5-creak1"></p> <ul> <li>[3.] 然后回车，此时破解软件会出现如下激活码信息</li> </ul> <p><img src="/appendix/masterpdfeditor-5-creak2.jpg" alt="masterpdfeditor-5-creak2"></p> <ul> <li>[4.] 将<a href="/appendix/Crack/">破解替换文件</a>文件家中的两个x86/x64根据你自己电脑是64位还是32位选择性复制到你的安装目录中(linux在/opt/master pdf/)</li> <li>[5.] 输入激活码到上图对应的填写位置,点击激活</li> </ul> <p>效果如下</p> <p><img src="/appendix/masterpdfeditor-5-regesterd.png" alt="激活后的样子"></p> <p>我提供的破解文件里面包含如下文件，exe是windows环境中运行的。rpm是linux中运行的。</p> <p><img src="/appendix/masterpdfeditor-5-creak-folder.jpg" alt="masterpdfeditor-5-creak-folder"></p> <h3 id="windows下从get-masterpdfeditor官方下载最新版exe"><a href="#windows下从get-masterpdfeditor官方下载最新版exe" class="headerlink" title="windows下从get-masterpdfeditor官方下载最新版exe"></a>windows下从<a href="https://code-industry.net/get-masterpdfeditor/" target="_blank" rel="noopener">get-masterpdfeditor官方下载最新版exe</a></h3><p>破解步骤</p> <ul> <li>[1.] 直接安装exe </li> <li>[2.] 将<a href="/appendix/Crack/">破解替换文件</a>文件家中的两个x86/x64根据你自己电脑是64位还是32位选择性复制到你的安装目录中(windows桌面快捷键右键软件安装位置)</li> <li>[3.] 运行激活软件keygreen.exe产生激活码</li> <li>[4.] 运行master pdf ，将ID复制出来填写到kegreen.exe后回车，keygreen 将产生激活码，切换到master pdf 填写激活码</li> <li>[5.] 破解成功</li> </ul> <h3 id="软件汉化参考地址"><a href="#软件汉化参考地址" class="headerlink" title="软件汉化参考地址"></a>软件汉化参考地址</h3><p><a href="http://www.downxia.com/zixun/47041.html" target="_blank" rel="noopener">Master PDF Editor怎么设置中文界面 让你的操作更方便</a></p> <h2 id="附件供下载"><a href="#附件供下载" class="headerlink" title="附件供下载"></a>附件供下载</h2><p>331×××@q×.com:</p> <p>master pdf 破解版下载链接: <a href="https://pan.baidu.com/s/1iGH2394KU7nG_lde7hRy2Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1iGH2394KU7nG_lde7hRy2Q</a></p> <p>提取码: kra8 </p> <p>复制这段内容后打开百度网盘手机App，操作更方便哦</p> <blockquote> <p>如果软件链接失效可以关注我的telegram并私信给我: @Porter_Pan</p> </blockquote> <hr> <p>文章写作技巧：</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+ </span>1.写</span><br><span class="line"><span class="bullet">+ </span>2.的</span><br><span class="line"><span class="bullet">+ </span>的</span><br><span class="line"><span class="bullet">+ </span>对对对</span><br><span class="line"><span class="bullet">+ </span>的</span><br></pre></td></tr></table></figure> <blockquote> <blockquote> <blockquote> <blockquote> <p>效果</p> </blockquote> </blockquote> </blockquote> </blockquote> <ul> <li>1.写</li> <li>2.的</li> <li>的</li> <li>对对对</li> <li>的</li> </ul> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">破解步骤</span><br><span class="line"><span class="bullet">- </span>1. 直接安装exe </span><br><span class="line"><span class="bullet">- </span>2. 将[<span class="string">破解替换文件</span>](<span class="link">/appendix/Crack/</span>)文件家中的两个x86/x64根据你自己电脑是64位还是32位选择性复制到你的安装目录中(windows桌面快捷键右键软件安装位置)</span><br><span class="line"><span class="bullet">- </span>[3.] 运行激活软件keygreen.exe产生激活码</span><br><span class="line"><span class="bullet">- </span>[4.] 运行master pdf ，将ID复制出来填写到kegreen.exe后回车，keygreen 将产生激活码，切换到master pdf 填写激活码</span><br><span class="line"><span class="bullet">- </span>[5.] 破解成功</span><br></pre></td></tr></table></figure> <blockquote> <blockquote> <blockquote> <blockquote> <p>效果</p> </blockquote> </blockquote> </blockquote> </blockquote> <p>破解步骤</p> <ul> <li><ol> <li>直接安装exe </li> </ol> </li> <li><ol start="2"> <li>将<a href="/appendix/Crack/">破解替换文件</a>文件家中的两个x86/x64根据你自己电脑是64位还是32位选择性复制到你的安装目录中(windows桌面快捷键右键软件安装位置)</li> </ol> </li> <li>[3.] 运行激活软件keygreen.exe产生激活码</li> <li>[4.] 运行master pdf ，将ID复制出来填写到kegreen.exe后回车，keygreen 将产生激活码，切换到master pdf 填写激活码</li> <li>[5.] 破解成功</li> </ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 安利 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web中插入视频和音乐播放</title>
      <link href="//musicplug/"/>
      <url>//musicplug/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文介绍在web中简单的嵌入第三方音乐播放的相关html代码</p> <p>实现网页上直接可以音乐或者视频的播放，适合博客文章的嵌入</p> <p>每种播放都写了两种播放样式</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h2 id="插入视频播放"><a href="#插入视频播放" class="headerlink" title="插入视频播放"></a>插入视频播放</h2><h3 id="视频在线播放方式1"><a href="#视频在线播放方式1" class="headerlink" title="视频在线播放方式1"></a>视频在线播放方式1</h3><p>无聊时刻看看剧也不错：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">498</span> <span class="attr">width</span>=<span class="string">100%</span> <span class="attr">src</span>=<span class="string">"https://player.bilibili.com/player.html?aid=38792500&amp;cid=68183480&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p> <div><br><iframe height="498" width="100%" src="https://player.bilibili.com/player.html?aid=38792500&cid=68183480&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><br></div> <hr> <h3 id="视频播放方式2"><a href="#视频播放方式2" class="headerlink" title="视频播放方式2"></a>视频播放方式2</h3><p>直接在优酷上打开视屏，选择分享，外链。即可</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">498</span> <span class="attr">width</span>=<span class="string">510</span> <span class="attr">src</span>=<span class="string">'http://player.youku.com/embed/XNDI4MDk3Mjc0NA=='</span> <span class="attr">frameborder</span>=<span class="string">0</span> '<span class="attr">allowfullscreen</span>'&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure> <iframe height="498" width="510" src="http://player.youku.com/embed/XNDI4MDk3Mjc0NA==" frameborder="0" 'allowfullscreen'=""></iframe> <hr> <h2 id="插入音频播放"><a href="#插入音频播放" class="headerlink" title="插入音频播放"></a>插入音频播放</h2><h3 id="插入网易云音乐的方法一"><a href="#插入网易云音乐的方法一" class="headerlink" title="插入网易云音乐的方法一"></a>插入网易云音乐的方法一</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=1378085345&amp;auto=0&amp;height=66"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure> <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://y.qq.com/n/yqq/song/004YUIB22WvTWe.html&auto=0&height=66"><br></iframe> <h3 id="插入网易云音乐的方法二"><a href="#插入网易云音乐的方法二" class="headerlink" title="插入网易云音乐的方法二"></a>插入网易云音乐的方法二</h3><p>点击网易云音乐的某一首歌（不是歌曲列表）,然后选择生成外链，然后选择html外链</p> <p><img src="https://s2.ax1x.com/2019/08/01/eUguh6.png" alt="音乐外链"></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"1"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"132"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">src</span>=<span class="string">"https://music.163.com/outchain/player?type=2&amp;amp;id=2175282&amp;amp;auto=0&amp;amp;height=80"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure> <iframe frameborder="0" border="1" marginwidth="0" marginheight="0" width="100%" height="132" src="https://music.163.com/outchain/player?type=2&amp;id=2175282&amp;auto=0&amp;height=80"><br></iframe> <hr> <p>id：歌曲id<br>auto：0/1<br>0表示打开网页的时候不自动播放；<br>1表示打开网页的时候自动播放。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页嵌入 </tag>
            
            <tag> 音视频嵌入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TensorFlow的相关学习笔记 part1</title>
      <link href="//tfnotesp1/"/>
      <url>//tfnotesp1/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本节主要是学习TensorFlow的相关学习笔记，主要是基础的学习路线，包括简单的实例笔记等。</p> <p>内容包括如下：</p> <ul> <li>部分数学推导</li> <li>部分代码实现</li> <li>莺尾花数据集</li> <li>MNIST手写字等</li> </ul> <blockquote> <p>提示本部分是一个PDF手稿，暂时未整理排版，只能在电脑端预览本部分的PDF笔记,手机上的PDF笔记将不会显示出来。</p> </blockquote> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <div><br><embed src="/TensorFlow-index/deeplearning.pdf#page=1" type="application/pdf" style="overflow: auto; position: absolute; top: 0; right: 0; bottom: 0; left: 0; width: 100%; height: 180%;"><br></div> <div id="pdf1-view1" class=" pdfobject-container" style="height:400px"><br><embed class="pdfobject" src="/TensorFlow-index/deeplearning.pdf#navpanes=1&amp;view=FitH&amp;pagemode=thumbs&amp;page=3" type="application/pdf" style="overflow: auto; width: 100%; height: 180%;" internalinstanceid="29"><br></div> <div style="height:400px"><br><br></div> <h1 id="MNIST-手写字识别程序入门"><a href="#MNIST-手写字识别程序入门" class="headerlink" title="MNIST 手写字识别程序入门"></a>MNIST 手写字识别程序入门</h1><h1 id="一、部分基础"><a href="#一、部分基础" class="headerlink" title="一、部分基础"></a>一、部分基础</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">test = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line"> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line"> [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>],</span><br><span class="line"> [<span class="number">8</span>,<span class="number">7</span>,<span class="number">2</span>]])</span><br><span class="line">np.argmax(test,<span class="number">1</span>)</span><br></pre></td></tr></table></figure> <h2 id="1-1-线性回归基础"><a href="#1-1-线性回归基础" class="headerlink" title="1.1 线性回归基础"></a>1.1 线性回归基础</h2><h3 id="1-1-1-最小二乘法曲线拟合问题"><a href="#1-1-1-最小二乘法曲线拟合问题" class="headerlink" title="1.1.1 最小二乘法曲线拟合问题"></a>1.1.1 最小二乘法曲线拟合问题</h3><h3 id="1-1-2-模型假设"><a href="#1-1-2-模型假设" class="headerlink" title="1.1.2 模型假设"></a>1.1.2 模型假设</h3><p>理想的线性模型</p> <p>$$<br>y = 0.99x + 9.31; x \in {[1:1:10]}<br>$$</p> <p>假设的线性模型</p> <p>$$<br>f(x;a,b) = ax + b<br>$$</p> <h3 id="1-1-3-最小二乘法确定参数"><a href="#1-1-3-最小二乘法确定参数" class="headerlink" title="1.1.3 最小二乘法确定参数"></a>1.1.3 最小二乘法确定参数</h3><p>$$<br>f(x;a,b) = ax + b<br>$$</p> <p>均方误差函数</p> <p>$$<br>S = \sum_{i=1}^{n} (y_{i}-(ax_{i}+b)<br>)^{2}<br>$$</p> <p>对误差求极限，找误差函数的最小值点</p> <p>$$<br>\frac{\partial S}{\partial a}=-2(\sum_{i=1}^{n}x_{i}y_{i}-b\sum_{i=1}{n}x_{i}-a\sum_{i=1}^{n}x_{i}^{2})<br>$$</p> <p>$$<br>\frac{\partial S}{\partial b}=-2(\sum_{i=1}^{n}y_{i}-nb-a\sum_{i=1}^{n}x_{i})<br>$$</p> <p>令偏导数为零，求得凸函数的极小值点处的a,b 值</p> <p>$$<br>a=\frac {n\sum_{}^{}{x_iy_i}-\sum_{}^{}{x_i}\sum_{}^{}{y_i}} {n\sum_{}^{}{x_i}^2-(\sum_{}^{}{x_i})^2}<br>$$</p> <p>$$<br>b = \frac {\sum_{}^{}{x_i}^2\sum_{}^{}{y_i}-\sum_{}^{}{x_i}\sum_{}^{}{x_iy_i}} {n\sum_{}^{}{x_i}^2-(\sum_{}^{}{x_i})^2}<br>$$</p> <p>下面用两种代码的实现方式实现上述曲线拟合过程</p> <ul> <li>用户自定义函数代码实现</li> <li>调用numpy的最小二乘法的线性拟合问题lstsq函数实现</li> </ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户自定义函数代码实现</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcAB</span><span class="params">(x,y)</span>:</span></span><br><span class="line"> n = len(x)</span><br><span class="line"> sumX,sumY,sumXY,sumXX =<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n):</span><br><span class="line"> sumX += x[i]</span><br><span class="line"> sumY += y[i]</span><br><span class="line"> sumXX += x[i]*x[i]</span><br><span class="line"> sumXY += x[i]*y[i]</span><br><span class="line"> a = (n*sumXY -sumX*sumY)/(n*sumXX -sumX*sumX)</span><br><span class="line"> b = (sumXX*sumY - sumX*sumXY)/(n*sumXX-sumX*sumX)</span><br><span class="line"> <span class="keyword">return</span> a,b,</span><br><span class="line"></span><br><span class="line"><span class="comment"># xi = [1,2,3,4,5,6,7,8,9,10]</span></span><br><span class="line"><span class="comment"># yi = [10,11.5,12,13,14.5,15.5,16.8,17.3,18,18.7]</span></span><br><span class="line">xi = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="comment"># yi = [1 for i in range(10)]</span></span><br><span class="line">yi = [<span class="number">0</span>] * <span class="number">10</span></span><br><span class="line">print(yi)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> xi:</span><br><span class="line"> yi[num <span class="number">-1</span>] = num*<span class="number">1.201030944</span> + <span class="number">9.8678999766</span></span><br><span class="line"> </span><br><span class="line">a,b=calcAB(xi,yi)</span><br><span class="line">print(<span class="string">"y = 1.201030944*x + 9.8678999766"</span>, <span class="string">'\n'</span>, <span class="string">"f(x;a,b) = (a)%3.5fx + (b)%3.5f"</span> %(a,b))</span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">y = a * x + b</span><br><span class="line">plt.plot(x,y,<span class="string">'red'</span>, label=<span class="string">'fitting curve'</span>)</span><br><span class="line">plt.scatter(xi,yi, label=<span class="string">'primitive curve'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'right'</span>)</span><br><span class="line">plt.title(<span class="string">'last square method fitting curve'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最小二乘法的线性拟合问题lstsq函数实现</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="comment"># y = [10,11.5,12,13,14.5,15.5,16.8,17.3,18,18.7]</span></span><br><span class="line">y = [<span class="number">0</span>] * <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> x:</span><br><span class="line"> y[num <span class="number">-1</span>] = num*<span class="number">1.201030944</span> + <span class="number">9.8678999766</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A = np.vstack([x,np.ones(len(x))]).T</span><br><span class="line"></span><br><span class="line">a,b = np.linalg.lstsq(A,y, rcond=<span class="number">-1</span>)[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">"1.理想曲线:"</span>,<span class="string">"y = 1.201030944*x + 9.8678999766"</span>)</span><br><span class="line">print(<span class="string">'2.拟合曲线:'</span>, <span class="string">"f(x;a,b) = %10.5fx + %10.5f"</span> %(a,b))</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y,<span class="string">'o'</span>,label=<span class="string">'idea curve'</span>,markersize=<span class="number">10</span>)</span><br><span class="line">plt.plot(x,a*x+b,<span class="string">'r'</span>,label=<span class="string">'fitting curve'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">plt.title(<span class="string">' the least-squares solution to a linear matrix equation.'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> <hr> <p>更多内容见上边的PDF在线预览</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习-深度学习顶级会议罗列</title>
      <link href="//ml&amp;dlcomference/"/>
      <url>//ml&amp;dlcomference/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><center> Porter Pan </center> <h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文主要罗列出，机器学习-深度学习领域比较知名的学术期刊组织，在学习机器学习相关的技术中，可以前往这些个机构，检索最近最新的研究状况，有针对性的就前沿技术进行挖掘性研究，并针对现有问题，做自己独到的方案。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 学海无涯，苦作舟</li> </ul> <a id="more"></a> <h2 id="ICLR"><a href="#ICLR" class="headerlink" title="ICLR"></a>ICLR</h2><h3 id="the-international-conference-on-learning-representations"><a href="#the-international-conference-on-learning-representations" class="headerlink" title="the international conference on learning representations"></a>the international conference on learning representations</h3><p>缩写，由位列深度学习三大巨头之二的 Yoshua Bengio 和 Yann LeCun 牵头创办。</p> <p>The International Conference on Learning Representations (ICLR) is a machine learning conference held every Spring. The conference includes invited talks as well as oral and poster presentations of refereed papers. The first ICLR was held in Scottsdale, Arizona[1]. Since its inception in 2013, ICLR has employed an open peer review process to referee paper submissions (based on models proposed by Yann LeCun[2]). In 2019, there were 1591 paper submissions, of which 500 accepted with poster presentations (31%) and 24 with oral presentations (1.5%) </p> <h2 id="ICML"><a href="#ICML" class="headerlink" title="ICML"></a>ICML</h2><h3 id="是-International-Conference-on-Machine-Learning的缩写"><a href="#是-International-Conference-on-Machine-Learning的缩写" class="headerlink" title="是 International Conference on Machine Learning的缩写"></a>是 International Conference on Machine Learning的缩写</h3><p>即国际机器学习大会。ICML如今已发展为由国际机器学习学会（IMLS）主办的年度机器学习国际顶级会议。</p> <h2 id="NIPS"><a href="#NIPS" class="headerlink" title="NIPS"></a>NIPS</h2><h3 id="Neural-Information-Processing-Systems，神经信息处理系统大会"><a href="#Neural-Information-Processing-Systems，神经信息处理系统大会" class="headerlink" title="Neural Information Processing Systems，神经信息处理系统大会"></a>Neural Information Processing Systems，神经信息处理系统大会</h3><p>是人工智能和机器学习领域最重要的盛会。每年，来自计算机科学领域的各路专家和业界人士都会共聚一堂，共同讨论和分享有关人工智能的前沿想法。而作为大会学术内容最重要的部分，会议论文是众人关注的焦点。</p> <h2 id="AAAI"><a href="#AAAI" class="headerlink" title="AAAI:"></a>AAAI:</h2><h3 id="AI-Conference-on-Artificial-Intelligence"><a href="#AI-Conference-on-Artificial-Intelligence" class="headerlink" title="AI Conference on Artificial Intelligence"></a>AI Conference on Artificial Intelligence</h3><h2 id="IJCAI"><a href="#IJCAI" class="headerlink" title="IJCAI:"></a>IJCAI:</h2><h3 id="International-Joint-Conferences-on-AI"><a href="#International-Joint-Conferences-on-AI" class="headerlink" title="International Joint Conferences on AI"></a>International Joint Conferences on AI</h3><h2 id="ICRA"><a href="#ICRA" class="headerlink" title="ICRA:"></a>ICRA:</h2><h3 id="International-Conference-on-Robotics-and-Automation"><a href="#International-Conference-on-Robotics-and-Automation" class="headerlink" title="International Conference on Robotics and Automation"></a>International Conference on Robotics and Automation</h3><h2 id="IROS"><a href="#IROS" class="headerlink" title="IROS:"></a>IROS:</h2><h3 id="International-Conference-on-Intelligent-Robots-and-Systems"><a href="#International-Conference-on-Intelligent-Robots-and-Systems" class="headerlink" title="International Conference on Intelligent Robots and Systems"></a>International Conference on Intelligent Robots and Systems</h3><h2 id="AAMAS"><a href="#AAMAS" class="headerlink" title="AAMAS:"></a>AAMAS:</h2><h3 id="International-Conference-on-Autonomous-Agents-and-Multiagent-Systems"><a href="#International-Conference-on-Autonomous-Agents-and-Multiagent-Systems" class="headerlink" title="International Conference on Autonomous Agents and Multiagent Systems"></a>International Conference on Autonomous Agents and Multiagent Systems</h3><h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS:"></a>RSS:</h2><h3 id="Robotics-Science-and-Systems"><a href="#Robotics-Science-and-Systems" class="headerlink" title="Robotics: Science and Systems"></a>Robotics: Science and Systems</h3><h2 id="ICCV"><a href="#ICCV" class="headerlink" title="ICCV:"></a>ICCV:</h2><h3 id="International-Conference-on-Computer-Vision"><a href="#International-Conference-on-Computer-Vision" class="headerlink" title="International Conference on Computer Vision"></a>International Conference on Computer Vision</h3><h2 id="CVPR"><a href="#CVPR" class="headerlink" title="CVPR"></a>CVPR</h2><h3 id="Conference-on-Computer-Vision-and-Pattern-Recognition"><a href="#Conference-on-Computer-Vision-and-Pattern-Recognition" class="headerlink" title="Conference on Computer Vision and Pattern Recognition"></a>Conference on Computer Vision and Pattern Recognition</h3><p>CVPR是IEEE Conference on Computer Vision and Pattern Recognition的缩写，即IEEE国际计算机视觉与模式识别会议。该会议是由IEEE举办的计算机视觉和模式识别领域的顶级会议。</p> <ul> <li>简介编辑</li> </ul> <p>国际计算机视觉与模式识别会议（CVPR）是IEEE一年一度的学术性会议，会议的主要内容是计算机视觉与模式识别技术。CVPR是世界顶级的计算机视觉会议（三大顶会之一，另外两个是ICCV和ECCV），近年来每年有约1500名参加者，收录的论文数量一般300篇左右。本会议每年都会有固定的研讨主题，而每一年都会有公司赞助该会议并获得在会场展示的机会。</p> <blockquote> <p>引用来自百度百科</p> </blockquote> <h2 id="ECCV"><a href="#ECCV" class="headerlink" title="ECCV:"></a>ECCV:</h2><h3 id="European-Conference-on-Computer-Vision"><a href="#European-Conference-on-Computer-Vision" class="headerlink" title="European Conference on Computer Vision"></a>European Conference on Computer Vision</h3><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 安利 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.18 ubuntu下安装OpenCV 3.4.3</title>
      <link href="//installopencvs/"/>
      <url>//installopencvs/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h2 id="解决ubuntu-中安装opencv遇到的各种水土不服"><a href="#解决ubuntu-中安装opencv遇到的各种水土不服" class="headerlink" title="解决ubuntu 中安装opencv遇到的各种水土不服"></a>解决ubuntu 中安装opencv遇到的各种水土不服</h2><ul> <li>下载</li> <li>安装</li> </ul> <a id="more"></a> <p>##下载OpenCV 源码</p> <h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff5-dev libdc1394-22-dev </span><br><span class="line">sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev liblapacke-dev</span><br><span class="line">sudo apt-get install libxvidcore-dev libx264-dev </span><br><span class="line">sudo apt-get install libatlas-base-dev gfortran </span><br><span class="line">sudo apt-get install ffmpeg</span><br></pre></td></tr></table></figure> <hr> <p>作者：BlainWu<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/qq_22945165/article/details/84312374" target="_blank" rel="noopener">https://blog.csdn.net/qq_22945165/article/details/84312374</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p> <h3 id="下载、安装"><a href="#下载、安装" class="headerlink" title="下载、安装"></a>下载、安装</h3><p>从第三方源中下载（解决官方github下载网速过慢的问题）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://ftp.osuosl.org/pub/blfs/conglomeration/opencv/opencv-3.4.3.zip</span><br><span class="line"></span><br><span class="line">（https://ftp.osuosl.org/pub/blfs/conglomeration/opencv/opencv_contrib-3.4.3.tar.gz）#目前这个control不用下载，以后需要可以下载安装</span><br></pre></td></tr></table></figure></p> <ul> <li>解压</li> </ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /你的解压路径/opencv/</span><br><span class="line">mkdir ./build</span><br></pre></td></tr></table></figure> <ul> <li>cmake</li> </ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd build</span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br></pre></td></tr></table></figure> <ul> <li>make</li> </ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j4</span><br></pre></td></tr></table></figure> <ul> <li>安装</li> </ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure> <h3 id="编译中会出现的问题"><a href="#编译中会出现的问题" class="headerlink" title="编译中会出现的问题"></a>编译中会出现的问题</h3><ul> <li>ippicv_2017u3_lnx_intel64_general_20180518.tgz下载失败</li> </ul> <p>进入opencv解压的文件路径中 —&gt; 找到你的解压路径/opencv-3.4.3/3rdparty/ippicv/ippicv.cmake的文件。</p> <p>编辑文件：ippicv.cmake</p> <ul> <li>编辑ippicv.cmake内容,替换如下的内容</li> </ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ocv_download(FILENAME $&#123;OPENCV_ICV_NAME&#125;</span><br><span class="line"> HASH $&#123;OPENCV_ICV_HASH&#125;</span><br><span class="line"> URL</span><br><span class="line"> "$&#123;OPENCV_IPPICV_URL&#125;"</span><br><span class="line"> "$ENV&#123;OPENCV_IPPICV_URL&#125;"</span><br><span class="line"> "file:///home/blain/Downloads/"#</span><br></pre></td></tr></table></figure> <blockquote> <p>“file:///home/blain/Downloads/“# 这个为你手动下载的文件所在的路径</p> </blockquote> <p>需手动下载的包的地址如下，自己手动下载，建议存放在opencv解压后的文件夹中方便管理<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ftp.osuosl.org/pub/blfs/conglomeration/opencv/ippicv_2017u3_lnx_intel64_general_20180518.tgz</span><br></pre></td></tr></table></figure></p> <p>我的下载存放地址就是 home/blain/Downloads 。</p> <p>修改完成，重新cmake 即可</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.19 gym_gazabe安装配置</title>
      <link href="//gymGazabeInstall/"/>
      <url>//gymGazabeInstall/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文主要记录gym_gazebo安装的过程，想想每次安装都要一堆的百度，过程很痛苦，所以直接记录下我成功安装的过程，方便后面安装的参考。</p> <p>具体内容如下：<br><!-- TOC --></p> <ul> <li><a href="#摘要">摘要</a><ul> <li><a href="#解决ubuntu-中安装-gym_gazabe-遇到的各种水土不服">解决ubuntu 中安装 gym_gazabe 遇到的各种水土不服</a><ul> <li><a href="#basic-requirements">Basic requirements:</a></li> <li><a href="#ros-kinetic-dependencies">ROS Kinetic dependencies</a></li> <li><a href="#install-sophus">Install Sophus</a></li> <li><a href="#gazebo-gym">Gazebo gym</a></li> <li><a href="#dependencies-and-libraries">Dependencies and libraries</a></li> <li><a href="#font-color--redagent-dependencies-font"><font color="red">Agent dependencies </font></a></li> <li><a href="#run-the-environment-with-a-sample-agent">Run the environment with a sample agent</a></li> </ul> </li> </ul> </li> </ul> <!-- /TOC --> <a id="more"></a> <h2 id="解决ubuntu-中安装-gym-gazabe-遇到的各种水土不服"><a href="#解决ubuntu-中安装-gym-gazabe-遇到的各种水土不服" class="headerlink" title="解决ubuntu 中安装 gym_gazabe 遇到的各种水土不服"></a>解决ubuntu 中安装 gym_gazabe 遇到的各种水土不服</h2><h3 id="Basic-requirements"><a href="#Basic-requirements" class="headerlink" title="Basic requirements:"></a>Basic requirements:</h3><ul> <li>ROS Kinetic (/rosversion: 1.12.7)</li> <li><font color="red">Gazebo 8.1.1 </font></li> <li>Python 3.5.2</li> <li>OpenCV3, installed from sources for Python 3 (git clone <a href="https://github.com/Itseez/opencv.git" target="_blank" rel="noopener">https://github.com/Itseez/opencv.git</a>)</li> <li>OpenAI gym</li> </ul> <blockquote> <p>这部分的安装请自行百度, 但是这部分的内容也要安装上，不然安装gym_gazebo会出错的。</p> </blockquote> <h3 id="ROS-Kinetic-dependencies"><a href="#ROS-Kinetic-dependencies" class="headerlink" title="ROS Kinetic dependencies"></a>ROS Kinetic dependencies</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install rospkg catkin_pkg</span><br><span class="line"></span><br><span class="line">sudo apt-get install python3-pyqt4</span><br><span class="line"></span><br><span class="line">sudo apt-get install \</span><br><span class="line">cmake gcc g++ qt4-qmake libqt4-dev \</span><br><span class="line">libusb-dev libftdi-dev \</span><br><span class="line">python3-defusedxml python3-vcstool \</span><br><span class="line">libbluetooth-dev libspnav-dev \</span><br><span class="line">pyqt4-dev-tools libcwiid-dev \</span><br><span class="line">ros-kinetic-octomap-msgs \</span><br><span class="line">ros-kinetic-joy \</span><br><span class="line">ros-kinetic-geodesy \</span><br><span class="line">ros-kinetic-octomap-ros \</span><br><span class="line">ros-kinetic-control-toolbox \</span><br><span class="line">ros-kinetic-pluginlib \</span><br><span class="line">ros-kinetic-trajectory-msgs \</span><br><span class="line">ros-kinetic-control-msgs \</span><br><span class="line">ros-kinetic-std-srvs \</span><br><span class="line">ros-kinetic-nodelet \</span><br><span class="line">ros-kinetic-urdf \</span><br><span class="line">ros-kinetic-rviz \</span><br><span class="line">ros-kinetic-kdl-conversions \</span><br><span class="line">ros-kinetic-eigen-conversions \</span><br><span class="line">ros-kinetic-tf2-sensor-msgs \</span><br><span class="line">ros-kinetic-pcl-ros \</span><br><span class="line">ros-kinetic-navigation \</span><br><span class="line">ros-kinetic-ar-track-alvar-msgs</span><br></pre></td></tr></table></figure> <h3 id="Install-Sophus"><a href="#Install-Sophus" class="headerlink" title="Install Sophus"></a>Install Sophus</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd</span><br><span class="line">git clone https://github.com/stonier/sophus -b release/0.9.1-kinetic</span><br><span class="line">cd sophus</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">echo "## Sophus installed ##\n"</span><br></pre></td></tr></table></figure> <h3 id="Gazebo-gym"><a href="#Gazebo-gym" class="headerlink" title="Gazebo gym"></a>Gazebo gym</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/erlerobot/gym-gazebo</span><br><span class="line"><span class="built_in">cd</span> gym-gazebo</span><br><span class="line">sudo pip3 install -e .</span><br></pre></td></tr></table></figure> <h3 id="Dependencies-and-libraries"><a href="#Dependencies-and-libraries" class="headerlink" title="Dependencies and libraries"></a>Dependencies and libraries</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install h5py</span><br><span class="line">sudo apt-get install python3-skimage</span><br><span class="line"></span><br><span class="line"><span class="comment"># install Theano</span></span><br><span class="line"><span class="built_in">cd</span> ~/</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/Theano/Theano.git</span><br><span class="line"><span class="built_in">cd</span> Theano/</span><br><span class="line">sudo python3 setup.py develop</span><br><span class="line"></span><br><span class="line"><span class="comment">#install Keras</span></span><br><span class="line">sudo pip3 install keras</span><br></pre></td></tr></table></figure> <h3 id="Agent-dependencies"><a href="#Agent-dependencies" class="headerlink" title="Agent dependencies "></a><font color="red">Agent dependencies </font></h3><p>这部分的安装可以参考我的github 仓库(gazebo.repos 已经修改过,并且在ubuntu16上正确编译安装通过，可以直接clone下来安装,我只修改了gazebo.repos,设置/usr/local/python3.5环境):<a href=""></a></p> <font color="blue"> 这部分的安装需要注意请尽量用”/usr/local/bin/python3.5”如果用anaconda的python环境下安装，会出现Cmake 报错,如果你有解决的办法可以忽略提示</font> <blockquote> <p>切换python 环境，只需要执行如下命令：</p> </blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment"># 修改弹出的文本，将export anaconda这行注释掉，如下所示</span></span><br><span class="line"><span class="comment"># added by Anaconda3 4.2.0 installer</span></span><br><span class="line"><span class="comment">#export PATH="/home/porter/anaconda3/bin:$PATH"</span></span><br></pre></td></tr></table></figure> <p>效果如下：</p> <p><img src="/image1/rose_install_gym_source1.png" alt="从anaconda 切换到系统自带的python3.5"></p> <blockquote> <p>安装前需要配置下Agent 的gazebo.repos<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/gym-gazebo/gym_gazebo/envs/installation/</span><br><span class="line">cp ./gazebo.repos ./gazebo.repos.bak</span><br><span class="line">gedit ~/gym-gazebo/gym_gazebo/envs/installation/gazebo.repos</span><br></pre></td></tr></table></figure></p> </blockquote> <ul> <li>gazebo.repos 内容如下<blockquote> <p>主要修改一些github 仓库对应版本release的分支问题, 解决安装时的错误， 修改后的内容如下：</p> </blockquote> </li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line">repositories:</span><br><span class="line"><span class="comment"># ardupilot_sitl_gazebo_plugin:</span></span><br><span class="line"><span class="comment"># type: git</span></span><br><span class="line"><span class="comment"># url: https://github.com/erlerobot/ardupilot_sitl_gazebo_plugin</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># version: master</span></span><br><span class="line"></span><br><span class="line"> ar_track_alvar:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/ros-perception/ar_track_alvar.git</span><br><span class="line"> version: kinetic-devel</span><br><span class="line"></span><br><span class="line"> mav_comm:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/ethz-asl/mav_comm.git</span><br><span class="line"> version: master</span><br><span class="line"><span class="comment"># ar_track_alvar:</span></span><br><span class="line"><span class="comment"># type: git</span></span><br><span class="line"><span class="comment"># url: https://github.com/sniekum/ar_track_alvar</span></span><br><span class="line"><span class="comment"># version: indigo-devel</span></span><br><span class="line"><span class="comment"># ar_track_alvar_msgs:</span></span><br><span class="line"><span class="comment"># type: git</span></span><br><span class="line"><span class="comment"># url: https://github.com/sniekum/ar_track_alvar_msgs</span></span><br><span class="line"><span class="comment"># version: indigo-devel</span></span><br><span class="line"> catkin_simple:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/catkin/catkin_simple.git</span><br><span class="line"> version: master</span><br><span class="line"> control_toolbox:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/ros-controls/control_toolbox.git</span><br><span class="line"> version: indigo-devel</span><br><span class="line"><span class="comment"># drcsim:</span></span><br><span class="line"><span class="comment"># type: hg</span></span><br><span class="line"><span class="comment"># url: https://bitbucket.org/osrf/drcsim</span></span><br><span class="line"><span class="comment"># version: default</span></span><br><span class="line"> ecl_core:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/stonier/ecl_core</span><br><span class="line"> version: release/0.61-indigo-kinetic</span><br><span class="line"> ecl_lite:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/stonier/ecl_lite</span><br><span class="line"> version: release/0.61-indigo-kinetic</span><br><span class="line"> ecl_navigation:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/stonier/ecl_navigation</span><br><span class="line"> version: devel</span><br><span class="line"> ecl_tools:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/stonier/ecl_tools</span><br><span class="line"> version: release/0.61-indigo-kinetic</span><br><span class="line"> driver_base:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/ros-drivers/driver_common.git</span><br><span class="line"> version: indigo-devel</span><br><span class="line"> gazebo_ros_pkgs:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/ros-simulation/gazebo_ros_pkgs</span><br><span class="line"> version: indigo-devel</span><br><span class="line"><span class="comment"># glog_catkin:</span></span><br><span class="line"><span class="comment"># type: git</span></span><br><span class="line"><span class="comment"># url: https://github.com/ethz-asl/glog_catkin.git</span></span><br><span class="line"><span class="comment"># version: master</span></span><br><span class="line"> hector_gazebo:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/tu-darmstadt-ros-pkg/hector_gazebo/</span><br><span class="line"> version: indigo-devel</span><br><span class="line"> image_common:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/ros-perception/image_common.git</span><br><span class="line"> version: hydro-devel</span><br><span class="line"> joystick_drivers:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/ros-drivers/joystick_drivers.git</span><br><span class="line"> version: master</span><br><span class="line"> kobuki:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/yujinrobot/kobuki</span><br><span class="line"> version: indigo</span><br><span class="line"> kobuki_core:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/yujinrobot/kobuki_core</span><br><span class="line"> version: indigo</span><br><span class="line"> kobuki_desktop:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/erlerobot/kobuki_desktop</span><br><span class="line"> version: indigo</span><br><span class="line"> kobuki_msgs:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/yujinrobot/kobuki_msgs</span><br><span class="line"> version: indigo</span><br><span class="line"><span class="comment"># mavros:</span></span><br><span class="line"><span class="comment"># type: git</span></span><br><span class="line"><span class="comment"># url: https://github.com/erlerobot/mavros.git</span></span><br><span class="line"><span class="comment"># version: gazebo_udp</span></span><br><span class="line"><span class="comment"># mav_comm:</span></span><br><span class="line"><span class="comment"># type: git</span></span><br><span class="line"><span class="comment"># url: https://github.com/PX4/mav_comm.git</span></span><br><span class="line"><span class="comment"># version: master</span></span><br><span class="line"> navigation:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/ros-planning/navigation</span><br><span class="line"> version: indigo-devel</span><br><span class="line"><span class="comment"># osrf-common:</span></span><br><span class="line"><span class="comment"># type: hg</span></span><br><span class="line"><span class="comment"># url: https://bitbucket.org/osrf/osrf-common</span></span><br><span class="line"><span class="comment"># version: default</span></span><br><span class="line"> pcl_ros:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/ros-perception/perception_pcl.git</span><br><span class="line"> version: indigo-devel</span><br><span class="line"><span class="comment"># python_qt_binding:</span></span><br><span class="line"><span class="comment"># type: git</span></span><br><span class="line"><span class="comment"># url: https://github.com/ros-visualization/python_qt_binding</span></span><br><span class="line"><span class="comment"># version: kinetic-devel</span></span><br><span class="line"><span class="comment"># qt_gui_core:</span></span><br><span class="line"><span class="comment"># type: git</span></span><br><span class="line"><span class="comment"># url: https://github.com/ros-visualization/qt_gui_core</span></span><br><span class="line"><span class="comment"># version: groovy-devel</span></span><br><span class="line"> realtime_tools:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/ros-controls/realtime_tools</span><br><span class="line"> version: indigo-devel</span><br><span class="line"> ros_control:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/ros-controls/ros_control</span><br><span class="line"> version: indigo-devel</span><br><span class="line"> roslint:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/ros/roslint</span><br><span class="line"> version: master</span><br><span class="line"><span class="comment"># rqt:</span></span><br><span class="line"><span class="comment"># type: git</span></span><br><span class="line"><span class="comment"># url: https://github.com/ros-visualization/rqt</span></span><br><span class="line"><span class="comment"># version: groovy-devel</span></span><br><span class="line"><span class="comment"># rqt_common_plugins:</span></span><br><span class="line"><span class="comment"># type: git</span></span><br><span class="line"><span class="comment"># url: https://github.com/ros-visualization/rqt_common_plugins</span></span><br><span class="line"><span class="comment"># version: master</span></span><br><span class="line"><span class="comment"># rqt_robot_plugins:</span></span><br><span class="line"><span class="comment"># type: git</span></span><br><span class="line"><span class="comment"># url: https://github.com/ros-visualization/rqt_robot_plugins</span></span><br><span class="line"><span class="comment"># version: master</span></span><br><span class="line"> turtlebot:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/turtlebot/turtlebot</span><br><span class="line"> version: indigo</span><br><span class="line"> turtlebot_create:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/turtlebot/turtlebot_create</span><br><span class="line"> version: indigo</span><br><span class="line"> turtlebot_simulator:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/turtlebot/turtlebot_simulator</span><br><span class="line"> version: indigo</span><br><span class="line"> xacro:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/ros/xacro</span><br><span class="line"> version: indigo-devel</span><br><span class="line"> yocs_msgs:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/yujinrobot/yocs_msgs</span><br><span class="line"> version: release/0.6-kinetic</span><br><span class="line"> yujin_ocs:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> url: https://github.com/yujinrobot/yujin_ocs</span><br><span class="line"> version: kinetic</span><br></pre></td></tr></table></figure> <blockquote> <p>具体的修改地方建议，通过code compare 工具查看，这里推荐一个好用而代码比较工具：Meld Diff 比较好用。</p> </blockquote> <ul> <li>接下来执行如下Agent dependences</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> gym_gazebo/envs/installation</span><br><span class="line">bash setup_kinetic.bash</span><br></pre></td></tr></table></figure> <p><img src="/image1/rose_install_gym_gazebo1.png" alt="gym_gazebo 正确安装过程"></p> <h3 id="Run-the-environment-with-a-sample-agent"><a href="#Run-the-environment-with-a-sample-agent" class="headerlink" title="Run the environment with a sample agent"></a>Run the environment with a sample agent</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> gym_gazebo/examples/scripts_turtlebot</span><br><span class="line">python circuit2_turtlebot_lidar_qlearn.py</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gym_gazabe </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.18 ubuntu下安装OpenCV 3.4.3</title>
      <link href="//installopencv/"/>
      <url>//installopencv/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h2 id="解决ubuntu-中安装opencv遇到的各种水土不服"><a href="#解决ubuntu-中安装opencv遇到的各种水土不服" class="headerlink" title="解决ubuntu 中安装opencv遇到的各种水土不服"></a>解决ubuntu 中安装opencv遇到的各种水土不服</h2><ul> <li>下载</li> <li>安装</li> </ul> <a id="more"></a> <p>##下载OpenCV 源码</p> <h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff5-dev libdc1394-22-dev </span><br><span class="line">sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev liblapacke-dev</span><br><span class="line">sudo apt-get install libxvidcore-dev libx264-dev </span><br><span class="line">sudo apt-get install libatlas-base-dev gfortran </span><br><span class="line">sudo apt-get install ffmpeg</span><br></pre></td></tr></table></figure> <hr> <p>作者：BlainWu<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/qq_22945165/article/details/84312374" target="_blank" rel="noopener">https://blog.csdn.net/qq_22945165/article/details/84312374</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p> <h3 id="下载、安装"><a href="#下载、安装" class="headerlink" title="下载、安装"></a>下载、安装</h3><p>从第三方源中下载（解决官方github下载网速过慢的问题）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://ftp.osuosl.org/pub/blfs/conglomeration/opencv/opencv-3.4.3.zip</span><br><span class="line"></span><br><span class="line">（https://ftp.osuosl.org/pub/blfs/conglomeration/opencv/opencv_contrib-3.4.3.tar.gz）#目前这个control不用下载，以后需要可以下载安装</span><br></pre></td></tr></table></figure></p> <ul> <li>解压</li> </ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /你的解压路径/opencv/</span><br><span class="line">mkdir ./build</span><br></pre></td></tr></table></figure> <ul> <li><p>cmake</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd build</span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br></pre></td></tr></table></figure> </li> <li><p>make</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j4</span><br></pre></td></tr></table></figure> </li> <li><p>安装</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure> </li> </ul> <h3 id="编译中会出现的问题"><a href="#编译中会出现的问题" class="headerlink" title="编译中会出现的问题"></a>编译中会出现的问题</h3><ul> <li>ippicv_2017u3_lnx_intel64_general_20180518.tgz下载失败</li> </ul> <p>进入opencv解压的文件路径中 —&gt; 找到你的解压路径/opencv-3.4.3/3rdparty/ippicv/ippicv.cmake的文件。</p> <p>编辑文件：ippicv.cmake</p> <ul> <li>编辑ippicv.cmake内容,替换如下的内容</li> </ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ocv_download(FILENAME $&#123;OPENCV_ICV_NAME&#125;</span><br><span class="line"> HASH $&#123;OPENCV_ICV_HASH&#125;</span><br><span class="line"> URL</span><br><span class="line"> "$&#123;OPENCV_IPPICV_URL&#125;"</span><br><span class="line"> "$ENV&#123;OPENCV_IPPICV_URL&#125;"</span><br><span class="line"> "file:///home/blain/Downloads/"#</span><br></pre></td></tr></table></figure> <blockquote> <p>“file:///home/blain/Downloads/“# 这个为你手动下载的文件所在的路径</p> </blockquote> <p>需手动下载的包的地址如下，自己手动下载，建议存放在opencv解压后的文件夹中方便管理<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ftp.osuosl.org/pub/blfs/conglomeration/opencv/ippicv_2017u3_lnx_intel64_general_20180518.tgz</span><br></pre></td></tr></table></figure></p> <p>我的下载存放地址就是 home/blain/Downloads 。</p> <p>修改完成，重新cmake 即可</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于DQN的gym_gazebo运行代码演示</title>
      <link href="//DQNgym/"/>
      <url>//DQNgym/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h2 id="基于DQN的gym-gazebo运行代码演示"><a href="#基于DQN的gym-gazebo运行代码演示" class="headerlink" title="基于DQN的gym_gazebo运行代码演示"></a>基于DQN的gym_gazebo运行代码演示</h2><!-- TOC --> <ul> <li><a href="#基于dqn的gym_gazebo运行代码演示">基于DQN的gym_gazebo运行代码演示</a></li> <li><a href="#下载算法包">下载算法包</a></li> <li><a href="#运行脚本">运行脚本</a></li> <li><a href="#终端效果">终端效果</a></li> <li><a href="#export　端口环境添加">export　端口环境添加</a></li> <li><a href="#运行ｇｕｉ效果">运行ＧＵＩ效果</a></li> </ul> <!-- /TOC --> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。 </li> </ul> <a id="more"></a> <h2 id="下载算法包"><a href="#下载算法包" class="headerlink" title="下载算法包"></a>下载算法包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ipa-bfb-sc/CSN-RL</span><br><span class="line"><span class="built_in">cd</span> ./CSN-RL</span><br></pre></td></tr></table></figure> <h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/文档/GitHub_Projects/CSN-RLqqq/DQN</span><br><span class="line">python3 ./DQN_CirTurtleBot.py</span><br></pre></td></tr></table></figure> <p>##　终端效果</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">porter@porter-Aspire:~/文档/GitHub_Projects/CSN-RLqqq/DQN$ python3 ./DQN_C</span><br><span class="line">DQN_CartPole.py DQN_CirTurtleBot.py </span><br><span class="line">porter@porter-Aspire:~/文档/GitHub_Projects/CSN-RLqqq/DQN$ python3 ./DQN_CirTurtleBot.py </span><br><span class="line">Using TensorFlow backend.</span><br><span class="line">ROS_MASTER_URI=http://localhost:12935</span><br><span class="line"></span><br><span class="line">GAZEBO_MASTER_URI=http://localhost:12936</span><br><span class="line"></span><br><span class="line">Gazebo launched!</span><br><span class="line">Unable to register with master node [http://localhost:12935]: master may not be running yet. Will keep trying.</span><br><span class="line">... logging to /home/porter/.ros/<span class="built_in">log</span>/9b695694-7000-11e9-a24a-f0761cd1b3e0/roslaunch-porter-Aspire-32299.log</span><br><span class="line">Checking <span class="built_in">log</span> directory <span class="keyword">for</span> disk usage. This may take awhile.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking <span class="built_in">log</span> file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">started roslaunch server http://porter-Aspire:36739/</span><br><span class="line"></span><br><span class="line">SUMMARY</span><br><span class="line">========</span><br></pre></td></tr></table></figure> <p><img src="/image4/CSN_RL_DQN_run.png" alt="CSN_RL_DQN_run"></p> <h2 id="export-端口环境添加"><a href="#export-端口环境添加" class="headerlink" title="export　端口环境添加"></a>export　端口环境添加</h2><p>此时不会出gazebo，要查看实时的效果，运行如下命令</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">porter@porter-Aspire:~$ <span class="built_in">export</span> ROS_MASTER_URI=http://localhost:12935</span><br><span class="line">porter@porter-Aspire:~$ <span class="built_in">export</span> GAZEBO_MASTER_URI=http://localhost:12936</span><br><span class="line">porter@porter-Aspire:~$ gzclient</span><br></pre></td></tr></table></figure> <p><img src="/image4/CSN_RL_DQN_export.png" alt="CSN_RL_DQN_export"></p> <p>如果不成功，执行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">porter@porter-Aspire:~$ <span class="built_in">cd</span> /home/porter/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/devel</span><br><span class="line">porter@porter-Aspire:~/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/devel$ <span class="built_in">source</span> setup.bash</span><br><span class="line">porter@porter-Aspire:~$ <span class="built_in">export</span> ROS_MASTER_URI=http://localhost:12935</span><br><span class="line">porter@porter-Aspire:~$ <span class="built_in">export</span> GAZEBO_MASTER_URI=http://localhost:12936</span><br><span class="line">porter@porter-Aspire:~$ gzclient</span><br></pre></td></tr></table></figure> <h2 id="运行GUI效果"><a href="#运行GUI效果" class="headerlink" title="运行ＧＵＩ效果"></a>运行ＧＵＩ效果</h2><p><img src="/image4/CSN_RL_DQN.gif" alt="CSN_RL_DQN_CirTurtleBot"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> gym-gazebo </tag>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu16 安装gym-gazebo</title>
      <link href="//ubuntuinstallGym/"/>
      <url>//ubuntuinstallGym/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>本节会安装以下内容</p> <ul> <li>Kinetic </li> <li>ubuntu16</li> <li>gazebo8</li> <li>gym</li> <li>python3.5</li> <li>opencv3</li> <li>安装 gazebo_ros_pkgs</li> <li>gym-gazebo</li> <li>gym-gazebo 测试</li> </ul> <p>本节笔记主要记录ubuntu16 下安装gym-gazebo，包括其依赖的软件包安装。</p> <p>我的代码仓库: <a href="https://github.com/porterpan/gym-gazebo" target="_blank" rel="noopener">https://github.com/porterpan/gym-gazebo</a></p> <p>建议直接clone 我的软件仓库安装(直接适应kinetic版本安装不会出现警告和编译出错终止，当然可能会应为你的ros功能包缺失出错,这时只需要手动安装缺失的ros功能包，删除catkin_ws，再重复上次的安装过程即可)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/porterpan/gym-gazebo</span><br></pre></td></tr></table></figure> <blockquote> <p>实在官方的仓库中修改了: ~/gym-gazebo/gym_gazebo/envs/installation/gazebo.repos 文件内容.使整个安装适应ROS kinetic 环境。当然过程中如果缺ros功能包，需要自己额外安装功能包的。</p> </blockquote> <blockquote> <p>缺失ros功能包会在编译时出现make error 红色的， 解决办法见<a href="#ros-中功能包的安装与查询">ROS 中功能包的安装与查询</a> 部分的方法安装好，然后remove -rf 安装路径中的catkin_ws 文件夹，然后重新上一步操作安装即可。</p> </blockquote> <!-- TOC --> <ul> <li><a href="#目录">目录</a></li> <li><a href="#第一部分安装gym-gazebo">第一部分安装gym-gazebo</a><ul> <li><a href="#下载安装文件">下载安装文件</a></li> <li><a href="#安装依赖环境">安装依赖环境</a><ul> <li><a href="#basic-requirements">Basic requirements:</a></li> <li><a href="#install-sophushttpsgithubcomstoniersophustreerelease091-kinetic"><a href="https://github.com/stonier/sophus/tree/release/0.9.1-kinetic" target="_blank" rel="noopener">Install Sophus</a></a></li> </ul> </li> <li><a href="#安装gym-gazebo">安装gym-gazebo</a><ul> <li><a href="#dependencies-and-libraries">Dependencies and libraries</a></li> <li><a href="#install-theano">install Theano</a></li> <li><a href="#install-keras">install Keras</a></li> </ul> </li> <li><a href="#try-it-out-turtlebot-simple-env">Try it out (turtlebot simple env)</a><ul> <li><a href="#agent-dependencies">Agent dependencies:</a></li> </ul> </li> <li><a href="#run-the-environment-with-a-sample-agent">Run the environment with a sample agent:</a></li> </ul> </li> <li><a href="#第二部分附录">第二部分：附录</a><ul> <li><a href="#ros-中功能包的安装与查询">ROS 中功能包的安装与查询</a><ul> <li><a href="#1查询当前安装完成的所有包文件">1.查询当前安装完成的所有包文件</a></li> <li><a href="#2查询ros的所有功能包">2.查询ros的所有功能包</a></li> </ul> </li> <li><a href="#安装错误解决">安装错误解决</a><ul> <li><a href="#错误1">错误1：</a></li> <li><a href="#问题2">问题2</a></li> <li><a href="#问题3">问题3：</a></li> </ul> </li> </ul> </li> <li><a href="#gazeborepos　内容修改">gazebo.repos　内容修改</a></li> <li><a href="#安装结束效果">安装结束效果</a><pre><code>- [问题4：](#问题4) - [问题5：](#问题5) </code></pre></li> <li><a href="#gym-gazebo-测试">gym-gazebo 测试</a></li> </ul> <!-- /TOC --> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。 </li> </ul> <a id="more"></a> <h2 id="第一部分安装gym-gazebo"><a href="#第一部分安装gym-gazebo" class="headerlink" title="第一部分安装gym-gazebo"></a>第一部分安装gym-gazebo</h2><h3 id="下载安装文件"><a href="#下载安装文件" class="headerlink" title="下载安装文件"></a>下载安装文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ <span class="comment">#进入home目录</span></span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/porterpan/gym-gazebo</span><br></pre></td></tr></table></figure> <h3 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h3><h4 id="Basic-requirements"><a href="#Basic-requirements" class="headerlink" title="Basic requirements:"></a>Basic requirements:</h4><ul> <li><a href="http://wiki.ros.org/kinetic/Installation/Ubuntu#Installation-1" target="_blank" rel="noopener">ROS Kinetic</a> (/rosversion: 1.12.7) (安装选择这个sudo apt-get install ros-kinetic-desktop, 不要全装不然后面装gazebo8会相对麻烦点)</li> </ul> <hr> <blockquote> <p>进入ROS官网的安装界面：<a href="http://wiki.ros.org/ROS/Installation" target="_blank" rel="noopener">http://wiki.ros.org/ROS/Installation</a></p> </blockquote> <blockquote> <p>选择需要的版本 Kinetic 和系统平台，我们用的是 ubuntu 16.04<br>按照指导进行安装，这里注意要选择安装 ros-kinetic-desktop 版本，不要选 ros-kinetic-desktop-full，前者不包含 Gazebo ，后者包含了 Gazebo 7。后边安装 Gazebo 8 的时候还需要卸载掉，比较麻烦。<br>按照完 ROS 测试一下，在命令行中输入如下命令，看能否正常启动 ros master ：</p> </blockquote> <blockquote> <p>作者：isl_qdu<br>链接：<a href="https://www.jianshu.com/p/2b4c68b9caaf" target="_blank" rel="noopener">https://www.jianshu.com/p/2b4c68b9caaf</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p> </blockquote> <hr> <ul> <li><a href="http://gazebosim.org/tutorials?cat=install&amp;tut=install_ubuntu&amp;ver=8.0" target="_blank" rel="noopener">Gazebo 8.1.1</a> , 进入选择手动安装，不要选择Default installation: one-liner安装方式，否则会给你安装默认最新版本的gazebo.</li> <li>Python 3.5.2 (# I have yet to find out why though, because all the standard ROS stuff is in Python 2)</li> </ul> <hr> <ul> <li><a href="https://pypi.org/project/opencv-python/3.4.3.18/#history" target="_blank" rel="noopener">OpenCV3, installed from sources for Python 3， pip3</a> 或者手动安装(git clone <a href="https://github.com/Itseez/opencv.git" target="_blank" rel="noopener">https://github.com/Itseez/opencv.git</a>)</li> </ul> <hr> <ul> <li>安装 gazebo_ros_pkgs</li> </ul> <hr> <blockquote> <p>前边安装的 ROS 与 Gazebo 是完全独立的两部分，要使他们之间互相通讯，还需要安装 gazebo_ros_pkgs 包。</p> </blockquote> <blockquote> <p>进入官网安装界面：<a href="http://gazebosim.org/tutorials?tut=ros_installing" target="_blank" rel="noopener">http://gazebosim.org/tutorials?tut=ros_installing</a></p> </blockquote> <blockquote> <p>按照指导安装即可。我一般选择用 A: Install Pre-Built Debians 方式安装。需要注意的是，如果用如下命令安装报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-gazebo-ros-pkgs ros-kinetic-gazebo-ros-control</span><br></pre></td></tr></table></figure></p> </blockquote> <p>则需要指明 Gazebo 版本，将命令改为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-gazebo8-ros-pkgs ros-kinetic-gazebo8-ros-control</span><br></pre></td></tr></table></figure></p> <p>就可以解决问题。</p> <p>测试。安装结束，用如下命令测试：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roscore <span class="comment"># 启动 ros master</span></span><br><span class="line">rosrun gazebo_ros gazebo <span class="comment"># 用 rosrun 方式启动 Gazebo</span></span><br></pre></td></tr></table></figure></p> <blockquote> <p>作者：isl_qdu<br>链接：<a href="https://www.jianshu.com/p/2b4c68b9caaf" target="_blank" rel="noopener">https://www.jianshu.com/p/2b4c68b9caaf</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p> </blockquote> <hr> <ul> <li><a href="http://gym.openai.com/docs/" target="_blank" rel="noopener">OpenAI gym安装</a></li> </ul> <hr> <h4 id="Install-Sophus"><a href="#Install-Sophus" class="headerlink" title="Install Sophus"></a><a href="https://github.com/stonier/sophus/tree/release/0.9.1-kinetic" target="_blank" rel="noopener">Install Sophus</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/stonier/sophus -b release/0.9.1-kinetic</span><br><span class="line"><span class="built_in">cd</span> sophus</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"## Sophus installed ##\n"</span></span><br></pre></td></tr></table></figure> <hr> <h3 id="安装gym-gazebo"><a href="#安装gym-gazebo" class="headerlink" title="安装gym-gazebo"></a>安装gym-gazebo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">Gazebo gym</span><br><span class="line">git <span class="built_in">clone</span> -b master https://github.com/erlerobot/gym-gazebo</span><br><span class="line"><span class="built_in">cd</span> gym-gazebo</span><br><span class="line">sudo pip2 install -e .</span><br></pre></td></tr></table></figure> <h4 id="Dependencies-and-libraries"><a href="#Dependencies-and-libraries" class="headerlink" title="Dependencies and libraries"></a>Dependencies and libraries</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install h5py</span><br><span class="line">sudo apt-get install python3-skimage</span><br></pre></td></tr></table></figure> <h4 id="install-Theano"><a href="#install-Theano" class="headerlink" title="install Theano"></a>install Theano</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/Theano/Theano.git</span><br><span class="line"><span class="built_in">cd</span> Theano/</span><br><span class="line">sudo python3 setup.py develop</span><br></pre></td></tr></table></figure> <h4 id="install-Keras"><a href="#install-Keras" class="headerlink" title="install Keras"></a>install Keras</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install keras</span><br></pre></td></tr></table></figure> <h3 id="Try-it-out-turtlebot-simple-env"><a href="#Try-it-out-turtlebot-simple-env" class="headerlink" title="Try it out (turtlebot simple env)"></a>Try it out (turtlebot simple env)</h3><ul> <li>Issues:</li> </ul> <blockquote> <p>spacenav_node not compiling. CATKIN_IGNOREd.<br>wiimote not compiling. CATKIN_IGNOREd.<br>kobuki_qtestsuite not compiling. CATKIN_IGNOREd.</p> </blockquote> <h4 id="Agent-dependencies"><a href="#Agent-dependencies" class="headerlink" title="Agent dependencies:"></a>Agent dependencies:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># make sure to switch to bash, because the installation script </span></span><br><span class="line"><span class="comment"># hasn't been converted to ZSH yet</span></span><br><span class="line"><span class="comment"># and if you run it from ZSH the environmental variables </span></span><br><span class="line"><span class="comment"># that are set during the script's execution aren't preserved</span></span><br><span class="line"><span class="built_in">cd</span> gym_gazebo/envs/installation</span><br><span class="line">./setup_kinetic.bash</span><br><span class="line">./turtlebot_setup.bash</span><br></pre></td></tr></table></figure> <h3 id="Run-the-environment-with-a-sample-agent"><a href="#Run-the-environment-with-a-sample-agent" class="headerlink" title="Run the environment with a sample agent:"></a>Run the environment with a sample agent:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># only execute this while still in the same bash as last step</span></span><br><span class="line"><span class="built_in">cd</span> ../../../examples/scripts_turtlebot/</span><br><span class="line">python circuit2_turtlebot_lidar_qlearn.py</span><br></pre></td></tr></table></figure> <p>The result should look like this (after a few seconds):</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">... (messages about ROS and Gazebo starting up, until finally:) ...</span><br><span class="line">[ INFO] [1508869124.880487247, 81.480000000]: GazeboRosKobuki plugin ready to go! [mobile_base]</span><br><span class="line">EP: 1 - [alpha: 0.2 - gamma: 0.8 - epsilon: 0.9] - Reward: -87 Time: 0:00:05</span><br><span class="line">EP: 2 - [alpha: 0.2 - gamma: 0.8 - epsilon: 0.9] - Reward: -155 Time: 0:00:05</span><br><span class="line">EP: 3 - [alpha: 0.2 - gamma: 0.8 - epsilon: 0.9] - Reward: -165 Time: 0:00:05</span><br><span class="line">EP: 4 - [alpha: 0.2 - gamma: 0.8 - epsilon: 0.89] - Reward: -156 Time: 0:00:06</span><br><span class="line">EP: 5 - [alpha: 0.2 - gamma: 0.8 - epsilon: 0.89] - Reward: -162 Time: 0:00:06</span><br><span class="line">EP: 6 - [alpha: 0.2 - gamma: 0.8 - epsilon: 0.89] - Reward: -161 Time: 0:00:07</span><br><span class="line">EP: 7 - [alpha: 0.2 - gamma: 0.8 - epsilon: 0.89] - Reward: -167 Time: 0:00:07</span><br><span class="line">EP: 8 - [alpha: 0.2 - gamma: 0.8 - epsilon: 0.89] - Reward: -166 Time: 0:00:08</span><br><span class="line">EP: 9 - [alpha: 0.2 - gamma: 0.8 - epsilon: 0.89] - Reward: -154 Time: 0:00:08</span><br><span class="line">EP: 10 - [alpha: 0.2 - gamma: 0.8 - epsilon: 0.89] - Reward: -157 Time: 0:00:09</span><br></pre></td></tr></table></figure> <h2 id="第二部分：附录"><a href="#第二部分：附录" class="headerlink" title="第二部分：附录"></a>第二部分：附录</h2><h3 id="ROS-中功能包的安装与查询"><a href="#ROS-中功能包的安装与查询" class="headerlink" title="ROS 中功能包的安装与查询"></a>ROS 中功能包的安装与查询</h3><h4 id="1-查询当前安装完成的所有包文件"><a href="#1-查询当前安装完成的所有包文件" class="headerlink" title="1.查询当前安装完成的所有包文件"></a>1.查询当前安装完成的所有包文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rospack list</span><br></pre></td></tr></table></figure> <ul> <li>可以看到所有的ROS功能包都在/opt/ros/kinetic/share目录下，所以也可以使用如下命令查询<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/ros/kinetic/share/</span><br><span class="line">or</span><br><span class="line">roscd turtlesim/</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure> </li> </ul> <h4 id="2-查询ros的所有功能包"><a href="#2-查询ros的所有功能包" class="headerlink" title="2.查询ros的所有功能包"></a>2.查询ros的所有功能包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache search ros-kinetic</span><br></pre></td></tr></table></figure> <ul> <li>或者说在不知道要安装功能包的确切名字的情况下找到目标包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache search ros-kinetic | grep rqt-</span><br></pre></td></tr></table></figure> </li> </ul> <blockquote> <p>通过管道线 与grep命令， 输出与关键字rqt-相关的行</p> </blockquote> <ul> <li>再或者下述安装命令与Tab键结合<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-rqt-</span><br></pre></td></tr></table></figure> </li> </ul> <blockquote> <p>系统输出相应提示。<br>前述所有内容中，rospack list 与sudo apt-get install ros-kinetic-rqt- +Tab键使用最方便。</p> </blockquote> <hr> <h3 id="安装错误解决"><a href="#安装错误解决" class="headerlink" title="安装错误解决"></a>安装错误解决</h3><h4 id="错误1："><a href="#错误1：" class="headerlink" title="错误1："></a>错误1：</h4><ul> <li>错误1：错误提示：<blockquote> <p>在moveit编译时找不到manipulation_msgsConfig.cmake manipulation_msgs-config.cmake文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Could not find the required component <span class="string">'manipulation_msgs'</span>. The following CMake error indicates that you either need to install the package with the same name or change your environment so that it can be found.</span><br><span class="line">CMake Error at /opt/ros/kinetic/share/catkin/cmake/catkinConfig.cmake:83 (find_package):</span><br><span class="line"> Could not find a package configuration file provided by <span class="string">"manipulation_msgs"</span></span><br><span class="line"> with any of the following names:</span><br><span class="line"></span><br><span class="line"> manipulation_msgsConfig.cmake</span><br><span class="line"> manipulation_msgs-config.cmake</span><br><span class="line">--------------------- </span><br><span class="line">作者：pd很不专业 </span><br><span class="line">来源：CSDN </span><br><span class="line">原文：https://blog.csdn.net/qq_42145185/article/details/80975975 </span><br><span class="line">版权声明：本文为博主原创文章，转载请附上博文链接！</span><br></pre></td></tr></table></figure> </blockquote> </li> </ul> <p><img src="/image4/manipulation_msgsconfig.cmake" alt="manipulation_msgsconfig.cmake"></p> <ul> <li>错误1：解决：</li> </ul> <p>搜索这个功能包</p> <p><img src="/image4/manipulation_msgsconfig.search.png" alt="manipulation_msgsconfig.search"></p> <p>能找到这个ros-kinetic-manipulation-msgs 包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-kinetic-manipulation-msgs</span><br></pre></td></tr></table></figure></p> <blockquote> <p>对ros安装对应的manipulation_msgsConfig包, 完成安装后重新去编译一下你的moveit包就行了。</p> </blockquote> <p><img src="/image4/manipulation_msgsconfig.installed.png" alt="manipulation_msgsconfig.installed"></p> <hr> <h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><ul> <li>错误二：错误提示：</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" CMake Error at /opt/ros/kinetic/share/catkin/cmake/catkinConfig.cmake:83 (find_package): Could not find a package configuration file provided by "</span>tf2_geometry_msgs<span class="string">" with any of the following names:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tf2_geometry_msgsConfig.cmake</span></span><br><span class="line"><span class="string">tf2_geometry_msgs-config.cmake</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Add the installation prefix of "</span>tf2_geometry_msgs<span class="string">" to CMAKE_PREFIX_PATH or set "</span>tf2_geometry_msgs_DIR<span class="string">" to a directory containing one of the above files. If "</span>tf2_geometry_msgs<span class="string">" provides a separate development package or SDK, be sure it has been installed."</span></span><br></pre></td></tr></table></figure> <ul> <li>错误二：解决：</li> </ul> <p>先搜索这个需要安装的ros功能包</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache search ros-kinetic | grep tf2_geometry_msgs</span><br></pre></td></tr></table></figure> <p>发现存在这个包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">porter@porter-Aspire:~/gym-gazebo/gym_gazebo/envs/installation$ apt-cache search ros-kinetic | grep tf2_geometry_msgs</span><br><span class="line">ros-kinetic-tf2-geometry-msgs - tf2_geometry_msgs</span><br></pre></td></tr></table></figure></p> <p>执行这个功能包的安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">porter@porter-Aspire:~/gym-gazebo/gym_gazebo/envs/installation$ sudo apt-get install ros-kinetic-tf2-geometry-msgs</span><br><span class="line">[sudo] porter 的密码： </span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">正在分析软件包的依赖关系树 </span><br><span class="line">正在读取状态信息... 完成 </span><br><span class="line">下列【新】软件包将被安装：</span><br><span class="line"> ros-kinetic-tf2-geometry-msgs</span><br><span class="line">升级了 0 个软件包，新安装了 1 个软件包，要卸载 0 个软件包，有 0 个软件包未被升级。</span><br><span class="line">需要下载 0 B/13.2 kB 的归档。</span><br><span class="line">解压缩后会消耗 86.0 kB 的额外空间。</span><br><span class="line">正在选中未选择的软件包 ros-kinetic-tf2-geometry-msgs。</span><br><span class="line">(正在读取数据库 ... 系统当前共安装有 415109 个文件和目录。)</span><br><span class="line">正准备解包 .../ros-kinetic-tf2-geometry-msgs_0.5.20-0xenial-20190320-171251-0800_amd64.deb ...</span><br><span class="line">正在解包 ros-kinetic-tf2-geometry-msgs (0.5.20-0xenial-20190320-171251-0800) ...</span><br><span class="line">正在设置 ros-kinetic-tf2-geometry-msgs (0.5.20-0xenial-20190320-171251-0800) ...</span><br><span class="line">porter@porter-Aspire:~/gym-gazebo/gym_gazebo/envs/installation$</span><br></pre></td></tr></table></figure></p> <p><img src="/image4/tf2_geometry_msg_resolved.png" alt="tf2_geometry_msg_resolved.png"></p> <h4 id="问题3："><a href="#问题3：" class="headerlink" title="问题3："></a>问题3：</h4><ul> <li>问题3：错误提示</li> </ul> <p>CMake Error at /opt/ros/kinetic/share/catkin/cmake/catkin_workspace.cmake:95 (message):</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WARNING: Metapackage <span class="string">"ecl_tools"</span> must buildtool_depend on catkin.</span><br><span class="line">WARNING: Metapackage <span class="string">"ecl_tools"</span> should not have other dependencies besides a buildtool_depend on catkin and run_depends.</span><br><span class="line">WARNING: Metapackage <span class="string">"ecl_lite"</span> must buildtool_depend on catkin.</span><br><span class="line">WARNING: Metapackage <span class="string">"ecl_lite"</span> should not have other dependencies besides a buildtool_depend on catkin and run_depends.</span><br><span class="line">Packages <span class="string">"mav_msgs"</span> not found <span class="keyword">in</span> the workspace</span><br></pre></td></tr></table></figure> <ul> <li>问题3：解决</li> </ul> <p>出现这个错误的原因是ecl升级，或这和你当前安装的ros版本不对应。造成了cmake版本比配。出错，方法是</p> <p>打开gazebo.repos,修改如下部分：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ecl_lite: </span><br><span class="line"><span class="built_in">type</span>: git </span><br><span class="line">url: https://github.com/stonier/ecl_lite </span><br><span class="line">version: release/0.61-indigo-kinetic </span><br><span class="line">ecl_navigation: </span><br><span class="line"><span class="built_in">type</span>: git </span><br><span class="line">url: https://github.com/stonier/ecl_navigation </span><br><span class="line">version: devel </span><br><span class="line">ecl_tools: </span><br><span class="line"><span class="built_in">type</span>: git </span><br><span class="line">url: https://github.com/stonier/ecl_tools </span><br><span class="line">version: release/0.61-indigo-kinetic</span><br></pre></td></tr></table></figure></p> <p>(将ecl_core、 ecl_lite 和ecl_tools 的版本号（version）改成： release/0.61-indigo-kinetic）</p> <p><strong>不过最终解决还是建议你如果也是安装ros kenitic 直接复制我后面附录的gazebo.repos内容替换掉之前的</strong></p> <p>路径：</p> <p>vim ~/gym-gazebo/gym_gazebo/envs/installation/gazebo.repos </p> <hr> <h2 id="gazebo-repos-内容修改"><a href="#gazebo-repos-内容修改" class="headerlink" title="gazebo.repos　内容修改"></a>gazebo.repos　内容修改</h2><p>gazebo.repos 修改后的文件内容，使适应kinetic环境，进行安装。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">repositories:</span><br><span class="line"> ar_track_alvar:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/ros-perception/ar_track_alvar</span><br><span class="line"> version: kinetic-devel</span><br><span class="line"> mav_comm:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/ethz-asl/mav_comm.git</span><br><span class="line"> version: master</span><br><span class="line"> catkin_simple:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/catkin/catkin_simple.git</span><br><span class="line"> version: master</span><br><span class="line"> control_toolbox:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/ros-controls/control_toolbox.git</span><br><span class="line"> version: kinetic-devel</span><br><span class="line"> ecl_core:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/stonier/ecl_core</span><br><span class="line"> version: release/0.61-indigo-kinetic</span><br><span class="line"> ecl_lite:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/stonier/ecl_lite</span><br><span class="line"> version: release/0.61-indigo-kinetic</span><br><span class="line"> ecl_navigation:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/stonier/ecl_navigation</span><br><span class="line"> version: release/0.60-indigo-kinetic</span><br><span class="line"> ecl_tools:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/stonier/ecl_tools</span><br><span class="line"> version: release/0.61-indigo-kinetic</span><br><span class="line"> driver_base:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/ros-drivers/driver_common.git</span><br><span class="line"> version: indigo-devel</span><br><span class="line"> gazebo_ros_pkgs:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/ros-simulation/gazebo_ros_pkgs</span><br><span class="line"> version: kinetic-devel</span><br><span class="line"> hector_gazebo:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/tu-darmstadt-ros-pkg/hector_gazebo/</span><br><span class="line"> version: kinetic-devel</span><br><span class="line"> image_common:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/ros-perception/image_common.git</span><br><span class="line"> version: hydro-devel</span><br><span class="line"> joystick_drivers:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/ros-drivers/joystick_drivers.git</span><br><span class="line"> version: master</span><br><span class="line"> kobuki:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/yujinrobot/kobuki</span><br><span class="line"> version: kinetic</span><br><span class="line"> kobuki_core:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/yujinrobot/kobuki_core</span><br><span class="line"> version: kinetic</span><br><span class="line"> kobuki_desktop:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/yujinrobot/kobuki_desktop</span><br><span class="line"> version: kinetic</span><br><span class="line"> kobuki_msgs:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/yujinrobot/kobuki_msgs</span><br><span class="line"> version: kinetic</span><br><span class="line"> navigation:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/ros-planning/navigation</span><br><span class="line"> version: kinetic-devel</span><br><span class="line"> pcl_ros:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/ros-perception/perception_pcl.git</span><br><span class="line"> version: kinetic-devel</span><br><span class="line"> realtime_tools:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/ros-controls/realtime_tools</span><br><span class="line"> version: kinetic-devel</span><br><span class="line"> ros_control:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/ros-controls/ros_control</span><br><span class="line"> version: kinetic-devel</span><br><span class="line"> roslint:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/ros/roslint</span><br><span class="line"> version: master</span><br><span class="line"> turtlebot:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/turtlebot/turtlebot</span><br><span class="line"> version: kinetic</span><br><span class="line"> turtlebot_create:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/turtlebot/turtlebot_create</span><br><span class="line"> version: master</span><br><span class="line"> turtlebot_simulator:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/turtlebot/turtlebot_simulator</span><br><span class="line"> version: indigo</span><br><span class="line"> xacro:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/ros/xacro</span><br><span class="line"> version: kinetic-devel</span><br><span class="line"> yocs_msgs:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/yujinrobot/yocs_msgs</span><br><span class="line"> version: release/0.6-kinetic</span><br><span class="line"> yujin_ocs:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/yujinrobot/yujin_ocs</span><br><span class="line"> version: kinetic</span><br></pre></td></tr></table></figure> <h2 id="安装结束效果"><a href="#安装结束效果" class="headerlink" title="安装结束效果"></a>安装结束效果</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment"># 最后几行的环境应该是这样的</span></span><br><span class="line"><span class="built_in">source</span> /home/porter/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/devel/setup.bash</span><br><span class="line"><span class="built_in">export</span> GAZEBO_MODEL_PATH=/home/porter/gym-gazebo/gym_gazebo/envs/installation/../assets/models</span><br><span class="line"><span class="built_in">export</span> GYM_GAZEBO_WORLD_MAZE=/home/porter/gym-gazebo/gym_gazebo/envs/installation/../assets/worlds/maze.world</span><br><span class="line"><span class="built_in">export</span> GYM_GAZEBO_WORLD_CIRCUIT=/home/porter/gym-gazebo/gym_gazebo/envs/installation/../assets/worlds/circuit.world</span><br><span class="line"><span class="built_in">export</span> GYM_GAZEBO_WORLD_CIRCUIT2=/home/porter/gym-gazebo/gym_gazebo/envs/installation/../assets/worlds/circuit2.world</span><br><span class="line"><span class="built_in">export</span> GYM_GAZEBO_WORLD_CIRCUIT2C=/home/porter/gym-gazebo/gym_gazebo/envs/installation/../assets/worlds/circuit2c.world</span><br><span class="line"><span class="built_in">export</span> GYM_GAZEBO_WORLD_ROUND=/home/porter/gym-gazebo/gym_gazebo/envs/installation/../assets/worlds/round.world</span><br></pre></td></tr></table></figure> <p>打开终端执行的效果如下图</p> <p><img src="/image4/gym_gazebo_success.png" alt="gym_gazebo_success"></p> <h4 id="问题4："><a href="#问题4：" class="headerlink" title="问题4："></a>问题4：</h4><ul> <li>问题4：错误提示</li> </ul> <p>Pycharm 里面无法正常运行Gym_gazebo代码.</p> <p><a href="https://blog.csdn.net/wuguangbin1230/article/details/79300578" target="_blank" rel="noopener">ubuntu下PyCharm导入ros库</a></p> <p>porter@porter-Aspire:~$ gedit /usr/share/applications/Pycharm.desktop<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=Pycharm</span><br><span class="line">GenericName=Pycharm3</span><br><span class="line">Comment=Pycharm3:The Python IDE</span><br><span class="line">Exec=sh /home/porter/pycharm-2018.3.5/bin/pycharm.sh</span><br><span class="line">Icon=/home/porter/pycharm-2018.3.5/bin/pycharm.png</span><br><span class="line">Terminal=pycharm</span><br><span class="line">Categories=Pycharm;</span><br></pre></td></tr></table></figure></p> <ul> <li>问题4：错误提示</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Name=Pycharm</span><br><span class="line">GenericName=Pycharm3</span><br><span class="line">Icon=/home/porter/pycharm-2018.3.5/bin/pycharm.png</span><br><span class="line">Exec=bash -i -c <span class="string">"/home/porter/pycharm-2018.3.5/bin/pycharm.sh"</span> %f</span><br><span class="line">Comment=Pycharm3:The Python IDE</span><br><span class="line">Categories=Development;IDE;</span><br><span class="line">Terminal=<span class="literal">false</span></span><br></pre></td></tr></table></figure> <h4 id="问题5："><a href="#问题5：" class="headerlink" title="问题5："></a>问题5：</h4><p><a href="https://blog.csdn.net/Dawn__Z/article/details/82454717" target="_blank" rel="noopener">在终端中正常运行，在pycharm中运行出错</a></p> <ul> <li>问题5：错误提示</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">entry = _cache.get(encoding, _unknown) </span><br><span class="line">AttributeError: ‘NoneType’ object has no attribute ‘get’</span><br></pre></td></tr></table></figure> <p>运行pycharm报错，内容如下：</p> <p><img src="/image4/gym_gazebo_err2.png" alt="no attribute ‘get’"></p> <ul> <li>问题5：解决方式：</li> </ul> <p>settings -&gt; tools -&gt;Python Scientific -&gt;Show plots in toolwindow(取消勾选)</p> <p><img src="/image4/gym_gazebo_err3.png" alt="plots in toolwindow"></p> <h2 id="gym-gazebo-测试"><a href="#gym-gazebo-测试" class="headerlink" title="gym-gazebo 测试"></a>gym-gazebo 测试</h2><p>参见我的另一篇文章<a href="./gym-gazebo安装后的测试.md">gym-gazebo安装后的测试</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> gym-gazebo </tag>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gym-gazebo安装后的测试</title>
      <link href="//gym-gazeboInstall/"/>
      <url>//gym-gazeboInstall/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>本节会安装以下内容</p> <!-- TOC --> <ul> <li><a href="#目录">目录</a></li> <li><a href="#第一步bash-turtlebot_setupbash">第一步：bash turtlebot_setup.bash</a><ul> <li><a href="#running-an-environment">Running an environment</a></li> <li><a href="#run-any-of-the-examples-available-in-examples-eg">Run any of the examples available in examples/. E.g.:</a></li> </ul> </li> <li><a href="#第二步source-setup_turtlebotbash">第二步：source setup_turtlebot.bash</a><ul> <li><a href="#source">source</a></li> <li><a href="#进行expert操作">进行expert操作</a></li> </ul> </li> <li><a href="#第三步eg-export-ros_master_urihttplocalhost12795">第三步：eg export ROS_MASTER_URI=http://localhost:12795</a><ul> <li><a href="#第二步和第三步操作方法的截图">第二步和第三步操作方法的截图</a></li> </ul> </li> <li><a href="#第四步gzclient">第四步：gzclient</a></li> <li><a href="#五-最终效果">五 最终效果</a><ul> <li><a href="#display-reward-plot">Display reward plot</a></li> <li><a href="#killing-background-processes">Killing background processes</a></li> </ul> </li> </ul> <!-- /TOC --> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。 </li> </ul> <a id="more"></a> <h2 id="第一步：bash-turtlebot-setup-bash"><a href="#第一步：bash-turtlebot-setup-bash" class="headerlink" title="第一步：bash turtlebot_setup.bash"></a>第一步：bash turtlebot_setup.bash</h2><h3 id="Running-an-environment"><a href="#Running-an-environment" class="headerlink" title="Running an environment"></a>Running an environment</h3><p>Load the environment variables corresponding to the robot you want to launch. E.g. to load the Turtlebot:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> gym_gazebo/envs/installation</span><br><span class="line">bash turtlebot_setup.bash</span><br></pre></td></tr></table></figure></p> <p>Note: all the setup scripts are available in gym_gazebo/envs/installation</p> <h3 id="Run-any-of-the-examples-available-in-examples-E-g"><a href="#Run-any-of-the-examples-available-in-examples-E-g" class="headerlink" title="Run any of the examples available in examples/. E.g.:"></a>Run any of the examples available in examples/. E.g.:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> examples/turtlebot</span><br><span class="line">python3 circuit2_turtlebot_lidar_qlearn.py</span><br></pre></td></tr></table></figure> <p><img src="/image4/gym_gazebo_test1.png" alt="bash turtlebot_setup.bash"></p> <h2 id="第二步：source-setup-turtlebot-bash"><a href="#第二步：source-setup-turtlebot-bash" class="headerlink" title="第二步：source setup_turtlebot.bash"></a>第二步：source setup_turtlebot.bash</h2><ul> <li>我的source bash文件是setup.bash不是setup_turtlebot.bash，所以我的是source setup.bash</li> </ul> <h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/porter/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/devel</span><br><span class="line"><span class="built_in">source</span> setup.bash</span><br></pre></td></tr></table></figure> <h3 id="进行expert操作"><a href="#进行expert操作" class="headerlink" title="进行expert操作"></a>进行expert操作</h3><p>首先第一步：bash turtlebot_setup.bash过后，终端会有如下的提示</p> <p><img src="/image4/gym_gazebo_export2.png" alt="export GAZEBO_MASTER_URI=http://"><br>得到有用的终端输出信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">porter@porter-Aspire:~/gym-gazebo/examples/turtlebot$ python3 circuit2_turtlebot_lidar_qlearn.py</span><br><span class="line">ROS_MASTER_URI=http://localhost:12795</span><br><span class="line"></span><br><span class="line">GAZEBO_MASTER_URI=http://localhost:12796</span><br><span class="line"></span><br><span class="line">Gazebo launched!</span><br><span class="line">Unable to register with master node [http://localhost:12795]: master may not be running yet. Will keep trying.</span><br><span class="line">... logging to /home/porter/.ros/<span class="built_in">log</span>/ab3f7618-6fea-11e9-a24a-f0761cd1b3e0/roslaunch-porter-Aspire-11818.log</span><br><span class="line">Checking <span class="built_in">log</span> directory <span class="keyword">for</span> disk usage. This may take awhile.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking <span class="built_in">log</span> file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">started roslaunch server http://porter-Aspire:33631/</span><br></pre></td></tr></table></figure></p> <h2 id="第三步：eg-export-ROS-MASTER-URI-http-localhost-12795"><a href="#第三步：eg-export-ROS-MASTER-URI-http-localhost-12795" class="headerlink" title="第三步：eg export ROS_MASTER_URI=http://localhost:12795"></a>第三步：eg export ROS_MASTER_URI=<a href="http://localhost:12795" target="_blank" rel="noopener">http://localhost:12795</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_MASTER_URI=http://localhost:12795 <span class="comment"># 和上面的端口号一致</span></span><br><span class="line"><span class="built_in">export</span> GAZEBO_MASTER_URI=http://localhost:12796 <span class="comment"># 和上面的端口号一致</span></span><br></pre></td></tr></table></figure> <h3 id="第二步和第三步操作方法的截图"><a href="#第二步和第三步操作方法的截图" class="headerlink" title="第二步和第三步操作方法的截图"></a>第二步和第三步操作方法的截图</h3><p><img src="/image4/gym_gazebo_export1.png" alt="gym_gazebo_export1"></p> <h2 id="第四步：gzclient"><a href="#第四步：gzclient" class="headerlink" title="第四步：gzclient"></a>第四步：gzclient</h2><p>执行如下命令打开gazebo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzclient</span><br></pre></td></tr></table></figure></p> <h2 id="五-最终效果"><a href="#五-最终效果" class="headerlink" title="五 最终效果"></a>五 最终效果</h2><p><img src="/image4/turtlebot_ros_gazebo.gif" alt="gym_gazebo 完整运行效果"></p> <h3 id="Display-reward-plot"><a href="#Display-reward-plot" class="headerlink" title="Display reward plot"></a>Display reward plot</h3><p>Display a graph showing the current reward history by running the following script:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/porter/gym-gazebo/</span><br><span class="line"><span class="built_in">cd</span> examples/utilities</span><br><span class="line">python3 display_plot.py</span><br></pre></td></tr></table></figure> <p>HINT: use –help flag for more options.</p> <h3 id="Killing-background-processes"><a href="#Killing-background-processes" class="headerlink" title="Killing background processes"></a>Killing background processes</h3><p>Sometimes, after ending or killing the simulation gzserver and rosmaster stay on the background, make sure you end them before starting new tests.</p> <p>We recommend creating an alias to kill those processes.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"alias killgazebogym='killall -9 rosout roslaunch rosmaster gzserver nodelet robot_state_publisher gzclient'"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure> <p>参考来源：<a href="https://github.com/erlerobot/gym-gazebo/tree/master#installation" target="_blank" rel="noopener">https://github.com/erlerobot/gym-gazebo/tree/master#installation</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> gym-gazebo </tag>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gym 运行常见错误及解决办法</title>
      <link href="//gymError/"/>
      <url>//gymError/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。 </li> </ul> <a id="more"></a> <h2 id="1-env-close-问题"><a href="#1-env-close-问题" class="headerlink" title="1. env.close()问题"></a>1. env.close()问题</h2><h3 id="1-1-问题1描述-TypeError-‘NoneType’-object-is-not-iterable"><a href="#1-1-问题1描述-TypeError-‘NoneType’-object-is-not-iterable" class="headerlink" title="1.1 问题1描述(TypeError: ‘NoneType’ object is not iterable)"></a>1.1 问题1描述(TypeError: ‘NoneType’ object is not iterable)</h3><blockquote> <p>当我们在pycharm或者其他IDE运行一段gym例子,程序结束时都会弹出这个错误提示</p> </blockquote> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">OK</span><br><span class="line">Exception ignored in: &lt;bound method Viewer.__del__ of &lt;gym.envs.classic_control.rendering.Viewer object at 0x7f8758e0a4a8&gt;&gt;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File "/home/porter/gym/gym/envs/classic_control/rendering.py", line 152, in __del__</span><br><span class="line"> File "/home/porter/gym/gym/envs/classic_control/rendering.py", line 71, in close</span><br><span class="line"> File "/home/porter/anaconda3/lib/python3.5/site-packages/pyglet/window/xlib/__init__.py", line 480, in close</span><br><span class="line"> File "/home/porter/anaconda3/lib/python3.5/site-packages/pyglet/gl/xlib.py", line 345, in destroy</span><br><span class="line"> File "/home/porter/anaconda3/lib/python3.5/site-packages/pyglet/gl/base.py", line 334, in destroy</span><br><span class="line"> File "/home/porter/anaconda3/lib/python3.5/site-packages/pyglet/gl/xlib.py", line 335, in detach</span><br><span class="line"> File "/home/porter/anaconda3/lib/python3.5/site-packages/pyglet/gl/lib.py", line 97, in errcheck</span><br><span class="line"> File "&lt;frozen importlib._bootstrap&gt;", line 968, in _find_and_load</span><br><span class="line"> File "&lt;frozen importlib._bootstrap&gt;", line 953, in _find_and_load_unlocked</span><br><span class="line"> File "&lt;frozen importlib._bootstrap&gt;", line 887, in _find_spec</span><br><span class="line">TypeError: 'NoneType' object is not iterable</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure> <h3 id="1-2-解决"><a href="#1-2-解决" class="headerlink" title="1.2 解决"></a>1.2 解决</h3><ul> <li>原因是，我们没在迭代结束后加上这句话</li> </ul> <p>在代码迭代结束后加上这句代码</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env.close()</span><br></pre></td></tr></table></figure> <h3 id="1-3-测试代码如下："><a href="#1-3-测试代码如下：" class="headerlink" title="1.3 测试代码如下："></a>1.3 测试代码如下：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">env = gym.make(<span class="string">'CartPole-v0'</span>)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i_episode <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line"> observation = env.reset()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line"> env.render()</span><br><span class="line"> print(observation)</span><br><span class="line"> action = env.action_space.sample()</span><br><span class="line"> observation, reward, done, info = env.step(action)</span><br><span class="line"> <span class="keyword">if</span> done:</span><br><span class="line"> print(<span class="string">"Episode finished after &#123;&#125; timesteps"</span>.format(step+<span class="number">1</span>))</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"> i += <span class="number">1</span></span><br><span class="line"> print(<span class="string">"i="</span>, i, )</span><br><span class="line">print(<span class="string">"OK"</span>)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">env.close()</span><br></pre></td></tr></table></figure> <h2 id="2-在运行-‘python-circuit2-turtlebot-lidar-qlearn-py-’-报错"><a href="#2-在运行-‘python-circuit2-turtlebot-lidar-qlearn-py-’-报错" class="headerlink" title="2. 在运行 ‘python circuit2_turtlebot_lidar_qlearn.py ’ 报错"></a>2. <a href="https://blog.csdn.net/zhangdadadawei/article/details/78906103?utm_source=blogxgwz6" target="_blank" rel="noopener">在运行 ‘python circuit2_turtlebot_lidar_qlearn.py ’ 报错</a></h2><h3 id="2-1-错误提示"><a href="#2-1-错误提示" class="headerlink" title="2.1 错误提示"></a>2.1 错误提示</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while processing /home/harish/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/turtlebot_simulator/turtlebot_gazebo/launch/includes/kobuki.launch.xml:</span><br><span class="line">Invalid tag: Cannot load command parameter [robot_description]: command [/opt/ros/kinetic/lib/xacro/xacro --inorder '/home/harish/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/turtlebot/turtlebot_description/robots/kobuki_hexagons_asus_xtion_pro.urdf.xacro'] returned with code [2].</span><br><span class="line">Param xml is </span><br><span class="line">The traceback for the exception was written to the log file</span><br></pre></td></tr></table></figure> <ul> <li>PyCharm 中的错误提示</li> </ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GAZEBO_MASTER_URI=http://localhost:10039</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File "/home/porter/gym-gazebo/examples/turtlebot/circuit_turtlebot_lidar_qlearn.py", line 24, in &lt;module&gt;</span><br><span class="line"> env = gym.make('GazeboCircuitTurtlebotLidar-v0')</span><br><span class="line"> File "/home/porter/gym/gym/envs/registration.py", line 155, in make</span><br><span class="line"> return registry.make(id, **kwargs)</span><br><span class="line"> File "/home/porter/gym/gym/envs/registration.py", line 100, in make</span><br><span class="line"> env = spec.make(**kwargs)</span><br><span class="line"> File "/home/porter/gym/gym/envs/registration.py", line 72, in make</span><br><span class="line"> env = cls(**_kwargs)</span><br><span class="line"> File "/home/porter/gym-gazebo/gym_gazebo/envs/turtlebot/gazebo_circuit_turtlebot_lidar.py", line 20, in __init__</span><br><span class="line"> gazebo_env.GazeboEnv.__init__(self, "GazeboCircuitTurtlebotLidar_v0.launch")</span><br><span class="line"> File "/home/porter/gym-gazebo/gym_gazebo/envs/gazebo_env.py", line 36, in __init__</span><br><span class="line"> ros_path = os.path.dirname(subprocess.check_output(["which", "roscore"]))</span><br><span class="line"> File "/home/porter/anaconda3/lib/python3.5/subprocess.py", line 316, in check_output</span><br><span class="line"> **kwargs).stdout</span><br><span class="line"> File "/home/porter/anaconda3/lib/python3.5/subprocess.py", line 398, in run</span><br><span class="line"> output=stdout, stderr=stderr)</span><br><span class="line">subprocess.CalledProcessError: Command '['which', 'roscore']' returned non-zero exit status 1</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure> <h3 id="2-2-解决方法"><a href="#2-2-解决方法" class="headerlink" title="2.2 解决方法"></a>2.2 解决方法</h3><p>使用gedit打开kobuki.launch.xml文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit /home/zhw/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/turtlebot_simulator/turtlebot_gazebo/launch/includes/kobuki.launch.xml</span><br></pre></td></tr></table></figure> <p>然后，将第六行替换成：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;arg name="urdf_file" default="$(find xacro)/xacro.py '$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'"/&gt;</span><br></pre></td></tr></table></figure></p> <h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><h3 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Multiple packages found with the same name "ecl_mobile_robot":</span><br><span class="line">- ecl_core/ecl_mobile_robot</span><br><span class="line">- ecl_navigation/ecl_mobile_robot</span><br><span class="line">setup_kinetic.bash: 行 80: devel/setup.bash: 没有那个文件或目录</span><br></pre></td></tr></table></figure> <h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a><a href="https://blog.csdn.net/qq_20989743/article/details/79936639" target="_blank" rel="noopener">解决方法</a></h3><ul> <li>打开gazebo.repos,修改如下部分：<br>改写,原来的内容为：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ecl_core:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/stonier/ecl_core</span><br><span class="line"> version: devel</span><br><span class="line"> ecl_lite:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/stonier/ecl_lite</span><br><span class="line"> version: devel</span><br><span class="line"> ecl_navigation:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/stonier/ecl_navigation</span><br><span class="line"> version: devel</span><br><span class="line"> ecl_tools:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/stonier/ecl_tools</span><br><span class="line"> version: devel</span><br></pre></td></tr></table></figure> </li> </ul> <p>改写为(将ecl_core、 ecl_lite 和ecl_tools 的版本号（version）改成： release/0.61-indigo-kinetic）</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ecl_core:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/stonier/ecl_core</span><br><span class="line"> version: release/0.61-indigo-kinetic</span><br><span class="line">ecl_lite:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/stonier/ecl_lite</span><br><span class="line"> version: release/0.61-indigo-kinetic</span><br><span class="line">ecl_navigation:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/stonier/ecl_navigation</span><br><span class="line"> version: release/0.61-indigo-kinetic</span><br><span class="line">ecl_tools:</span><br><span class="line"> type: git</span><br><span class="line"> url: https://github.com/stonier/ecl_tools</span><br><span class="line"> version: release/0.61-indigo-kinetic</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> gym </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> gym </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ros and gazebo and gym_gazebo安装</title>
      <link href="//ros&amp;gazeboInstall/"/>
      <url>//ros&amp;gazeboInstall/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本节笔记主要记录ROS室内仿真环景的具体演示过程和</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。 </li> </ul> <a id="more"></a> <h2 id="ros-安装"><a href="#ros-安装" class="headerlink" title="ros 安装"></a>ros 安装</h2><h2 id="gazebo安装"><a href="#gazebo安装" class="headerlink" title="gazebo安装"></a>gazebo安装</h2><h2 id="gym-gazebo安装"><a href="#gym-gazebo安装" class="headerlink" title="gym_gazebo安装"></a>gym_gazebo安装</h2><h2 id="安装配置中的问题"><a href="#安装配置中的问题" class="headerlink" title="安装配置中的问题"></a>安装配置中的问题</h2><h3 id="python-环境下提示无法导入rospy"><a href="#python-环境下提示无法导入rospy" class="headerlink" title="python 环境下提示无法导入rospy"></a>python 环境下提示无法导入rospy</h3><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install catkin-tools</span><br><span class="line">sudo pip install rospkg</span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install catkin-tools</span><br><span class="line">sudo pip3 install rospkg</span><br></pre></td></tr></table></figure> <h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">porter@porter-Aspire:~$ sudo pip3 install catkin-tools</span><br><span class="line">[sudo] porter 的密码： </span><br><span class="line">The directory '/home/porter/.cache/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.</span><br><span class="line">The directory '/home/porter/.cache/pip' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.</span><br><span class="line">Requirement already satisfied: catkin-tools in /usr/local/lib/python3.5/site-packages</span><br><span class="line">Requirement already satisfied: osrf-pycommon&gt;0.1.1 in /usr/local/lib/python3.5/site-packages (from catkin-tools)</span><br><span class="line">Requirement already satisfied: PyYAML in /usr/local/lib/python3.5/site-packages (from catkin-tools)</span><br><span class="line">Requirement already satisfied: setuptools in /usr/local/lib/python3.5/site-packages (from catkin-tools)</span><br><span class="line">Requirement already satisfied: catkin-pkg&gt;0.2.9 in /usr/local/lib/python3.5/site-packages (from catkin-tools)</span><br><span class="line">Requirement already satisfied: trollius in /usr/local/lib/python3.5/site-packages (from catkin-tools)</span><br><span class="line">Requirement already satisfied: docutils in /usr/local/lib/python3.5/site-packages (from catkin-pkg&gt;0.2.9-&gt;catkin-tools)</span><br><span class="line">Requirement already satisfied: pyparsing in /usr/local/lib/python3.5/site-packages (from catkin-pkg&gt;0.2.9-&gt;catkin-tools)</span><br><span class="line">Requirement already satisfied: python-dateutil in /usr/local/lib/python3.5/site-packages (from catkin-pkg&gt;0.2.9-&gt;catkin-tools)</span><br><span class="line">Requirement already satisfied: six in /usr/local/lib/python3.5/site-packages (from trollius-&gt;catkin-tools)</span><br><span class="line">You are using pip version 9.0.1, however version 19.1 is available.</span><br><span class="line">You should consider upgrading via the 'pip install --upgrade pip' command.</span><br><span class="line"></span><br><span class="line">porter@porter-Aspire:~$ sudo pip3 install rospkg</span><br><span class="line">The directory '/home/porter/.cache/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.</span><br><span class="line">The directory '/home/porter/.cache/pip' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.</span><br><span class="line">Requirement already satisfied: rospkg in /usr/local/lib/python3.5/site-packages</span><br><span class="line">Requirement already satisfied: PyYAML in /usr/local/lib/python3.5/site-packages (from rospkg)</span><br><span class="line">Requirement already satisfied: catkin-pkg in /usr/local/lib/python3.5/site-packages (from rospkg)</span><br><span class="line">Requirement already satisfied: python-dateutil in /usr/local/lib/python3.5/site-packages (from catkin-pkg-&gt;rospkg)</span><br><span class="line">Requirement already satisfied: pyparsing in /usr/local/lib/python3.5/site-packages (from catkin-pkg-&gt;rospkg)</span><br><span class="line">Requirement already satisfied: docutils in /usr/local/lib/python3.5/site-packages (from catkin-pkg-&gt;rospkg)</span><br><span class="line">Requirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.5/site-packages (from python-dateutil-&gt;catkin-pkg-&gt;rospkg)</span><br><span class="line">You are using pip version 9.0.1, however version 19.1 is available.</span><br><span class="line">You should consider upgrading via the 'pip install --upgrade pip' command.</span><br><span class="line"></span><br><span class="line">porter@porter-Aspire:~$ python3</span><br><span class="line">Python 3.5.6 (default, Mar 29 2019, 21:29:42) </span><br><span class="line">[GCC 5.4.0 20160609] on linux</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import rospy</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图书馆占座小工具使用手册</title>
      <link href="//liberarytool/"/>
      <url>//liberarytool/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><!-- TOC --> <ul> <li><a href="#摘要">摘要</a></li> <li><a href="#使用说明">使用说明</a><ul> <li><a href="#房间情况查询操作帮助说明">房间情况查询操作帮助说明</a><ul> <li><a href="#查询功能描述">查询功能描述</a></li> <li><a href="#查询-软件操作步骤">查询-软件操作步骤</a></li> <li><a href="#注意">注意</a></li> </ul> </li> <li><a href="#选座操作帮助说明">选座操作帮助说明</a><ul> <li><a href="#手动选座功能描述">手动选座功能描述</a></li> <li><a href="#选座-软件操作步骤">选座-软件操作步骤</a></li> <li><a href="#注意-1">注意</a></li> </ul> </li> <li><a href="#自动选座操作帮助说明">自动选座操作帮助说明</a><ul> <li><a href="#自动选座功能描述">自动选座功能描述</a></li> <li><a href="#自动选座-软件操作步骤">自动选座-软件操作步骤</a></li> <li><a href="#注意-2">注意</a></li> </ul> </li> <li><a href="#关于软件打包成exe方案">关于软件打包成exe方案</a><ul> <li><a href="#安装pyinstaller">安装pyinstaller</a></li> <li><a href="#打包成exe文件">打包成exe文件</a></li> </ul> </li> </ul> </li> </ul> <!-- /TOC --> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>帮网友做的图书馆抢座和查学生信息的GUI操作界面</p> <p><img src="/image6/Library_Release_1.png" alt="软件整体界面"></p> <h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><blockquote> <p>注意自动抢座模式，电脑不能掉网哦，程序内部已经添加了学校网络账号自动登录功能，但是用的作者个人账号，所以为了不影响作者上网，除了调试阶段的程序，其他发布的程序，自动链接网络的功能都是注释掉的，望海涵，如果后期有需要，笔者可以在软件界面加个输入上网账号的输入口，实现用用户自己的上网号自动上网。</p> </blockquote> <h2 id="房间情况查询操作帮助说明"><a href="#房间情况查询操作帮助说明" class="headerlink" title="房间情况查询操作帮助说明"></a>房间情况查询操作帮助说明</h2><h3 id="查询功能描述"><a href="#查询功能描述" class="headerlink" title="查询功能描述"></a>查询功能描述</h3><ul> <li>可以查询当前选择的房间号和当前填写的时间段的座位被占用情况</li> <li>可以查询当前座位的同学姓名</li> </ul> <h3 id="查询-软件操作步骤"><a href="#查询-软件操作步骤" class="headerlink" title="查询-软件操作步骤"></a>查询-软件操作步骤</h3><ul> <li><ol> <li>输入 【开始时间】-【结束时间】-【日期设置】</li> </ol> </li> <li><ol start="2"> <li>选择 【房间号】</li> </ol> </li> <li><ol start="3"> <li>填写 【座位号】</li> </ol> </li> <li><ol start="4"> <li>点击 【房间查询】按键</li> </ol> </li> </ul> <p>通过以上4步骤，即可返回你要查询年月日下的对应时间段房间预约情况。</p> <h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul> <li>输入格式严格按照运行软件的实例格式输入，具体怎么输入，可咨询作者，但是非作者本人分享，你是找不到作者的，如果命令输入错误，拼写问题，会有相应提示错误原因。如果字符格式错误，软件将会气死的。为啥不人性化直接输入时间数值，原因很简单，害怕软件传播，影响其他爱学习的孩子，建议1楼的都不要抢啊，人家考研的辛苦的。</li> </ul> <blockquote> <p>如果输入信息出错将会有相应错误信息提示，按照错误信息操作即可解决</p> </blockquote> <p><img src="/image6/Library_Release_1.gif" alt="软件查询功能"></p> <h2 id="选座操作帮助说明"><a href="#选座操作帮助说明" class="headerlink" title="选座操作帮助说明"></a>选座操作帮助说明</h2><h3 id="手动选座功能描述"><a href="#手动选座功能描述" class="headerlink" title="手动选座功能描述"></a>手动选座功能描述</h3><ul> <li>可以选择当前选择的房间号和当前填写的时间段的座位，对对应房间号中的某座位进行预约</li> <li>支持当天的位置预约和未来24小时的位置进行预约</li> <li>更多功能自行探索</li> </ul> <h3 id="选座-软件操作步骤"><a href="#选座-软件操作步骤" class="headerlink" title="选座-软件操作步骤"></a>选座-软件操作步骤</h3><ul> <li><ol> <li>输入 【输入学号】-【输入密码】-【验证码】</li> </ol> </li> <li><ol start="2"> <li>点击 【登录】按键</li> </ol> </li> <li><ol start="3"> <li>【开始时间】-【结束时间】-【日期设置】</li> </ol> </li> <li><ol start="4"> <li>选择 【房间号】</li> </ol> </li> <li><ol start="5"> <li>填写 【座位号】</li> </ol> </li> <li><ol start="6"> <li>然后点击【选座】</li> </ol> </li> </ul> <p>通过以上6步骤，即可成功预约在你指定的时间断中，你选择的房间号下对应的座位号，即成功按照你的需要预约成功。</p> <h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ul> <li>输入格式严格按照运行软件的实例格式输入，具体怎么输入，可咨询作者，但是非作者本人分享，你是找不到作者的，如果命令输入错误，拼写问题，会有相应提示错误原因。如果字符格式错误，软件将会气死的。为啥不人性化直接输入时间数值，原因很简单，害怕软件传播，影响其他爱学习的孩子，建议1楼的都不要抢啊，人家考研的辛苦的。</li> </ul> <blockquote> <p>如果输入信息出错将会有相应错误信息提示，按照错误信息操作即可解决，成功预约会返回成功的相应信息。如“您已成功预约”等字样</p> </blockquote> <p><img src="/image6/Library_Release_2.gif" alt="软件手动选座功能"></p> <h2 id="自动选座操作帮助说明"><a href="#自动选座操作帮助说明" class="headerlink" title="自动选座操作帮助说明"></a>自动选座操作帮助说明</h2><h3 id="自动选座功能描述"><a href="#自动选座功能描述" class="headerlink" title="自动选座功能描述"></a>自动选座功能描述</h3><ul> <li>可以在当天上午5:30时刻自动对明天8：30-22:00时间段的，当前选定的房间号和座位号进行座位的抢占</li> <li>注意勾选自动抢座后，程序会到每天的上午5:30时刻进行自动预约24小时后的位置（相对今天，明天的位置）</li> </ul> <h3 id="自动选座-软件操作步骤"><a href="#自动选座-软件操作步骤" class="headerlink" title="自动选座-软件操作步骤"></a>自动选座-软件操作步骤</h3><ul> <li><ol> <li>输入 【输入学号】-【输入密码】-【验证码】</li> </ol> </li> <li><ol start="2"> <li>点击 【登录】按键</li> </ol> </li> <li><ol start="3"> <li>选择 【房间号】</li> </ol> </li> <li><ol start="4"> <li>填写 【座位号】</li> </ol> </li> <li><ol start="5"> <li>然后勾选右下角的【自动选座】</li> </ol> </li> </ul> <p>通过以上5步骤，软件讲处于自动选座模式，此时需要保持软件处于运行状态，软件将会在每天的5:30开始抢座。</p> <p>抢座的时间段固定为当天后一天（今天5:30开抢明天8:30-22:00）的座位。</p> <p>抢占的座位和房间号可以在5:30前的任何时间填写好，（今天5:30开抢，一般昨天晚上睡觉前，在选择房间号和座位号后就点击自动选位开抢了）然后不要玩了勾选自动选择座位。</p> <h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><ul> <li>输入格式严格按照运行软件的实例格式输入，具体怎么输入，可咨询作者，但是非作者本人分享，你是找不到作者的，如果命令输入错误，拼写问题，会有相应提示错误原因。如果字符格式错误，软件将会气死的。为啥不人性化直接输入时间数值，原因很简单，害怕软件传播，影响其他爱学习的孩子，建议1楼的都不要抢啊，人家考研的辛苦的。</li> </ul> <blockquote> <p>如果输入信息出错将会有相应错误信息提示，按照错误信息操作即可解决，成功预约会返回成功的相应信息。如“您已成功预约”等字样</p> </blockquote> <p><img src="/image6/Library_Release_3.gif" alt="软件自动选座功能"></p> <p><img src="/image6/Library_Release_4.gif" alt="软件自动选座功能演示"></p> <h2 id="关于软件打包成exe方案"><a href="#关于软件打包成exe方案" class="headerlink" title="关于软件打包成exe方案"></a>关于软件打包成exe方案</h2><h3 id="安装pyinstaller"><a href="#安装pyinstaller" class="headerlink" title="安装pyinstaller"></a>安装pyinstaller</h3><ul> <li><a href="http://www.pyinstaller.org" target="_blank" rel="noopener">www.pyinstaller.org</a></li> <li>安装指令</li> </ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure> <h3 id="打包成exe文件"><a href="#打包成exe文件" class="headerlink" title="打包成exe文件"></a>打包成exe文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-F, –onefile 打包成一个exe文件。</span><br><span class="line">-D, –onedir 创建一个目录，包含exe文件，但会依赖很多文件（默认选项）。</span><br><span class="line">-c, –console, –nowindowed 使用控制台，无界面(默认)</span><br><span class="line">-w, –windowed, –noconsole 使用窗口，无控制台</span><br><span class="line">更详细的使用方法可以参考下载包里的doc目录下的Manual.html文件。</span><br></pre></td></tr></table></figure> <ul> <li>生成的exe文件相对较小，而且可以不用安装运行环境</li> </ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 到name.py脚本的目录中</span><br><span class="line">pyinstaller -w -F name.py</span><br></pre></td></tr></table></figure> <p>这条指令后会生成一个exe，并且占用空间小，占内存和你代码写的有关系，一般占用内存也不大</p> <h3 id="界面升级"><a href="#界面升级" class="headerlink" title="界面升级"></a>界面升级</h3><p><img src="/image6/Library_Release_1.jpg" alt="操作界面升级"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Library Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Library Project </tag>
            
            <tag> Pythton </tag>
            
            <tag> qt5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.17 ubuntu下安装有道词典</title>
      <link href="//linuxyoudaodict/"/>
      <url>//linuxyoudaodict/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h2 id="解决ubuntu16安装有道词典安装后”水土不服“的一些问题"><a href="#解决ubuntu16安装有道词典安装后”水土不服“的一些问题" class="headerlink" title="解决ubuntu16安装有道词典安装后”水土不服“的一些问题"></a>解决ubuntu16安装有道词典安装后”水土不服“的一些问题</h2><ul> <li>不能取词</li> <li>不能发音问题</li> </ul> <p>具体步骤内容如下：</p> <!-- TOC --> <ul> <li><a href="#摘要">摘要</a><ul> <li><a href="#解决ubuntu16安装有道词典安装后水土不服的一些问题">解决ubuntu16安装有道词典安装后”水土不服“的一些问题</a></li> </ul> </li> <li><a href="#下载有道词典的官方最新安装包">下载有道词典的官方最新安装包</a></li> <li><a href="#cd-到下载保存的目录执行解包修改打包等httpswwwcnblogscomlibrenap8074758html">cd 到下载保存的目录执行<a href="https://www.cnblogs.com/librena/p/8074758.html" target="_blank" rel="noopener">解包,修改，打包等</a></a><ul> <li><a href="#创建youdao-dict目录把该deb包解压到youdao-dict目录">创建youdao-dict目录，把该deb包解压到youdao-dict目录</a></li> <li><a href="#解压deb包中的control信息包的依赖就写在这个文件里面">解压deb包中的control信息（包的依赖就写在这个文件里面）</a></li> <li><a href="#编辑control文件删除depends里面的gstreamer010-plugins-ugly添加gstreamer10-libav">编辑control文件，删除Depends里面的gstreamer0.10-plugins-ugly,添加gstreamer1.0-libav</a></li> <li><a href="#编辑后的control文件的依赖包内目如下">编辑后的control文件的依赖包内目如下</a></li> </ul> </li> <li><a href="#重新打包安装">重新打包，安装</a></li> </ul> <!-- /TOC --> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h1 id="下载有道词典的官方最新安装包"><a href="#下载有道词典的官方最新安装包" class="headerlink" title="下载有道词典的官方最新安装包"></a>下载有道词典的官方最新安装包</h1><p><a href="http://codown.youdao.com/cidian/linux/youdao-dict_1.1.0-0-ubuntu_amd64.deb" target="_blank" rel="noopener">youdao-dict_1.1.0-0-ubuntu_amd64.deb</a></p> <h1 id="cd-到下载保存的目录执行解包-修改，打包等"><a href="#cd-到下载保存的目录执行解包-修改，打包等" class="headerlink" title="cd 到下载保存的目录执行解包,修改，打包等"></a>cd 到下载保存的目录执行<a href="https://www.cnblogs.com/librena/p/8074758.html" target="_blank" rel="noopener">解包,修改，打包等</a></h1><h2 id="创建youdao-dict目录，把该deb包解压到youdao-dict目录"><a href="#创建youdao-dict目录，把该deb包解压到youdao-dict目录" class="headerlink" title="创建youdao-dict目录，把该deb包解压到youdao-dict目录"></a>创建youdao-dict目录，把该deb包解压到youdao-dict目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -X ./youdao-dict_1.1.0-0-ubuntu_amd64.deb youdao-dict</span><br></pre></td></tr></table></figure> <h2 id="解压deb包中的control信息（包的依赖就写在这个文件里面）"><a href="#解压deb包中的control信息（包的依赖就写在这个文件里面）" class="headerlink" title="解压deb包中的control信息（包的依赖就写在这个文件里面）"></a>解压deb包中的control信息（包的依赖就写在这个文件里面）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -e ./youdao-dict_1.1.0-0-ubuntu_amd64.deb youdao-dict/DEBIAN</span><br></pre></td></tr></table></figure> <h2 id="编辑control文件，删除Depends里面的gstreamer0-10-plugins-ugly-添加gstreamer1-0-libav"><a href="#编辑control文件，删除Depends里面的gstreamer0-10-plugins-ugly-添加gstreamer1-0-libav" class="headerlink" title="编辑control文件，删除Depends里面的gstreamer0.10-plugins-ugly,添加gstreamer1.0-libav"></a>编辑control文件，删除Depends里面的gstreamer0.10-plugins-ugly,添加gstreamer1.0-libav</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi ./youdao-dict/DEBIAN/control</span><br></pre></td></tr></table></figure> <ul> <li>注意可以直接先安装好<a href="https://xuexiyuan.cn/article/detail/215.html" target="_blank" rel="noopener">有道词典单词发音的语音包修复</a>如下</li> </ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装单词发音语音包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索 gstreamer1 相关的包</span></span><br><span class="line">sudo apt-cache search gstreamer1</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装找到的 gstreamer1.0-libav 包</span></span><br><span class="line">sudo apt-get install gstreamer1.0-libav</span><br></pre></td></tr></table></figure> <h2 id="编辑后的control文件的依赖包内目如下"><a href="#编辑后的control文件的依赖包内目如下" class="headerlink" title="编辑后的control文件的依赖包内目如下"></a>编辑后的control文件的依赖包内目如下</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Depends: python3, python3-pyqt5, python3-requests, python3-xlib, tesseract-ocr, tesseract-ocr-eng, tesseract-ocr-chi-sim, tesseract-ocr-chi-tra, python3-pil, ttf-wqy-microhei, python3-lxml, python3-xdg, python3-pyqt5.qtmultimedia, python3-pyqt5.qtquick, python3-pyqt5.qtwebkit, gir1.2-appindicator3-0.1, python3-dbus, qtdeclarative5-controls-plugin, libqt5multimedia5-plugins, gstreamer1.0-libav</span><br></pre></td></tr></table></figure> <h1 id="重新打包，安装"><a href="#重新打包，安装" class="headerlink" title="重新打包，安装"></a>重新打包，安装</h1><p>sudo dpkg-deb -b youdao-dict youdaobuild.deb</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i youdaobuild.deb</span><br><span class="line">出现缺少的依赖使用如下命令安装所需依赖</span><br><span class="line">sudo apt install -f</span><br><span class="line">依赖安装完成后再次键入如下命令进行安装</span><br><span class="line">sudo dpkg -i youdaobuild.deb</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有道词典 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.16 ubuntu18升级后部分应用不能中文输入的问题</title>
      <link href="//inputU18/"/>
      <url>//inputU18/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h2 id="ubuntu18升级后部分应用不能中文输入的问题"><a href="#ubuntu18升级后部分应用不能中文输入的问题" class="headerlink" title="ubuntu18升级后部分应用不能中文输入的问题"></a>ubuntu18升级后部分应用不能中文输入的问题</h2><p>作者做死尝试新的系统和新的桌面gnome结果悲剧了</p> <p>问题一：<br>我的爽系统引导失效了，重启直接进入windows不进入ubuntu的登录界面</p> <p>问题二：<br>我的输入法抽风了，我卸载安装，又卸载安装好多遍，结果还是不能用。<br>本文我们只写如何修复部分应用可以i中文输入，然而像浏览器，啥的并不能英文输入的解决办法</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>解决办法是，首先卸载ibus，然后进入系统输入法设置选择输入法为fcitx ，然后重启，开机后就正常了</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove ibus*</span><br><span class="line">sudo apt-get purge ibus*</span><br><span class="line"><span class="comment"># 卸载～/.cache中的不能中文输入的软件cahe全删除掉</span></span><br><span class="line">sudo rm -rf ~/.cache/gedit/</span><br><span class="line">sudo rm -rf ~/.cache/webkitgtk/</span><br><span class="line">sudo rm -rf ~/.cache/gnome-software/</span><br><span class="line">............</span><br><span class="line">sudo rm -rf ~/.cache/google-chrome/</span><br></pre></td></tr></table></figure> <p><a href="https://launchpad.net/ubuntu/+source/fcitx/1:4.2.9.6-1" target="_blank" rel="noopener">去官网下载fictx安装的binary 二进制安装文件deb</a></p> <p><a href="https://launchpad.net/ubuntu/cosmic/amd64/fcitx/1:4.2.9.6-1" target="_blank" rel="noopener">fcitx</a></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf ~/.cache/ibus/</span><br><span class="line">sudo apt-get install fcitx-bin</span><br><span class="line">sudo apt-get install fcitx-stable</span><br><span class="line">sudo apt-get remove ibus</span><br><span class="line">sudo apt-get purge ibus</span><br><span class="line">sudo apt-get remove indicator-keyboard</span><br><span class="line">sudo apt-get install fcitx</span><br><span class="line">fcitx -r</span><br><span class="line"><span class="comment"># 下载搜狗官方安装包直接安装，双击或者cd到目录后执行如下代码</span></span><br><span class="line">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br></pre></td></tr></table></figure> <p>比如我是x64的，我选择amd64对应的deb，下载后直接双击安装就好</p> <p><a href="http://launchpadlibrarian.net/358554765/fcitx_4.2.9.6-1_all.deb" target="_blank" rel="noopener">fcitx_4.2.9.6-1_all.deb</a></p> <p>建议上面的 sudo apt-get install fcitx-bin sudo apt-get install fcitx-stable 也换成直接官方下载deb包然后安装，在哪可以自己去<a href="http://launchpadlibrarian.net/" target="_blank" rel="noopener">fcitx官网</a>找到.</p> <p>最后一步重启，要重启才有用。</p> <p>然后按照之前那样设置搜狗输入法。</p> <p>提示，如果你本来就安装了搜狗输入法，你也不用卸载，直接忽略我上面安装搜狗的步骤就好了，效果和重装搜狗一样。笔者是捣鼓的时候，误卸载了搜狗的，所以后面重装了。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 不能中文输入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.15 ubuntu下goldendict有道爬虫小程序</title>
      <link href="//goldendictsetting/"/>
      <url>//goldendictsetting/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h2 id="有道翻译-for-GoldenDict-半完美取词显示插件"><a href="#有道翻译-for-GoldenDict-半完美取词显示插件" class="headerlink" title="有道翻译 for GoldenDict 半完美取词显示插件"></a>有道翻译 for GoldenDict 半完美取词显示插件</h2><p>说道linux里面好用的取词软件，不得不数goldendict很不错的，比好几年都没更新linux客户端的有道来说好用的多，毕竟ubuntu18下，有道qt已经存在不兼容，要么降qt版本，要么自己折腾对官方提供的deb安装包进行解包，然后进行修改以来环境的代码，再打包，太麻烦了，当然目前也有<a href="https://github.com/porterpan/youdaodict_5.5" target="_blank" rel="noopener">基于官方的有道词典打包好的支持ubuntu18系统</a>，可以去我的github下载直接安装就好了，但是打包后我发现一个问题，OCR屏幕取词，一天下来Python和取词插件会把你电脑内存占得满满的，结果就是，你的电脑很卡，所以还是转goldendict吧。</p> <ul> <li>下面高能</li> </ul> <p>将解决目前goldendict的网页引入有道的查词，界面各种不整洁，不友好的解决办法。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>原理是爬虫的，我是基于：完了，这是真的，原作者的代码我参考，忘了转移到我的github了，如果，原作看到了，记得给我留言，我加上你的参考地址啊，尴尬了</p> <h2 id="首先效果图如下图"><a href="#首先效果图如下图" class="headerlink" title="首先效果图如下图"></a>首先效果图如下图</h2><p><img src="/image1/goldendict_awesome.gif" alt="goldendict有道效果"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> goldendict </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.14 ubuntu16_18安装peek工具录制gif</title>
      <link href="//peektool/"/>
      <url>//peektool/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>在写一些博客文章中，一般的png，jpg格式的图片往往满足不了复杂的演示过程，这时peek软件就能很好的帮助我们完成gif文件的制作，并且peek还是一个轻量级的gif制作软件，值得推荐，但是我根据官方的ubuntu安装步骤，发现确实能够安装，但是容易出问题，这里我把我的安装方法写出来，供安装后录制保存就死机的朋友参考。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><ul> <li><p>获取deb包：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/phw/peek/releases/download/v0.7.2/peek-0.7.2-Linux.deb</span><br></pre></td></tr></table></figure> </li> <li><p>安装依赖：</p> </li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libsdl1.2debian ffmpeg libavdevice-ffmpeg56</span><br></pre></td></tr></table></figure> <ul> <li>安装peek：</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i peek-0.7.2-Linux.deb</span><br></pre></td></tr></table></figure> <h1 id="二、使用演示"><a href="#二、使用演示" class="headerlink" title="二、使用演示"></a>二、使用演示</h1><p><img src="/image1/Peek_yanshi.gif" alt="peek 软件安装演示效果"></p> <table> <thead> <tr> <th>已启用</th> <th>类型</th> <th>名称</th> <th>命令行</th> <th>图标</th> </tr> </thead> <tbody> <tr> <td>[v]</td> <td>html</td> <td>词典名称随意填</td> <td>/词典路径/wordtag.py %GDWORD%</td> <td>/图标路径/png.png</td> </tr> </tbody> </table><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> peek </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.12 vsftpd 文件配置</title>
      <link href="//vsftpdconf/"/>
      <url>//vsftpdconf/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>名称<br>vsftpd.conf - vsftpd的配置文件<br>描述</p> <p> vsftpd.conf可用于控制vsftpd行为的各个方面。默认情况下，vsftpd在/etc/vsftpd/vsftpd.conf位置查找此文件。但是，您可以通过为vsftpd指定命令行参数来覆盖它。命令行参数是vsftpd的配置文件的路径名。此行为很有用，因为您可能希望使用高级inetd（如 xinetd）以每个虚拟主机为基础启动vsftpd以及不同的配置文件。<br>格式</p> <blockquote> <p>vsftpd.conf的格式非常简单。每一行都是注释或指令。注释行以＃开头并被忽略。指令行的格式为：<br>选项=值</p> </blockquote> <p>重要的是要注意在选项，=和值之间放置任何空格是错误的。</p> <p>每个设置都有一个默认编译，可以在配置文件中修改。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br></pre></td><td class="code"><pre><span class="line">布尔选项</span><br><span class="line">下面是布尔选项列表。布尔选项的值可以设置为YES 或NO。</span><br><span class="line">allow_anon_ssl</span><br><span class="line">仅在ssl_enable处于活动状态时适用。如果设置为YES，则允许匿名用户使用安全SSL连接。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">anon_mkdir_write_enable</span><br><span class="line">如果设置为YES，则允许匿名用户在特定条件下创建新目录。为此，必须激活选项write_enable，并且匿名ftp用户必须具有父目录的写权限。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">anon_other_write_enable</span><br><span class="line">如果设置为YES，则允许匿名用户执行除上载和创建目录之外的写入操作，例如删除和重命名。通常不建议这样做，但包括完整性。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">anon_upload_enable</span><br><span class="line">如果设置为YES，则允许匿名用户在特定条件下上载文件。为此，必须激活选项write_enable，并且匿名ftp用户必须具有所需上载位置的写入权限。虚拟用户上传也需要此设置; 默认情况下，虚拟用户使用匿名（即最大限制）权限处理。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">anon_world_readable_only</span><br><span class="line">启用后，将只允许匿名用户下载世界可读的文件。这是认识到ftp用户可能拥有文件，尤其是在上传的情况下。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">anonymous_enable</span><br><span class="line">控制是否允许匿名登录。如果启用，则用户名ftp和anonymous都将被识别为匿名登录。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">ascii_download_enable</span><br><span class="line">启用后，ASCII模式数据传输将在下载时受到尊重。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">ascii_upload_enable</span><br><span class="line">启用后，上传时将遵循ASCII模式数据传输。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">async_abor_enable</span><br><span class="line">启用后，将启用称为“异步ABOR”的特殊FTP命令。只有不明智的FTP客户端才会使用此功能。此外，此功能难以处理，因此默认情况下禁用。遗憾的是，除非此功能可用，否则某些FTP客户端将在取消传输时挂起，因此您可能希望启用它。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">背景</span><br><span class="line">启用后，vsftpd以“监听”模式启动，vsftpd将为侦听器进程提供背景。即控制将立即返回到启动vsftpd的shell。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">check_shell</span><br><span class="line">注意！此选项仅对vsftpd的非PAM构建有效。如果禁用，vsftpd将不会检查/ etc / shells是否有用于本地登录的用户shell。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">chmod_enable</span><br><span class="line">启用后，允许使用SITE CHMOD命令。注意！这仅适用于本地用户。匿名用户永远不会使用SITE CHMOD。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">chown_uploads</span><br><span class="line">如果启用，则所有匿名上载的文件的所有权都将更改为设置chown_username中指定的用户。从管理方面，也许是安全方面来看，这很有用。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">chroot_list_enable</span><br><span class="line">如果激活，您可以在登录时提供其主目录中放置在chroot（）jail中的本地用户列表。如果chroot_local_user设置为YES，则含义略有不同。在这种情况下，列表将成为不被放置在chroot（）jail中的用户列表。默认情况下，包含此列表的文件是/ etc / vsftpd / chroot_list，但您可以使用chroot_list_file设置覆盖它。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">chroot_local_user</span><br><span class="line">如果设置为YES，则登录后本地用户（默认情况下）将放置在其主目录中的chroot（）jail中。警告：此选项具有安全隐患，尤其是在用户具有上载权限或shell访问权限的情况下。只有在您知道自己在做什么时才启用。请注意，这些安全隐患不是vsftpd特定的。它们适用于所有提供将本地用户放在chroot（）jail中的FTP守护进程。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">connect_from_port_20</span><br><span class="line">这可以控制PORT样式数据连接是否在服务器计算机上使用端口<span class="number">20</span>（ftp-data）。出于安全原因，一些客户可能会坚持认为是这种情况。相反，禁用此选项可使vsftpd以较低的权限运行。</span><br><span class="line">默认值：NO（但是示例配置文件启用它）</span><br><span class="line"></span><br><span class="line">debug_ssl</span><br><span class="line">如果为true，则将OpenSSL连接诊断转储到vsftpd日志文件。（在v2<span class="number">.0</span><span class="number">.6</span>中添加）。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">delete_failed_uploads</span><br><span class="line">如果为true，则删除任何失败的上载文件。（在v2<span class="number">.0</span><span class="number">.7</span>中添加）。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">deny_email_enable</span><br><span class="line">如果激活，您可能会提供一个匿名密码电子邮件响应列表，导致登录被拒绝。默认情况下，包含此列表的文件是/ etc / vsftpd / banned_emails，但您可以使用banned_email_file设置覆盖它。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">dirlist_enable</span><br><span class="line">如果设置为NO，则所有目录列表命令都将拒绝权限。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">dirmessage_enable</span><br><span class="line">如果启用，FTP服务器的用户首次进入新目录时可以显示消息。默认情况下，会扫描目录以查找文件.message，但可以使用配置设置message_file覆盖该目录。</span><br><span class="line">默认值：NO（但是示例配置文件启用它）</span><br><span class="line"></span><br><span class="line">download_enable</span><br><span class="line">如果设置为NO，则所有下载请求都将拒绝权限。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">dual_log_enable</span><br><span class="line">如果启用，则会并行生成两个日志文件，默认情况下为/ var / log / xferlog和/var/log/vsftpd.log。前者是一个wu-ftpd样式的传输日志，可以通过标准工具解析。后者是vsftpd自己的样式日志。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">force_dot_files</span><br><span class="line">如果激活，则以。开头的文件和目录。即使客户端未使用“a”标志，也将显示在目录列表中。此覆盖不包括“。” 和“..”条目。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">force_anon_data_ssl</span><br><span class="line">仅在激活ssl_enable时适用。如果激活，则强制所有匿名登录使用安全SSL连接，以便在数据连接上发送和接收数据。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">force_anon_logins_ssl</span><br><span class="line">仅在激活ssl_enable时适用。如果激活，则强制所有匿名登录使用安全SSL连接以发送密码。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">force_local_data_ssl</span><br><span class="line">仅在激活ssl_enable时适用。如果激活，则强制所有非匿名登录使用安全SSL连接，以便在数据连接上发送和接收数据。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">force_local_logins_ssl</span><br><span class="line">仅在激活ssl_enable时适用。如果激活，则强制所有非匿名登录使用安全SSL连接以发送密码。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">guest_enable</span><br><span class="line">如果启用，则所有非匿名登录都被归类为“访客”登录。guest 虚拟机登录将重新映射到guest_username设置中指定的用户。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">hide_ids</span><br><span class="line">如果启用，目录列表中的所有用户和组信息将显示为“ftp”。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">implicit_ssl</span><br><span class="line">如果启用，则SSL握手是所有连接（FTPS协议）的首要任务。要支持显式SSL和/或纯文本，还应运行单独的vsftpd侦听器进程。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">听</span><br><span class="line">如果启用，vsftpd将以独立模式运行。这意味着不能从某种类型的inetd运行vsftpd。相反，vsftpd可执行文件直接运行一次。然后，vsftpd将负责监听和处理传入的连接。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">listen_ipv6</span><br><span class="line">与listen参数一样，除了vsftpd将侦听IPv6套接字而不是IPv4套接字。此参数和listen参数是互斥的。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">local_enable</span><br><span class="line">控制是否允许本地登录。如果启用，则可以使用/ etc / passwd中的普通用户帐户（或PAM配置引用的任何位置）登录。必须启用此功能才能使任何非匿名登录工作，包括虚拟用户。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">lock_upload_files</span><br><span class="line">启用后，所有上载都会继续对上载文件进行写锁定。所有下载都继续对下载文件进行共享读锁定。警告！在启用此功能之前，请注意恶意阅读器可能会使想要添加文件的作者感到饥饿。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">log_ftp_protocol</span><br><span class="line">启用后，将记录所有FTP请求和响应，前提是未启用xferlog_std_format选项。对调试很有用。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">ls_recurse_enable</span><br><span class="line">启用后，此设置将允许使用“ls -R”。这是一个小的安全风险，因为大型站点顶层的ls -R可能会消耗大量资源。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">mdtm_write</span><br><span class="line">启用后，此设置将允许MDTM设置文件修改时间（根据通常的访问检查）。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">no_anon_password</span><br><span class="line">启用后，这会阻止vsftpd请求匿名密码 - 匿名用户将直接登录。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">no_log_lock</span><br><span class="line">启用后，这会阻止vsftpd在写入日志文件时进行文件锁定。通常不应启用此选项。它的存在是为了解决操作系统错误，例如Solaris / Veritas文件系统组合，有时会出现试图锁定日志文件的挂起。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">one_process_model</span><br><span class="line">如果您有Linux <span class="number">2.4</span>内核，则可以使用不同的安全模型，每个连接只使用一个进程。它是一种不太纯粹的安全模型，但会提高您的性能。除非您知道自己在做什么，并且您的网站支持大量同时连接的用户，否则您真的不想启用它。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">passwd_chroot_enable</span><br><span class="line">如果启用，则与chroot_local_user一起，然后可以基于每个用户指定chroot（）jail位置。每个用户的jail都是从/ etc / passwd中的主目录字符串派生的。主目录字符串中出现/./表示jail位于路径中的特定位置。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">pasv_addr_resolve</span><br><span class="line">如果要在pasv_address选项中使用主机名（而不是IP地址），请设置为YES 。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">pasv_enable</span><br><span class="line">如果要禁用PASV获取数据连接的方法，请设置为NO。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">pasv_promiscuous</span><br><span class="line">如果要禁用PASV安全检查，则设置为YES，以确保数据连接源自与控制连接相同的IP地址。只有在你知道自己在做什么的情况下才能启用 对此的唯一合法用途是采用某种形式的安全隧道方案，或者可能是为了促进FXP支持。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">port_enable</span><br><span class="line">如果要禁止使用PORT方法获取数据连接，请设置为NO。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">port_promiscuous</span><br><span class="line">如果要禁用PORT安全检查，则设置为YES，以确保传出数据连接只能连接到客户端。只有在你知道自己在做什么的情况下才能启用</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">require_cert</span><br><span class="line">如果设置为yes，则需要所有SSL客户端连接来提供客户端证书。应用于此证书的验证程度由validate_cert控制（在v2<span class="number">.0</span><span class="number">.6</span>中添加）。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">require_ssl_reuse</span><br><span class="line">如果设置为yes，则需要所有SSL数据连接以展示SSL会话重用（这证明它们知道与控制通道相同的主密钥）。虽然这是一个安全的默认设置，但它可能会破坏许多FTP客户端，因此您可能希望禁用它。有关后果的讨论，请参阅 http://scarybeastsecurity.blogspot.com/<span class="number">2009</span>/<span class="number">02</span>/vsftpd<span class="number">-210</span>-released.html（在v2<span class="number">.1</span><span class="number">.0</span>中添加）。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">reverse_lookup_enable</span><br><span class="line">如果希望vsftpd在pam身份验证之前将ip地址转换为主机名，则设置为YES。如果您使用包含主机名的pam_access，这将非常有用。如果您希望vsftpd在某些主机名的反向查找可用并且名称服务器暂时不响应的环境中运行，则应将其设置为NO以避免性能问题。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">run_as_launching_user</span><br><span class="line">如果您希望vsftpd作为启动vsftpd的用户运行，则设置为YES。在根访问不可用的情况下，这很有用。大规模警告！除非您完全知道自己在做什么，否则不要启用此选项，因为天真地使用此选项会产生大量安全问题。具体来说，当设置此选项时，vsftpd不会/不能使用chroot技术来限制文件访问（即使由root启动）。一个糟糕的替代品可能是使用deny_file 设置如&#123;/*,*..*&#125;，但这种可靠性无法与chroot相比，不应该依赖。如果使用此选项，则适用对其他选项的许多限制。例如，需要权限的选项（例如非匿名登录，上载所有权更改，从端口<span class="number">20</span>连接以及小于<span class="number">1024</span>的侦听端口）预计不起作用。其他选项可能会受到影响。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">secure_email_list_enable</span><br><span class="line">如果您只想接受匿名登录的指定电子邮件密码列表，请设置为YES。这非常有用，可以在不需要虚拟用户的情况下限制对低安全性内容的访问。启用后，将禁止匿名登录，除非在email_password_file设置指定的文件中列出了提供的密码。文件格式是每行一个密码，没有额外的空格。默认文件名是/ etc / vsftpd / email_passwords。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">session_support</span><br><span class="line">这可以控制vsftpd是否尝试维护登录会话。如果vsftpd正在维护会话，它将尝试更新utmp和wtmp。如果使用PAM进行身份验证，它也会打开pam_session，并且只有在注销时关闭它。如果您不需要会话日志记录，您可能希望禁用此功能，并希望为vsftpd提供更多机会以更少的进程和/或更少的权限运行。注 - utmp和wtmp支持仅在启用PAM的构建中提供。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">setproctitle_enable</span><br><span class="line">如果启用，vsftpd将尝试在系统进程列表中显示会话状态信息。换句话说，报告的进程名称将更改以反映vsftpd会话正在执行的操作（空闲，下载等）。出于安全考虑，您可能希望将其关闭。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">ssl_enable</span><br><span class="line">如果启用，并且vsftpd是针对OpenSSL编译的，则vsftpd将通过SSL支持安全连接。这适用于控制连接（包括登录）以及数据连接。您还需要一个支持SSL的客户端。注意！！请注意启用此选项。只有在需要时才启用它。vsftpd无法保证OpenSSL库的安全性。通过启用此选项，您声明您信任已安装的OpenSSL库的安全性。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">ssl_request_cert</span><br><span class="line">如果启用，vsftpd会要求（但不一定需要;见 require_cert）一个证书上的传入 SSL 连接。通常这不应该造成任何麻烦，但IBM zOS似乎有问题。（v2<span class="number">.0</span><span class="number">.7</span>中的新功能）。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">ssl_sslv2</span><br><span class="line">仅在激活ssl_enable时适用。如果启用，此选项将允许SSL v2协议连接。TLS v1连接是首选。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">ssl_sslv3</span><br><span class="line">仅在激活ssl_enable时适用。如果启用，此选项将允许SSL v3协议连接。TLS v1连接是首选。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">ssl_tlsv1</span><br><span class="line">仅在激活ssl_enable时适用。如果启用，此选项将允许TLS v1协议连接。TLS v1连接是首选。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">strict_ssl_read_eof</span><br><span class="line">如果启用，则需要通过SSL终止SSL数据上载，而不是套接字上的EOF。需要此选项以确保攻击者未使用伪造的TCP FIN过早终止上载。不幸的是，默认情况下它没有启用，因为很少有客户端能够正确使用它。（v2<span class="number">.0</span><span class="number">.7</span>中的新功能）。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">strict_ssl_write_shutdown</span><br><span class="line">如果启用，则需要通过SSL终止SSL数据下载，而不是套接字上的EOF。默认情况下这是关闭的，因为我无法找到执行此操作的单个FTP客户端。这是次要的。它影响的是我们判断客户是否确认完全收到该文件的能力。即使没有此选项，客户端也能够检查下载的完整性。（v2<span class="number">.0</span><span class="number">.7</span>中的新功能）。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">syslog_enable</span><br><span class="line">如果启用，那么将转到/var/log/vsftpd.log的任何日志输出都将转到系统日志。记录在FTPD工具下完成。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">tcp_wrappers的</span><br><span class="line">如果启用，并且vsftpd是使用tcp_wrappers支持编译的，则传入连接将通过tcp_wrappers访问控制提供。此外，还有一种基于每个IP的配置机制。如果tcp_wrappers设置VSFTPD_LOAD_CONF环境变量，则vsftpd会话将尝试加载此变量中指定的vsftpd配置文件。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">text_userdb_names</span><br><span class="line">默认情况下，数字ID显示在目录列表的用户和组字段中。您可以通过启用此参数来获取文本名称。出于性能原因，它默认是关闭的。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">tilde_user_enable</span><br><span class="line">如果启用，vsftpd将尝试解析路径名，例如~chris / pics，即代字号后跟用户名。请注意，vsftpd将始终解析路径名〜和〜/ something（在这种情况下，〜解析为初始登录目录）。请注意，只有在_current_ chroot（）jail中找到文件/ etc / passwd时，〜用户路径才会解析 。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">use_localtime</span><br><span class="line">如果启用，vsftpd将显示当前时区中包含时间的目录列表。默认为显示GMT。MDTM FTP命令返回的时间也受此选项的影响。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">use_sendfile</span><br><span class="line">用于测试在平台上使用sendfile（）系统调用的相对好处的内部设置。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">userlist_deny</span><br><span class="line">如果激活userlist_enable，则检查此选项。如果将此设置设置为NO，则将拒绝用户登录，除非它们明确列在userlist_file指定的文件中。拒绝登录时，将在要求用户输入密码之前发出拒绝。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">userlist_enable</span><br><span class="line">如果启用，vsftpd将从userlist_file给出的文件名加载用户名列表。如果用户尝试使用此文件中的名称登录，则在要求输入密码之前，他们将被拒绝。这可能有助于防止传输明文密码。另请参见 userlist_deny。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">validate_cert</span><br><span class="line">如果设置为yes，则收到的所有SSL客户端证书都必须验证OK。自签名证书不构成OK验证。（v2<span class="number">.0</span><span class="number">.6</span>中的新功能）。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">userlist_log</span><br><span class="line">如果激活userlist_enable，则检查此选项。如果启用，将记录基于用户列表的每个登录拒绝。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">virtual_use_local_privs</span><br><span class="line">如果启用，虚拟用户将使用与本地用户相同的权限。默认情况下，虚拟用户将使用与匿名用户相同的权限，这往往更具限制性（特别是在写访问方面）。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">WRITE_ENABLE</span><br><span class="line">这可以控制是否允许任何更改文件系统的FTP命令。这些命令是：STOR，DELE，RNFR，RNTO，MKD，RMD，APPE和SITE。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">xferlog_enable</span><br><span class="line">如果启用，将维护一个日志文件，详细说明上载和下载。默认情况下，此文件将放在/var/log/vsftpd.log中，但可以使用配置设置vsftpd_log_file覆盖此位置。</span><br><span class="line">默认值：NO（但是示例配置文件启用它）</span><br><span class="line"></span><br><span class="line">xferlog_std_format</span><br><span class="line">如果启用，传输日志文件将以标准xferlog格式写入，如wu-ftpd所使用。这很有用，因为您可以重用现有的传输统计信息生成器 但是，默认格式更具可读性。此样式的日志文件的缺省位置是/ var / log / xferlog，但您可以使用xferlog_file设置进行更改。</span><br><span class="line">默认值：NO</span><br><span class="line"></span><br><span class="line">isolate_network</span><br><span class="line">如果启用，请使用CLONE_NEWNET隔离不受信任的进程，以便它们不能执行任意connect（），而是必须向特权进程请求套接字（必须禁用port_promiscuous）。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">隔离</span><br><span class="line">如果启用，请使用CLONE_NEWPID和CLONE_NEWIPC将进程隔离到其ipc和pid名称空间。因此，分离的流程不能相互交互。</span><br><span class="line">默认值：是</span><br><span class="line"></span><br><span class="line">数字选项</span><br><span class="line">以下是数字选项列表。必须将数字选项设置为非负整数。支持八进制数，以方便umask选项。要指定八进制数，请使用<span class="number">0</span>作为数字的第一个数字。</span><br><span class="line">accept_timeout</span><br><span class="line">远程客户端与PASV样式数据连接建立连接的超时（以秒为单位）。</span><br><span class="line">默认值：<span class="number">60</span></span><br><span class="line"></span><br><span class="line">anon_max_rate</span><br><span class="line">匿名客户端允许的最大数据传输速率（以字节/秒为单位）。</span><br><span class="line">默认值：<span class="number">0</span>（无限制）</span><br><span class="line"></span><br><span class="line">anon_umask</span><br><span class="line">为匿名用户设置用于文件创建的umask的值。注意！如果要指定八进制值，请记住“<span class="number">0</span>”前缀，否则该值将被视为基数为<span class="number">10</span>的整数！</span><br><span class="line">默认值：<span class="number">077</span></span><br><span class="line"></span><br><span class="line">chown_upload_mode</span><br><span class="line">要强制进行chown（）ed匿名上传的文件模式。（在v2<span class="number">.0</span><span class="number">.6</span>中添加）。</span><br><span class="line">默认值：<span class="number">0600</span></span><br><span class="line"></span><br><span class="line">connect_timeout</span><br><span class="line">远程客户端响应PORT样式数据连接的超时（以秒为单位）。</span><br><span class="line">默认值：<span class="number">60</span></span><br><span class="line"></span><br><span class="line">data_connection_timeout</span><br><span class="line">超时（以秒为单位），大致是我们允许数据传输停止而没有进度的最长时间。如果超时触发，则启动远程客户端。</span><br><span class="line">默认值：<span class="number">300</span></span><br><span class="line"></span><br><span class="line">delay_failed_login</span><br><span class="line">报告登录失败之前暂停的秒数。</span><br><span class="line">默认值：<span class="number">1</span></span><br><span class="line"></span><br><span class="line">delay_successful_login</span><br><span class="line">允许成功登录之前暂停的秒数。</span><br><span class="line">默认值：<span class="number">0</span></span><br><span class="line"></span><br><span class="line">file_open_mode</span><br><span class="line">用于创建上载文件的权限。Umasks应用于此值之上。如果您希望上传的文件可执行，您可能希望更改为<span class="number">0777</span>。</span><br><span class="line">默认值：<span class="number">0666</span></span><br><span class="line"></span><br><span class="line">ftp_data_port</span><br><span class="line">PORT样式连接源自的端口（只要命名不佳的connect_from_port_20已启用）。</span><br><span class="line">默认值：<span class="number">20</span></span><br><span class="line"></span><br><span class="line">idle_session_timeout</span><br><span class="line">超时（以秒为单位），即远程客户端在FTP命令之间可能花费的最长时间。如果超时触发，则启动远程客户端。</span><br><span class="line">默认值：<span class="number">300</span></span><br><span class="line"></span><br><span class="line">listen_port</span><br><span class="line">如果vsftpd处于独立模式，则它将侦听传入FTP连接的端口。</span><br><span class="line">默认值：<span class="number">21</span></span><br><span class="line"></span><br><span class="line">local_max_rate</span><br><span class="line">本地身份验证用户允许的最大数据传输速率（以字节/秒为单位）。</span><br><span class="line">默认值：<span class="number">0</span>（无限制）</span><br><span class="line"></span><br><span class="line">local_umask</span><br><span class="line">为本地用户设置用于文件创建的umask的值。注意！如果要指定八进制值，请记住“<span class="number">0</span>”前缀，否则该值将被视为基数为<span class="number">10</span>的整数！</span><br><span class="line">默认值：<span class="number">077</span></span><br><span class="line"></span><br><span class="line">max_clients</span><br><span class="line">如果vsftpd处于独立模式，则这是可以连接的最大客户端数。连接的任何其他客户端都将收到错误消息。值<span class="number">0</span>关闭限制。</span><br><span class="line">默认值：<span class="number">2000</span></span><br><span class="line"></span><br><span class="line">max_login_fails</span><br><span class="line">在此多次登录失败后，会话被终止。</span><br><span class="line">默认值：<span class="number">3</span></span><br><span class="line"></span><br><span class="line">max_per_ip</span><br><span class="line">如果vsftpd处于独立模式，则这是可以从同一源Internet地址连接的最大客户端数。如果客户端超过此限制，则会收到错误消息。值<span class="number">0</span>关闭限制。</span><br><span class="line">默认值：<span class="number">50</span></span><br><span class="line"></span><br><span class="line">pasv_max_port</span><br><span class="line">为PASV样式数据连接分配的最大端口。可用于指定窄端口范围以协助防火墙。</span><br><span class="line">默认值：<span class="number">0</span>（使用任何端口）</span><br><span class="line"></span><br><span class="line">pasv_min_port</span><br><span class="line">为PASV样式数据连接分配的最小端口。可用于指定窄端口范围以协助防火墙。</span><br><span class="line">默认值：<span class="number">0</span>（使用任何端口）</span><br><span class="line"></span><br><span class="line">trans_chunk_size</span><br><span class="line">您可能不想更改此设置，但请尝试将其设置为<span class="number">8192</span>，以获得更加平滑的带宽限制器。</span><br><span class="line">默认值：<span class="number">0</span>（让vsftpd选择合理的设置）</span><br><span class="line"></span><br><span class="line">字符串选项</span><br><span class="line">以下是字符串选项列表。</span><br><span class="line">anon_root</span><br><span class="line">此选项表示vsftpd在匿名登录后尝试更改的目录。失败被默默地忽略了。</span><br><span class="line">默认值:(无）</span><br><span class="line"></span><br><span class="line">banned_email_file</span><br><span class="line">此选项是包含不允许的匿名电子邮件密码列表的文件的名称。如果启用了选项deny_email_enable，则会查询此文件 。</span><br><span class="line">默认值：/ etc / vsftpd / banned_emails</span><br><span class="line"></span><br><span class="line">banner_file</span><br><span class="line">此选项是包含要在有人连接到服务器时显示的文本的文件的名称。如果设置，它将覆盖ftpd_banner选项提供的标题字符串 。</span><br><span class="line">默认值:(无）</span><br><span class="line"></span><br><span class="line">ca_certs_file</span><br><span class="line">此选项是用于加载证书颁发机构证书的文件的名称，用于验证客户端证书。加载的证书也会通告给客户端，以满足TLSv1<span class="number">.0</span>客户端的需求，例如z / OS FTP客户端。遗憾的是，由于vsftpd使用受限制的文件系统空间（chroot），因此未使用默认的SSL CA证书路径。（在v2<span class="number">.0</span><span class="number">.6</span>中添加）。</span><br><span class="line">默认值:(无）</span><br><span class="line"></span><br><span class="line">chown_username</span><br><span class="line">这是获得匿名上传文件所有权的用户的名称。仅当设置了另一个选项chown_uploads时，此选项才有意义。</span><br><span class="line">默认值：root</span><br><span class="line"></span><br><span class="line">chroot_list_file</span><br><span class="line">该选项是包含本地用户列表的文件的名称，该列表将放置在其主目录中的chroot（）jail中。仅当启用了选项chroot_list_enable时，此选项才有意义。如果启用了选项chroot_local_user，则列表文件将成为不放置在chroot（）jail中的用户列表。</span><br><span class="line">默认值：/etvsftpd.confc/vsftpd.chroot_list</span><br><span class="line"></span><br><span class="line">cmds_allowed</span><br><span class="line">此选项指定允许的FTP命令的逗号分隔列表（登录后.USER，PASS和QUIT以及其他始终允许在登录前使用）。其他命令被拒绝。这是一种真正锁定FTP服务器的强大方法。示例：cmds_allowed = PASV，RETR，QUIT</span><br><span class="line">默认值:(无）</span><br><span class="line"></span><br><span class="line">cmds_denied</span><br><span class="line">此选项指定以逗号分隔的拒绝FTP命令列表（登录后。始终允许登录前使用USER，PASS，QUIT等）。如果此命令和cmds_allowed上都出现命令，则拒绝优先。（在v2<span class="number">.1</span><span class="number">.0</span>中添加）。</span><br><span class="line">默认值:(无）</span><br><span class="line"></span><br><span class="line">deny_file</span><br><span class="line">此选项可用于设置文件名（和目录名称等）的模式，这些模式不应以任何方式访问。受影响的项目不会被隐藏，但任何尝试对它们做任何事情（下载，更改到目录，影响目录内的某些内容等）都将被拒绝。此选项非常简单，不应用于严格的访问控制 - 应优先使用文件系统的权限。但是，此选项在某些虚拟用户设置中可能很有用。特别要注意的是，如果文件名可以通过各种名称访问（可能是由于符号链接或硬链接），那么必须注意拒绝访问所有名称。如果项目的名称包含hide_file给出的字符串，或者它们与hide_file指定的正则表达式匹配，则将拒绝访问项目。请注意，vsftpd<span class="string">' 正则表达式匹配代码是一个简单的实现，它是完整正则表达式功能的子集。因此，您需要仔细而详尽地测试此选项的任何应用程序。并且由于其更高的可靠性，建议您对任何重要的安全策略使用文件系统权限。支持的正则表达式语法是任意数量的* ,? 和unnested &#123;，&#125;运算符。仅在路径的最后一个组件上支持正则表达式匹配，例如a / b /？支持，但/？/ c不支持。示例：deny_file = &#123;*。mp3，*。mov，.private&#125; 并且由于其更高的可靠性，建议您对任何重要的安全策略使用文件系统权限。支持的正则表达式语法是任意数量的* ,? 和unnested &#123;，&#125;运算符。仅在路径的最后一个组件上支持正则表达式匹配，例如a / b /？支持，但/？/ c不支持。示例：deny_file = &#123;*。mp3，*。mov，.private&#125; 并且由于其更高的可靠性，建议您对任何重要的安全策略使用文件系统权限。支持的正则表达式语法是任意数量的* ,? 和unnested &#123;，&#125;运算符。仅在路径的最后一个组件上支持正则表达式匹配，例如a / b /？支持，但/？/ c不支持。示例：deny_file = &#123;*。mp3，*。mov，.private&#125;</span></span><br><span class="line"><span class="string">默认值:(无）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dsa_cert_file</span></span><br><span class="line"><span class="string">此选项指定用于SSL加密连接的DSA证书的位置。</span></span><br><span class="line"><span class="string">默认值:(无 - RSA证书就足够了）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dsa_private_key_file</span></span><br><span class="line"><span class="string">此选项指定用于SSL加密连接的DSA私钥的位置。如果未设置此选项，则预期私钥与证书位于同一文件中。</span></span><br><span class="line"><span class="string">默认值:(无）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">email_password_file</span></span><br><span class="line"><span class="string">此选项可用于提供secure_email_list_enable设置使用的备用文件。</span></span><br><span class="line"><span class="string">默认值：/ etc / vsftpd / email_passwords</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ftp_username</span></span><br><span class="line"><span class="string">这是我们用于处理匿名FTP的用户的名称。该用户的主目录是匿名FTP区域的根目录。</span></span><br><span class="line"><span class="string">默认值：ftp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ftpd_banner</span></span><br><span class="line"><span class="string">此字符串选项允许您在首次进入连接时覆盖vsftpd显示的问候语横幅。</span></span><br><span class="line"><span class="string">默认值:(无 - 显示默认的vsftpd横幅）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">guest_username</span></span><br><span class="line"><span class="string">有关guest虚拟机登录的说明，请参阅boolean设置guest_enable。此设置是访客用户映射到的真实用户名。</span></span><br><span class="line"><span class="string">默认值：ftp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">hide_file</span></span><br><span class="line"><span class="string">此选项可用于设置文件名（和目录名称等）的模式，这些模式应该从目录列表中隐藏。尽管被隐藏，但是知道实际使用的名称的客户端可以完全访问文件/目录等。如果项目的名称包含hide_file给出的字符串，或者它们与hide_file指定的正则表达式匹配，则将隐藏项目。请注意，vsftpd的正则表达式匹配代码是一个简单的实现，它是完整正则表达式功能的子集。有关具体支持的正则表达式语法的详细信息，请参阅deny_file。示例：hide_file = &#123;*。mp3，.hidden，hide *，h？&#125;</span></span><br><span class="line"><span class="string">默认值:(无）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">listen_address</span></span><br><span class="line"><span class="string">如果vsftpd处于独立模式，则此设置可能会覆盖（所有本地接口的）默认侦听地址。提供数字IP地址。</span></span><br><span class="line"><span class="string">默认值:(无）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">listen_address6</span></span><br><span class="line"><span class="string">与listen_address类似，但指定IPv6侦听器的默认侦听地址（如果设置了listen_ipv6，则使用该地址）。格式是标准IPv6地址格式。</span></span><br><span class="line"><span class="string">默认值:(无）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">local_root</span></span><br><span class="line"><span class="string">此选项表示vsftpd在本地（即非匿名）登录后尝试更改的目录。失败被默默地忽略了。</span></span><br><span class="line"><span class="string">默认值:(无）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">message_file</span></span><br><span class="line"><span class="string">此选项是输入新目录时我们查找的文件的名称。内容显示给远程用户。仅当启用了选项dirmessage_enable时，此选项才有意义。</span></span><br><span class="line"><span class="string">默认值：.message</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">nopriv_user</span></span><br><span class="line"><span class="string">这是vsftpd在完全没有特权的情况下使用的用户名。请注意，这应该是专用用户，而不是任何人。在大多数机器上，用户没有倾向于使用很多重要的东西。</span></span><br><span class="line"><span class="string">默认值：没人</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pam_service_name</span></span><br><span class="line"><span class="string">此字符串是vsftpd将使用的PAM服务的名称。</span></span><br><span class="line"><span class="string">默认值：ftp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pasv_address设置</span></span><br><span class="line"><span class="string">使用此选项可覆盖vsftpd将响应PASV命令而通告的IP地址。提供数字IP地址，除非 启用了pasv_addr_resolve，在这种情况下，您可以提供在启动时为您解析的DNS主机名。</span></span><br><span class="line"><span class="string">默认值:(无 - 地址来自传入的连接套接字）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rsa_cert_file</span></span><br><span class="line"><span class="string">此选项指定用于SSL加密连接的RSA证书的位置。</span></span><br><span class="line"><span class="string">默认值：/usr/share/ssl/certs/vsftpd.pem</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rsa_private_key_file</span></span><br><span class="line"><span class="string">此选项指定用于SSL加密连接的RSA私钥的位置。如果未设置此选项，则预期私钥与证书位于同一文件中。</span></span><br><span class="line"><span class="string">默认值:(无）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">secure_chroot_dir</span></span><br><span class="line"><span class="string">此选项应该是空目录的名称。此外，ftp用户不应该写入该目录。此目录有时用作安全chroot（）jail，vsftpd不需要文件系统访问。</span></span><br><span class="line"><span class="string">默认值：/ usr / share / empty</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">的ssl_ciphers</span></span><br><span class="line"><span class="string">此选项可用于选择vsftpd允许加密SSL连接的SSL密码。有关更多详细信息，请参见密码手册页。请注意，限制密码可能是一种有用的安全预防措施，因为它可以防止恶意远程方强制使用已发现问题的密码。</span></span><br><span class="line"><span class="string">默认值：DES-CBC3-SHA</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">user_config_dir</span></span><br><span class="line"><span class="string">这个功能强大的选项允许基于每个用户覆盖手册页中指定的任何配置选项。用法很简单，最好用一个例子来说明。如果将user_config_dir设置为/ etc / vsftpd / user_conf然后以用户“chris”身份登录，则vsftpd将在会话期间应用文件/ etc / vsftpd / user_conf / chris中的设置。此文件的格式详见本手册页！请注意，并非所有设置都是基于每个用户有效。例如，许多设置仅在用户会话启动之前。不会影响每个用户的任何行为的设置示例包括listen_address，banner_file，max_per_ip，max_clients，xferlog_file等。</span></span><br><span class="line"><span class="string">默认值:(无）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">user_sub_token</span></span><br><span class="line"><span class="string">此选项与虚拟用户结合使用非常有用。它用于根据模板为每个虚拟用户自动生成主目录。例如，如果通过guest_username指定的真实用户的主目录是/ home / virtual / $ USER，并且user_sub_token设置为 $ USER，那么当虚拟用户fred登录时，他将结束（通常是chroot（）'</span>ed ）在目录/ home / virtual / fred中。如果local_root包含user_sub_token，则此选项也会生效。</span><br><span class="line">默认值:(无）</span><br><span class="line"></span><br><span class="line">userlist_file</span><br><span class="line">此选项是userlist_enable选项处于活动状态时加载的文件的名称。</span><br><span class="line">默认值：/ etc / vsftpd / user_list</span><br><span class="line"></span><br><span class="line">vsftpd_log_file</span><br><span class="line">此选项是我们编写vsftpd样式日志文件的文件的名称。仅当设置了选项xferlog_enable并且未设置xferlog_std_format时， 才会写入此日志。或者，如果已设置选项dual_log_enable，则会写入。另一个复杂因素 - 如果您设置了syslog_enable，则不会写入此文件，而是将输出发送到系统日志。</span><br><span class="line">默认值：/var/log/vsftpd.log</span><br><span class="line"></span><br><span class="line">xferlog_file</span><br><span class="line">此选项是我们编写wu-ftpd样式传输日志的文件的名称。仅当 设置了xferlog_enable选项以及xferlog_std_format时才会写入传输日志。或者，如果已设置选项dual_log_enable，则会写入。</span><br><span class="line">默认值：/ var / log / xferlog</span><br></pre></td></tr></table></figure> <p>作者<br><a href="mailto:scarybeasts@gmail.com" target="_blank" rel="noopener">scarybeasts@gmail.com</a></p> <p><a href="https://linux.die.net/man/5/vsftpd.conf" target="_blank" rel="noopener">英文参考文件位置</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsftpd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.11 sublime text3插件介绍</title>
      <link href="//sublimeIntro/"/>
      <url>//sublimeIntro/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h2 id="Package-Control-包控制安装"><a href="#Package-Control-包控制安装" class="headerlink" title="Package Control 包控制安装"></a>Package Control 包控制安装</h2><p>最简单的安装方法是通过 Sublime Text 控制台。控制台可以通过 ctrl +` 快捷方式 或 View &gt; Show Console 菜单来开启/关闭。 打开后，将适用于你 Sublime Text 版本的 Python 代码粘贴到控制台中。</p> <p>/Sublime Text 3 包控制安装代码/</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os,hashlib; </span><br><span class="line">h = <span class="string">'df21e130d211cfc94d9b0905775a7c0f'</span> + <span class="string">'1e3d39e33b79698005270310898eea76'</span>; </span><br><span class="line">pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); </span><br><span class="line">urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); </span><br><span class="line">by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read();</span><br><span class="line">dh = hashlib.sha256(by).hexdigest(); </span><br><span class="line">print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) </span><br><span class="line"><span class="keyword">if</span> dh != h </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">open(os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by)</span><br></pre></td></tr></table></figure> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>通过Package Control 包控制安装插件<br>Package Control（包控制）是安装下面列出的所有插件和主题的最佳方式。继续，在包控制中安装插件。通过 Package Control（包控制）安装插件和主题很简单：</p> <p>使用方法：进入命令面板（ctrl + shift+ p），然后键入 install。<br>然后键入 remove 删除。</p> <ul> <li>Emmet</li> </ul> <p>Emmet绝对的节省时间。您可以轻松快速地编写HTML。</p> <ul> <li>BracketHighlighter</li> </ul> <h2 id="该插件提供行数列高亮的各种配对的语法符号。"><a href="#该插件提供行数列高亮的各种配对的语法符号。" class="headerlink" title="该插件提供行数列高亮的各种配对的语法符号。"></a>该插件提供行数列高亮的各种配对的语法符号。</h2><p>（愚人码头注：就是将配对的括号等显示在行数列上</p> <ul> <li>Colorpicker</li> </ul> <h2 id="使用一个取色器改变颜色"><a href="#使用一个取色器改变颜色" class="headerlink" title="使用一个取色器改变颜色"></a>使用一个取色器改变颜色</h2><p>使用方法: ctrl + shift + c</p> <ul> <li>DocBlockr</li> </ul> <blockquote> <p>一个真正简单的方式来轻松地创建许多语言包括JavaScript，PHP和CoffeeScript的文档块。只要在函数的上面输入/**，按Tab就可以了。DocBlockr会观察函数需要的变量名和类型，并创建文档块。</p> </blockquote> <ul> <li>SidebarEnhancements</li> </ul> <h2 id="扩展文件树右键功能"><a href="#扩展文件树右键功能" class="headerlink" title="扩展文件树右键功能"></a>扩展文件树右键功能</h2><ul> <li>CSSComb</li> </ul> <h2 id="用来给CSS属性进行排序的格式化"><a href="#用来给CSS属性进行排序的格式化" class="headerlink" title="用来给CSS属性进行排序的格式化"></a>用来给CSS属性进行排序的格式化</h2><p>注：因为Csscomb的快捷键是shift+ctrl+c，可能与其他快捷键冲突<br>你可以去Preferences–&gt;插件设置–&gt;CssComb–&gt;key-Bindings-Defallut设置</p> <ul> <li>ColorHighlighter</li> </ul> <blockquote> <p> 它可以展示你所选择的颜色代码（像“#FFFFFF”, “rgb(255,255,255)”, “white”）的真正颜色。同时它还包含一个颜色选择器让你可以方便地更改颜色。</p> </blockquote> <h2 id="使用：快捷键Windows-ctrl-shift-w"><a href="#使用：快捷键Windows-ctrl-shift-w" class="headerlink" title="使用：快捷键Windows: ctrl+shift+w"></a>使用：快捷键Windows: ctrl+shift+w</h2><ul> <li>Trailing spaces</li> </ul> <h2 id="功能：检测并一键去除代码中多余的空格"><a href="#功能：检测并一键去除代码中多余的空格" class="headerlink" title="功能：检测并一键去除代码中多余的空格"></a>功能：检测并一键去除代码中多余的空格</h2><p>使用：安装插件并重启，即可自动提示多余空格。一键删除多余空格：CTRL+SHITF+T（需配置）<br>快捷键配置：在Preferences / Key Bindings – User加上代码（数组内）{ “keys”: [“ctrl+shift+t”], “command”: “delete_trailing_spaces” },</p> <ul> <li>auto-save</li> </ul> <h2 id="功能：自动保存文件"><a href="#功能：自动保存文件" class="headerlink" title="功能：自动保存文件"></a>功能：自动保存文件</h2><p>使用：默认是不会自动保存，按快捷键Ctrl+Shift+S开启。<br>快捷键配置方法：首选项-快捷键设置，在数组内添加{ “keys”: [“ctrl+shift+s”], “command”: “auto_save” },如需自动启用，首选项-插件-auto-save## settings-usre粘帖一下配置<br>{<br>“auto_save_on_modified”: true,<br>“auto_save_delay_in_seconds”: 10,<br>“auto_save_all_files”: true,<br>“auto_save_current_file”: “”,<br>“auto_save_backup”: false,<br>“auto_save_backup_suffix”: “autosave”<br>}</p> <ul> <li>view in browser</li> </ul> <h2 id="功能：通过默认浏览器打开文件"><a href="#功能：通过默认浏览器打开文件" class="headerlink" title="功能：通过默认浏览器打开文件"></a>功能：通过默认浏览器打开文件</h2><p>使用：快捷键配置方法：首选项-快捷键设置，在数组内添加快捷键：{ “keys”: [“f12”], “command”: “open_in_browser” },</p> <ul> <li>autoprefixer</li> </ul> <h2 id="功能：CSS添加私有前缀"><a href="#功能：CSS添加私有前缀" class="headerlink" title="功能：CSS添加私有前缀"></a>功能：CSS添加私有前缀</h2><p>简介：CSS还未标准化，所以要给各大浏览器一个前缀以解决兼容问题<br>使用：快捷键配置方法：首选项-快捷键设置，在数组内添加{ “keys”: [“ctrl+shift+enter”], “command”: “autoprefixer” },<br>快捷键：ctrl+shift+enter</p> <ul> <li>CSS Extended Completions</li> </ul> <h2 id="功能：关联CSS文件"><a href="#功能：关联CSS文件" class="headerlink" title="功能：关联CSS文件"></a>功能：关联CSS文件</h2><p>智能提示css文件中的类名，非常好用</p> <ul> <li>JavaScript Completions</li> </ul> <h2 id="功能：支持javascript原生语法提示"><a href="#功能：支持javascript原生语法提示" class="headerlink" title="功能：支持javascript原生语法提示"></a>功能：支持javascript原生语法提示</h2><ul> <li>jQuery</li> </ul> <h2 id="功能：jQ函数提示"><a href="#功能：jQ函数提示" class="headerlink" title="功能：jQ函数提示"></a>功能：jQ函数提示</h2><p>简介：快捷输入jQ函数，是偷懒的好方法</p> <ul> <li>AutoFileName</li> </ul> <h2 id="功能：快捷输入文件名"><a href="#功能：快捷输入文件名" class="headerlink" title="功能：快捷输入文件名"></a>功能：快捷输入文件名</h2><p>简介：自动完成文件名的输入，如图片选取<br>使用：输入”/”即可看到相对于本项目文件夹的其他文件</p> <ul> <li>HTML-CSS-JS Prettify</li> </ul> <h2 id="功能：快捷输入文件名-1"><a href="#功能：快捷输入文件名-1" class="headerlink" title="功能：快捷输入文件名"></a>功能：快捷输入文件名</h2><p>简介: 编辑HTML, CSS, JS时，经常会出现缩进不对，代码行不对其的情况。装了这个插件之后，只要按下 Ctrl+Shift+h (Windows), Command+Shift+h (Mac), 你的文档就会被整理干净。</p> <p>注: 需要配置node文件路径 HTML-CSS-JS Prettify &gt; plugin Options</p> <h2 id="问题：Ubuntu中Ctrl-Shift-P-输入ip-提示"><a href="#问题：Ubuntu中Ctrl-Shift-P-输入ip-提示" class="headerlink" title="问题：Ubuntu中Ctrl+Shift+P. 输入ip,提示"></a>问题：Ubuntu中Ctrl+Shift+P. 输入ip,提示</h2><p>Package Control: There are no packages available for installation.</p> <p><img src="/image1/sublimetext3_err.png" alt="no packages available for installation"></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Package Control: Error downloading channel. URL error [Errno 65] </span><br><span class="line">No route to host downloading https://packagecontrol.io/channel_v3.json.</span><br></pre></td></tr></table></figure> <p>解决方法一：<a href="https://packagecontrol.io/docs/troubleshooting#There_are_no_packages_available_for_installation" target="_blank" rel="noopener">官方解决办法</a></p> <p>解决办法二：</p> <p>解决方法：<br>Package Control.sublime-settings]修改方法：<br>Preferences &gt; Package Settings &gt; Package Control &gt; Settings - User<br>添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"channels"</span>:</span><br><span class="line">[</span><br><span class="line"> <span class="string">"http://static.bolin.site/channel_v3.json"</span>,</span><br><span class="line"> //<span class="string">"https://packagecontrol.io/channel_v3.json"</span>,</span><br><span class="line"> //<span class="string">"https://web.archive.org/web/20160103232808/https://packagecontrol.io/channel_v3.json"</span>,</span><br><span class="line"> //<span class="string">"https://gist.githubusercontent.com/nick1m/660ed046a096dae0b0ab/raw/e6e9e23a0bb48b44537f61025fbc359f8d586eb4/channel_v3.json"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></p> <p><img src="/image1/sublimetext_err2.png" alt="修改方法"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sublime test3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.13 mysql 笔记</title>
      <link href="//mysqlnotes/"/>
      <url>//mysqlnotes/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文主要记录mysql的相关文档，包括安装，配置和数据库访问相关代码</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h1 id="一、下载安装mysql"><a href="#一、下载安装mysql" class="headerlink" title="一、下载安装mysql"></a>一、下载安装mysql</h1><h2 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h2><ul> <li><p>MySQL8.0 For Windows zip包 -&gt; : <a href="https://dev.mysql.com/downloads/file/?id=476233" target="_blank" rel="noopener">下载地址</a></p> </li> <li><p>[1] 解压</p> </li> </ul> <p>我的解压在了D:\program\mysql\mysql-8.0.11-winx64</p> <p><img src="/image1/mysqlUnzip.png" alt="安装包解压"></p> <ul> <li>[2] 配置环境变量</li> </ul> <p><img src="/image1/mysqlInstall1.png" alt="配置环境变量"></p> <ul> <li>[3] 配置初始化的my.ini文件</li> </ul> <blockquote> <p>我们发现解压后的目录并没有my.ini文件，没关系可以自行创建。在安装根目录下添加 my.ini（新建文本文件，将文件类型改为.ini），写入基本配置：</p> </blockquote> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\Program Files\MySQL</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\Program Files\MySQL\Data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数。</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为UTF8</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="comment">#mysql_native_password</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure> <p><img src="/image1/mysqlInstall2.png" alt="配置环境变量"></p> <blockquote> <p>注意：其中的data目录不需要创建，下一步初始化工作中会自动创建</p> </blockquote> <h2 id="1-2-安装工作"><a href="#1-2-安装工作" class="headerlink" title="1.2 安装工作"></a>1.2 安装工作</h2><p>在安装时，必须以管理员身份运行cmd，否则在安装时会报错，会导致安装失败的情况</p> <p><img src="/image1/mysqlInstall3.png" alt="配置环境变量"></p> <h3 id="1-2-1-初始化数据库"><a href="#1-2-1-初始化数据库" class="headerlink" title="1.2.1 初始化数据库"></a>1.2.1 初始化数据库</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CD</span> \d D:/</span><br></pre></td></tr></table></figure> <p>在MySQL安装目录的 bin 目录下执行命令：</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure> <p>执行完成后，会打印 root 用户的初始默认密码，比如：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files\mysql\bin&gt;mysqld --initialize --console</span><br><span class="line"><span class="number">2019</span><span class="number">-02</span><span class="number">-14</span>T11:<span class="number">47</span>:<span class="number">59.282979</span>Z <span class="number">0</span> [System] [MY<span class="number">-013169</span>] [Server] D:\Program Files\mysql\bin\mysqld.exe (mysqld <span class="number">8.0</span><span class="number">.15</span>) initializing of server in progress as process <span class="number">13752</span></span><br><span class="line">2019-02-14T11:47:59.284705Z 0 [Warning] [MY-013242] [Server] --character-set-server: 'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.</span><br><span class="line"><span class="number">2019</span><span class="number">-02</span><span class="number">-14</span>T11:<span class="number">48</span>:<span class="number">40.707445</span>Z <span class="number">5</span> [Note] [MY<span class="number">-010454</span>] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: <span class="number">7</span>CwffH5&lt;(lem</span><br><span class="line"><span class="number">2019</span><span class="number">-02</span><span class="number">-14</span>T11:<span class="number">49</span>:<span class="number">02.894787</span>Z <span class="number">0</span> [System] [MY<span class="number">-013170</span>] [Server] D:\Program Files\mysql\bin\mysqld.exe (mysqld <span class="number">8.0</span><span class="number">.15</span>) initializing of server has completed</span><br></pre></td></tr></table></figure> <p>注意！执行输出结果里面有一段： [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: 7CwffH5&lt;(lem,D 其中root@localhost:后面的“7CwffH5&lt;(lem,D”就是初始密码（不含首位空格）。在没有更改密码前，需要记住这个密码，后续登录需要用到。<br>要是你手贱，关快了，或者没记住，那也没事，删掉初始化的 datadir 目录，再执行一遍初始化命令，又会重新生成的。当然，也可以使用安全工具，强制改密码，用什么方法，自己随意。</p> <h2 id="1-3-安装服务"><a href="#1-3-安装服务" class="headerlink" title="1.3 安装服务"></a>1.3 安装服务</h2><p>在MySQL安装目录的 bin 目录下执行命令：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --install [服务名]</span><br></pre></td></tr></table></figure> <p>后面的服务名可以不写，默认的名字为 mysql。当然，如果你的电脑上需要安装多个MySQL服务，就可以用不同的名字区分了，比如 mysql5 和 mysql8。<br>安装完成之后，就可以通过命令net start mysql启动MySQL的服务了。通过命令net stop mysql停止服务。通过命令sc delete MySQL/mysqld -remove卸载 MySQL 服务</p> <p><img src="/image1/mysqlInstall4.png" alt="配置环境变量"></p> <h2 id="1-4-更改密码"><a href="#1-4-更改密码" class="headerlink" title="1.4 更改密码"></a>1.4 更改密码</h2><p>下面提供两种方法修改密码，一种是GUI界面的一种是终端操作</p> <h3 id="1-4-1-GUI界面修改密码（推荐）"><a href="#1-4-1-GUI界面修改密码（推荐）" class="headerlink" title="1.4.1 GUI界面修改密码（推荐）"></a>1.4.1 GUI界面修改密码（推荐）</h3><p><img src="/image1/mysqlInstall5.png" alt="配置环境变量"></p> <p>这里附上<a href="https://pan.baidu.com/s/19mjZmCgZYaXRezxdukuG0w" target="_blank" rel="noopener">软件下载地址</a>:</p> <p>链接: <a href="https://pan.baidu.com/s/19mjZmCgZYaXRezxdukuG0w" target="_blank" rel="noopener">https://pan.baidu.com/s/19mjZmCgZYaXRezxdukuG0w</a> 提取码: m7de 复制这段内容后打开百度网盘手机App，操作更方便哦</p> <p>新建的MySQL的连接</p> <p><img src="/image1/mysqlInstall6.png" alt="Navicat Premium"></p> <p>还记得刚刚让你复制的root @ localhost：后面的初始密码了吗？现在要用到它了复制粘贴上去！<br>测试一下！</p> <p><img src="/image1/mysqlInstall7.png" alt="Navicat Premium"></p> <p>MySQL的是成功安装了也可以登录<br>现在就是改密码的时候了<br>写SQL改密码吗？<br>太麻烦了太低<br>来我有个简单的方法<br>用Navicat的点击刚刚的连接<br>就会提示我们输入新密码</p> <p><img src="/image1/mysqlInstall8.png" alt="Navicat Premium"></p> <h3 id="1-4-2-终端方式修改密码"><a href="#1-4-2-终端方式修改密码" class="headerlink" title="1.4.2 终端方式修改密码"></a>1.4.2 终端方式修改密码</h3><p>终端里管理员身份运行cmd,并CD 到在MySQL安装目录的 bin 目录下执行命令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure> <p>这时候会提示输入密码，记住了上面第3.1步安装时的密码，填入即可登录成功，进入MySQL命令模式。</p> <p><img src="/image1/mysqlInstall9.png" alt="Navicat Premium"></p> <p>在MySQL中执行命令：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;新密码&apos;;</span><br></pre></td></tr></table></figure> <p>修改密码，注意命令尾的；一定要有，这是mysql的语法</p> <h1 id="二、账号配置与使用测试"><a href="#二、账号配置与使用测试" class="headerlink" title="二、账号配置与使用测试"></a>二、账号配置与使用测试</h1><h2 id="2-1-数据库的创建、表单和字段配置"><a href="#2-1-数据库的创建、表单和字段配置" class="headerlink" title="2.1 数据库的创建、表单和字段配置"></a>2.1 数据库的创建、表单和字段配置</h2><ul> <li>创建数据库：iodata</li> <li>创建数据库表单：teacher ，user_info</li> <li>创建数据库表单中的字段：user_id，user_pass，user_modified 等等</li> <li>设置数据库表单中的主键。</li> </ul> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE iodata;</span><br><span class="line">use iodata;</span><br><span class="line">/*show tables;</span><br><span class="line">create table teacher </span><br><span class="line">(</span><br><span class="line"> code varchar(20) primary key,</span><br><span class="line"> name varchar(20)</span><br><span class="line">);*/</span><br><span class="line">CREATE TABLE user_info</span><br><span class="line">(</span><br><span class="line"> ID int NOT NULL AUTO_INCREMENT,/* 设置自动加的用户ID*/</span><br><span class="line"> user_id VARCHAR(200) NOT NULL,/*支持中英文200个字符的用户字符串*/</span><br><span class="line"> user_pass VARCHAR(200) NOT NULL,</span><br><span class="line"> user_create datetime(3) NULL DEFAULT CURRENT_TIMESTAMP(3),</span><br><span class="line"> user_modified datetime(3) NULL DEFAULT CURRENT_TIMESTAMP(3) ON UPDATE CURRENT_TIMESTAMP(3),</span><br><span class="line"> PRIMARY KEY (ID)/* 设置主键*/</span><br><span class="line">);</span><br></pre></td></tr></table></figure> <h2 id="2-2-配置数据库的用户访问账号密码，权限"><a href="#2-2-配置数据库的用户访问账号密码，权限" class="headerlink" title="2.2 配置数据库的用户访问账号密码，权限"></a>2.2 配置数据库的用户访问账号密码，权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use iodata;</span><br><span class="line">CREATE USER &apos;porter&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;shuruniziji_mima&apos;;/* 创建用户 */</span><br><span class="line">INSERT INTO iodata.user_info ( user_id, user_pass)</span><br><span class="line"> VALUES</span><br><span class="line"> ( &apos;porter&apos;, &apos;123&apos;); </span><br><span class="line">grant all privileges on *.* to &apos;porter&apos;@&apos;%&apos;; /* 放行用户的所有权限并允许远程网络连接 */</span><br></pre></td></tr></table></figure> <p>Python 代码来链接数据库</p> <p>如下代码功能是链接数据库并从数据库中读取数据并打印出来</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_db_data</span><span class="params">()</span>:</span></span><br><span class="line"> connect = pymysql.Connect(</span><br><span class="line"> host=<span class="string">"210.28.33.2"</span>,</span><br><span class="line"> port=<span class="number">3306</span>,</span><br><span class="line"> user=<span class="string">"porter"</span>,</span><br><span class="line"> passwd=<span class="string">"smrit"</span>,</span><br><span class="line"> db=<span class="string">"iodata"</span>,</span><br><span class="line"> charset=<span class="string">'utf8'</span></span><br><span class="line"> )</span><br><span class="line"> print(<span class="string">"写入中，请等待……"</span>)</span><br><span class="line"> cursor = connect.cursor()</span><br><span class="line"> sql = <span class="string">"select * from user_info"</span></span><br><span class="line"> cursor.execute(sql)</span><br><span class="line"> number = cursor.fetchall()</span><br><span class="line"> print(number)</span><br><span class="line"> cursor.close()</span><br><span class="line"> connect.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"> get_db_data()</span><br></pre></td></tr></table></figure> <h1 id="三、简单的操作例程"><a href="#三、简单的操作例程" class="headerlink" title="三、简单的操作例程"></a>三、简单的操作例程</h1><h2 id="3-1-存储图片的数据库读写操作"><a href="#3-1-存储图片的数据库读写操作" class="headerlink" title="3.1 存储图片的数据库读写操作"></a>3.1 存储图片的数据库读写操作</h2><p>使用上面推荐的GUI数据库操作工具：Navicat Premium, 软件，在软件中执行</p> <p><img src="/image1/mysqlInstall10.png" alt="Navicat Premium"></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use iodata;</span><br><span class="line">CREATE TABLE Images(Id INT PRIMARY KEY AUTO_INCREMENT, Data MEDIUMBLOB);</span><br></pre></td></tr></table></figure> <p><img src="/image1/mysqlInstall11.png" alt="向数据库中添加图片"></p> <p>读取数据库中图片的Python 代码</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg <span class="comment"># mpimg 用于读取图片</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_loan_number</span><span class="params">(file)</span>:</span></span><br><span class="line"> connect = pymysql.Connect(</span><br><span class="line"> host=<span class="string">"210.28.33.2"</span>,</span><br><span class="line"> port=<span class="number">3306</span>,</span><br><span class="line"> user=<span class="string">"porter"</span>,</span><br><span class="line"> passwd=<span class="string">"smriti"</span>,</span><br><span class="line"> db=<span class="string">"iodata"</span>,</span><br><span class="line"> charset=<span class="string">'utf8'</span></span><br><span class="line"> )</span><br><span class="line"> print(<span class="string">"写入中，请等待……"</span>)</span><br><span class="line"> cursor = connect.cursor()</span><br><span class="line"> sql = <span class="string">"select Data from images LIMIT 1"</span></span><br><span class="line"> cursor.execute(sql)</span><br><span class="line"> fout = open(<span class="string">'2.jpg'</span>,<span class="string">'wb'</span>)</span><br><span class="line"> image_file = cursor.fetchone()[<span class="number">0</span>]</span><br><span class="line"> fout.write(image_file)</span><br><span class="line"> fout.close()</span><br><span class="line"> cursor.close()</span><br><span class="line"> connect.close()</span><br><span class="line"> print(<span class="string">"写入完成,共写入%d条数据……"</span> % <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"> <span class="comment"># file = r"C:\Users\test\Desktop\loanNUmber.txt"</span></span><br><span class="line"> file = <span class="string">"task1.txt"</span></span><br><span class="line"> get_loan_number(file)</span><br></pre></td></tr></table></figure> <h2 id="3-2-读取数据数据并保存在txt文件中"><a href="#3-2-读取数据数据并保存在txt文件中" class="headerlink" title="3.2 读取数据数据并保存在txt文件中"></a>3.2 读取数据数据并保存在txt文件中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_loan_number</span><span class="params">(file)</span>:</span></span><br><span class="line"> connect = pymysql.Connect(</span><br><span class="line"> host=<span class="string">"106.14.221.55"</span>,</span><br><span class="line"> port=<span class="number">3306</span>,</span><br><span class="line"> user=<span class="string">"nadersidc"</span>,</span><br><span class="line"> passwd=<span class="string">"366583"</span>,</span><br><span class="line"> db=<span class="string">"defect_detecting"</span>,</span><br><span class="line"> charset=<span class="string">'utf8'</span></span><br><span class="line"> )</span><br><span class="line"> print(<span class="string">"写入中，请等待……"</span>)</span><br><span class="line"> cursor = connect.cursor()</span><br><span class="line"> <span class="comment"># sql = "select id from application where status='SUBMITTING' and contract like 'Performance-%' and " \</span></span><br><span class="line"> <span class="comment"># "loan_org_party='166490194444444444'"</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># sql = "select Element.Id,Element.FileName,DefectPosition.TopX,DefectPosition.TopY,\</span></span><br><span class="line"> <span class="comment"># DefectPosition.Width,DefectPosition.Height from Element,DefectPosition where Element.DefectId=6 \</span></span><br><span class="line"> <span class="comment"># and Element.ImageTypeId=2 and DefectPosition.ElementId=Element.Id"</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># sql = "select * from Element LIMIT 1,5"</span></span><br><span class="line"> <span class="comment"># sql = "select * from * LIMIT 1,5"</span></span><br><span class="line"> <span class="comment"># 查询数据库表中所有的表名字</span></span><br><span class="line"> <span class="comment"># sql = "select table_name from information_schema.tables where table_schema='defect_detecting'"</span></span><br><span class="line"> sql = <span class="string">"select * from TrainProject LIMIT 1,5"</span></span><br><span class="line"> cursor.execute(sql)</span><br><span class="line"> number = cursor.fetchall()</span><br><span class="line"> fp = open(file, <span class="string">"w"</span>)</span><br><span class="line"> loan_count = <span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> loanNumber <span class="keyword">in</span> number:</span><br><span class="line"> loan_count += <span class="number">1</span></span><br><span class="line"> fp.write(str(loanNumber)+<span class="string">'\n'</span>)</span><br><span class="line"> fp.close()</span><br><span class="line"> cursor.close()</span><br><span class="line"> connect.close()</span><br><span class="line"> print(<span class="string">"写入完成,共写入%d条数据……"</span> % loan_count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"> <span class="comment"># file = r"C:\Users\test\Desktop\loanNUmber.txt"</span></span><br><span class="line"> file = <span class="string">"task2.txt"</span></span><br><span class="line"> get_loan_number(file)</span><br></pre></td></tr></table></figure> <h2 id="3-2-读取数据数据并直接显示"><a href="#3-2-读取数据数据并直接显示" class="headerlink" title="3.2 读取数据数据并直接显示"></a>3.2 读取数据数据并直接显示</h2><ul> <li>涉及一个问题，就是数据库中的图片是二进制流的，如何直接从数据库中获取数据并显示</li> </ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 帮助文档检索方法</title>
      <link href="//pythonHelp/"/>
      <url>//pythonHelp/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本节主要是学习Python 相关如何查找帮助文档，提升编程效率。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 不积跬步无以至千里。</li> </ul> <a id="more"></a> <p>Python中的Module很丰富，一段时间不用，我们就会忘记各个模块的功能作用，以及如何调用模块中的方法。所以会使用帮助文档，以及高效的使用帮助文档，将变得十分重要。</p> <h2 id="一、查看python中模块的所有方法"><a href="#一、查看python中模块的所有方法" class="headerlink" title="一、查看python中模块的所有方法"></a>一、查看python中模块的所有方法</h2><h3 id="命令行下使用pydoc命令"><a href="#命令行下使用pydoc命令" class="headerlink" title="命令行下使用pydoc命令"></a>命令行下使用pydoc命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在命令行下运行$ pydoc modules即可查看</span><br></pre></td></tr></table></figure> <h3 id="在python交互解释器中使用help-查看"><a href="#在python交互解释器中使用help-查看" class="headerlink" title="在python交互解释器中使用help()查看"></a>在python交互解释器中使用help()查看</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在交互式解释器中输入&gt;&gt;&gt; help(<span class="string">"modules"</span>)即可，效果跟在命令行下输入$ pydoc modules是一样的</span><br></pre></td></tr></table></figure> <p>又如：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(math.sin)</span><br><span class="line">Help on built-<span class="keyword">in</span> function sin <span class="keyword">in</span> module math:</span><br><span class="line"></span><br><span class="line">sin(...)</span><br><span class="line"> sin(x)</span><br><span class="line"></span><br><span class="line"> Return the sine of x (measured <span class="keyword">in</span> radians).</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure> <h3 id="查看函数信息的另一种方法print-func-name-doc"><a href="#查看函数信息的另一种方法print-func-name-doc" class="headerlink" title="查看函数信息的另一种方法print(func_name.doc)"></a>查看函数信息的另一种方法print(func_name.<strong>doc</strong>)</h3><p>如查看内建函数print用法</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="keyword">print</span>.__doc__)</span><br><span class="line">print(value, ..., sep=<span class="string">' '</span>, end=<span class="string">'\n'</span>, file=sys.stdout, flush=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">Prints the values to a stream, <span class="keyword">or</span> to sys.stdout by default.</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure> <blockquote> <p><strong>doc</strong>前后是两个短下划线，在python中会合并为长下划线python中的help()类似unix中的man指令，熟悉后会对我们的编程带来很大帮助</p> </blockquote> <h3 id="查看模块下所有函数dir-module-name"><a href="#查看模块下所有函数dir-module-name" class="headerlink" title="查看模块下所有函数dir(module_name)"></a>查看模块下所有函数dir(module_name)</h3><p>如我们需要列举出math模块下所有的函数名称</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(math)</span><br><span class="line">[<span class="string">'__doc__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>,...]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure> <p>又如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests,os,random</span><br><span class="line">print(dir(random))</span><br><span class="line"></span><br><span class="line"># [&apos;BPF&apos;, &apos;LOG4&apos;, &apos;NV_MAGICCONST&apos;, &apos;RECIP_BPF&apos;, &apos;Random&apos;, &apos;SG_MAGICCONST&apos;, &apos;SystemRandom&apos;, </span><br><span class="line"># &apos;TWOPI&apos;, &apos;_BuiltinMethodType&apos;, &apos;_MethodType&apos;, &apos;_Sequence&apos;, &apos;_Set&apos;, &apos;__all__&apos;, &apos;__builtins__&apos;, </span><br><span class="line"># &apos;__cached__&apos;, &apos;__doc__&apos;, &apos;__file__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;_acos&apos;, </span><br><span class="line"># &apos;_ceil&apos;, &apos;_cos&apos;, &apos;_e&apos;, &apos;_exp&apos;, &apos;_inst&apos;, &apos;_log&apos;, &apos;_pi&apos;, &apos;_random&apos;, &apos;_sha512&apos;, &apos;_sin&apos;, &apos;_sqrt&apos;, &apos;_test&apos;,</span><br><span class="line"># &apos;_test_generator&apos;, &apos;_urandom&apos;, &apos;_warn&apos;, &apos;betavariate&apos;, &apos;choice&apos;, &apos;expovariate&apos;, &apos;gammavariate&apos;, &apos;gauss&apos;, </span><br><span class="line"># &apos;getrandbits&apos;, &apos;getstate&apos;, &apos;lognormvariate&apos;, &apos;normalvariate&apos;, &apos;paretovariate&apos;, &apos;randint&apos;, &apos;random&apos;, &apos;randrange&apos;, </span><br><span class="line"># &apos;sample&apos;, &apos;seed&apos;, &apos;setstate&apos;, &apos;shuffle&apos;, &apos;triangular&apos;, &apos;uniform&apos;, &apos;vonmisesvariate&apos;, &apos;weibullvariate&apos;]</span><br></pre></td></tr></table></figure> <h3 id="在python交互是解释器下导入sys模块查看"><a href="#在python交互是解释器下导入sys模块查看" class="headerlink" title="在python交互是解释器下导入sys模块查看"></a>在python交互是解释器下导入sys模块查看</h3><p>python的sys模块也是可以用来查看模块信息的</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules.keys()</span><br></pre></td></tr></table></figure> <h3 id="命令行下使用pip查看"><a href="#命令行下使用pip查看" class="headerlink" title="命令行下使用pip查看"></a>命令行下使用pip查看</h3><blockquote> <p>如果你使用的是pip来作为你的python包管理器的话，可以在命令行下直接运行$ pip freeze或者<code>$ pip list来查看安装包的信息，当然其它的包管理器也有类似的功能，同时，你也可以在python交互式解释器中导入pip模块来查看包信息</code></p> </blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pip</span><br><span class="line">installed_packages = pip.get_installed_distributions()</span><br><span class="line">installed_packages_list = sorted([<span class="string">"%s==%s"</span> % (i.key, i.version)</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> installed_packages])</span><br><span class="line">print(installed_packages_list)</span><br></pre></td></tr></table></figure> <h3 id="使用yolk来查看"><a href="#使用yolk来查看" class="headerlink" title="使用yolk来查看"></a>使用yolk来查看</h3><blockquote> <p>如果你安装过yolk的话可以使用yolk命令来查看包信息，你可以使用$ pip install yolk来安装它<br>yolk使用简单，只需在命令行下操作即可</p> </blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yolk -l <span class="comment">#列出所有安装模块</span></span><br><span class="line">$ yolk -a <span class="comment">#列出激活的模块</span></span><br><span class="line">$ yolk -n <span class="comment">#列出非激活模块</span></span><br><span class="line">$ yolk -U [packagename] <span class="comment"># 通过查询pypi来查看（该）模块是否有新版本</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Module篇使用__future__</title>
      <link href="//python_future/"/>
      <url>//python_future/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本节主要是学习Python 相关编程的总结及其他信息。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 不积跬步无以至千里。</li> </ul> <a id="more"></a> <p><a href="https://docs.python.org/3/library/__future__.html" target="_blank" rel="noopener">官方定义参考地址</a>— Future statement definitions。</p> <p><strong>future</strong> is a real module, and serves three purposes:</p> <ul> <li>To avoid confusing existing tools that analyze import statements and expect to find the modules they’re importing.</li> <li>To ensure that future statements run under releases prior to 2.1 at least yield runtime exceptions (the import of <strong>future</strong> will fail, because there was no module of that name prior to 2.1).</li> <li>To document when incompatible changes were introduced, and when they will be — or were — made mandatory. This is a form of executable documentation, and can be inspected programmatically via importing <strong>future</strong> and examining its contents.</li> </ul> <p>Python 的每个版本或多或少会添加一些新的功能，或者修改某些现存的功能，所以在不同版本的环境中我们写的某一些代码可能会存在不兼容的现象，比如Python2.5与Python3.6等等之间的版本就存在不兼容的问题，为了解决这种问题，Python加入了<strong>future</strong>模块。方便将工程代码过渡到新的版本上。比如2.x里的字符串用’xxx’表示str，Unicode字符串用u’xxx’表示unicode，而在3.x中，所有字符串都被视为unicode，因此，写u’xxx’和’xxx’是完全一致的，而在2.x中以’xxx’表示的str就必须写成b’xxx’，以此表示“二进制字符串”。</p> <p>要直接把代码升级到3.x是比较冒进的，因为有大量的改动需要测试。相反，可以在2.7版本中先在一部分代码中测试一些3.x的特性，如果没有问题，再移植到3.x不迟。</p> <p>Python提供了<strong>future</strong>模块，把下一个新版本的特性导入到当前版本，于是我们就可以在当前版本中测试一些新版本的特性。举例说明如下：</p> <p>为了适应Python 3.x的新的字符串的表示方法，在2.7版本的代码中，可以通过unicode_literals来使用Python 3.x的新的语法：</p> <p>此处借鉴<a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386820023084e5263fe54fde4e4e8616597058cc4ba1000" target="_blank" rel="noopener">廖雪峰的博客</a>:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># still running on Python 2.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'\'xxx\' is unicode?'</span>, isinstance(<span class="string">'xxx'</span>, unicode)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'u\'xxx\' is unicode?'</span>, isinstance(<span class="string">u'xxx'</span>, unicode)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\'xxx\' is str?'</span>, isinstance(<span class="string">'xxx'</span>, str)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'b\'xxx\' is str?'</span>, isinstance(<span class="string">b'xxx'</span>, str)</span><br></pre></td></tr></table></figure> <p>注意到上面的代码仍然在Python 2.7下运行，但结果显示去掉前缀u的’a string’仍是一个unicode，而加上前缀b的b’a string’才变成了str：</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python task.py</span><br><span class="line">'xxx' is unicode? True</span><br><span class="line">u'xxx' is unicode? True</span><br><span class="line">'xxx' is str? False</span><br><span class="line">b'xxx' is str? True</span><br></pre></td></tr></table></figure> <p>类似的情况还有除法运算。在Python 2.x中，对于除法有两种情况，如果是整数相除，结果仍是整数，余数会被扔掉，这种除法叫“地板除”：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> / <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure> <p>要做精确除法，必须把其中一个数变成浮点数：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10.0</span> / <span class="number">3</span></span><br><span class="line"><span class="number">3.3333333333333335</span></span><br></pre></td></tr></table></figure> <p>而在Python 3.x中，所有的除法都是精确除法，地板除用//表示：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br><span class="line">Python <span class="number">3.3</span><span class="number">.2</span> (default, Jan <span class="number">22</span> <span class="number">2014</span>, <span class="number">09</span>:<span class="number">54</span>:<span class="number">40</span>) </span><br><span class="line">[GCC <span class="number">4.2</span><span class="number">.1</span> Compatible Apple LLVM <span class="number">5.0</span> (clang<span class="number">-500.2</span><span class="number">.79</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> / <span class="number">3</span></span><br><span class="line"><span class="number">3.3333333333333335</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> // <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure> <p>如果你想在Python 2.7的代码中直接使用Python 3.x的除法，可以通过<strong>future</strong>模块的division实现：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">使用__future__</span><br><span class="line">阅读: <span class="number">142513</span></span><br><span class="line">Python的每个新版本都会增加一些新的功能，或者对原来的功能作一些改动。有些改动是不兼容旧版本的，也就是在当前版本运行正常的代码，到下一个版本运行就可能不正常了。</span><br><span class="line"></span><br><span class="line">从Python <span class="number">2.7</span>到Python <span class="number">3.</span>x就有不兼容的一些改动，比如<span class="number">2.</span>x里的字符串用<span class="string">'xxx'</span>表示str，Unicode字符串用<span class="string">u'xxx'</span>表示unicode，而在<span class="number">3.</span>x中，所有字符串都被视为unicode，因此，写<span class="string">u'xxx'</span>和<span class="string">'xxx'</span>是完全一致的，而在<span class="number">2.</span>x中以<span class="string">'xxx'</span>表示的str就必须写成<span class="string">b'xxx'</span>，以此表示“二进制字符串”。</span><br><span class="line"></span><br><span class="line">要直接把代码升级到<span class="number">3.</span>x是比较冒进的，因为有大量的改动需要测试。相反，可以在<span class="number">2.7</span>版本中先在一部分代码中测试一些<span class="number">3.</span>x的特性，如果没有问题，再移植到<span class="number">3.</span>x不迟。</span><br><span class="line"></span><br><span class="line">Python提供了__future__模块，把下一个新版本的特性导入到当前版本，于是我们就可以在当前版本中测试一些新版本的特性。举例说明如下：</span><br><span class="line"></span><br><span class="line">为了适应Python <span class="number">3.</span>x的新的字符串的表示方法，在<span class="number">2.7</span>版本的代码中，可以通过unicode_literals来使用Python <span class="number">3.</span>x的新的语法：</span><br><span class="line"></span><br><span class="line"><span class="comment"># still running on Python 2.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'\'xxx\' is unicode?'</span>, isinstance(<span class="string">'xxx'</span>, unicode)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'u\'xxx\' is unicode?'</span>, isinstance(<span class="string">u'xxx'</span>, unicode)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'\'xxx\' is str?'</span>, isinstance(<span class="string">'xxx'</span>, str)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'b\'xxx\' is str?'</span>, isinstance(<span class="string">b'xxx'</span>, str)</span><br><span class="line">注意到上面的代码仍然在Python <span class="number">2.7</span>下运行，但结果显示去掉前缀u的<span class="string">'a string'</span>仍是一个unicode，而加上前缀b的<span class="string">b'a string'</span>才变成了str：</span><br><span class="line"></span><br><span class="line">$ python task.py</span><br><span class="line">'xxx' is unicode? True</span><br><span class="line">u'xxx' is unicode? True</span><br><span class="line">'xxx' is str? False</span><br><span class="line">b'xxx' is str? True</span><br><span class="line">类似的情况还有除法运算。在Python <span class="number">2.</span>x中，对于除法有两种情况，如果是整数相除，结果仍是整数，余数会被扔掉，这种除法叫“地板除”：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> / <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">要做精确除法，必须把其中一个数变成浮点数：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10.0</span> / <span class="number">3</span></span><br><span class="line"><span class="number">3.3333333333333335</span></span><br><span class="line">而在Python <span class="number">3.</span>x中，所有的除法都是精确除法，地板除用//表示：</span><br><span class="line"></span><br><span class="line">$ python3</span><br><span class="line">Python <span class="number">3.3</span><span class="number">.2</span> (default, Jan <span class="number">22</span> <span class="number">2014</span>, <span class="number">09</span>:<span class="number">54</span>:<span class="number">40</span>) </span><br><span class="line">[GCC <span class="number">4.2</span><span class="number">.1</span> Compatible Apple LLVM <span class="number">5.0</span> (clang<span class="number">-500.2</span><span class="number">.79</span>)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> / <span class="number">3</span></span><br><span class="line"><span class="number">3.3333333333333335</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> // <span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">如果你想在Python <span class="number">2.7</span>的代码中直接使用Python <span class="number">3.</span>x的除法，可以通过__future__模块的division实现：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'10 / 3 ='</span>, <span class="number">10</span> / <span class="number">3</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'10.0 / 3 ='</span>, <span class="number">10.0</span> / <span class="number">3</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'10 // 3 ='</span>, <span class="number">10</span> // <span class="number">3</span></span><br></pre></td></tr></table></figure> <p>结果如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> / <span class="number">3</span> = <span class="number">3.33333333333</span></span><br><span class="line"><span class="number">10.0</span> / <span class="number">3</span> = <span class="number">3.33333333333</span></span><br><span class="line"><span class="number">10</span> // <span class="number">3</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure> <blockquote> <p>由于Python是由社区推动的开源并且免费的开发语言，不受商业公司控制，因此，Python的改进往往比较激进，不兼容的情况时有发生。Python为了确保你能顺利过渡到新版本，特别提供了<strong>future</strong>模块，让你在旧的版本中试验新版本的一些特性。</p> </blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Module </tag>
            
            <tag> __future__ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.5 梯度下降和最小二乘法</title>
      <link href="//tiduxiajiang/"/>
      <url>//tiduxiajiang/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本节笔记主要记录梯度下降算法和最小二乘法的相同点和不同点，为了简单的理解和推导，我们暂只讨论一元线性回归下的梯度下降算法和最小二乘。从实现++代码上的最大不同就是梯度下降采用了迭代算法—预先给一个参数设置初始值，然后通过迭代和学习率实现线性方程直线的无限靠近理想函数。最小二乘采用了高中数学求凸函数（下凹）的最小值—即求导数为零的参数方程。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。 </li> </ul> <a id="more"></a> <p>梯度下降和最小二乘发的相同点和不同点如下：</p> <h2 id="第一部分、最小二乘法"><a href="#第一部分、最小二乘法" class="headerlink" title="第一部分、最小二乘法"></a>第一部分、最小二乘法</h2><h3 id="1-1-狭义的最小二乘法："><a href="#1-1-狭义的最小二乘法：" class="headerlink" title="1.1 狭义的最小二乘法："></a>1.1 狭义的最小二乘法：</h3><p>指的是在线性回归下采用最小二乘准则（或者说叫做最小平方），进行线性拟合参数求解的、矩阵形式的公式方法，是线性假设下的一种有闭式解的参数求解方法，最终结果为全局最优；</p> <h3 id="1-2-广义的最小二乘法："><a href="#1-2-广义的最小二乘法：" class="headerlink" title="1.2 广义的最小二乘法："></a>1.2 广义的最小二乘法：</h3><p>是最小二乘准则，本质上是一种evaluation rule或者说objective funcion。是一种对于偏差程度的评估准则。</p> <ul> <li>梯度下降法，是假设条件更为广泛（无约束）的，一种通过迭代更新来逐步进行的参数优化方法，最终结果为局部最优；</li> </ul> <h3 id="1-3-最小二乘与极大似然的区别"><a href="#1-3-最小二乘与极大似然的区别" class="headerlink" title="1.3 最小二乘与极大似然的区别"></a>1.3 最小二乘与极大似然的区别</h3><ul> <li>二乘法：即观测值与实际数据误差平方和最小，其没有假设，几何意义上就是距离最小</li> <li>最大似然估计：估计参数可能值，使样本发生概率最大</li> </ul> <h3 id="1-4-对于回归问题，两者对于最优参数的不同解法"><a href="#1-4-对于回归问题，两者对于最优参数的不同解法" class="headerlink" title="1.4 对于回归问题，两者对于最优参数的不同解法"></a>1.4 对于回归问题，两者对于最优参数的不同解法</h3><p>假设一元回归方程为</p> <p>$$<br>f(x_i)=\omega x_i +b<br>$$</p> <p>实际中我们会采样得到关于[x,y]的很多样本，此时我们会通过损失函数loss，来求最优$\omega , b$的最优解。</p> <p>$$<br>loss = (\omega x + b -y)^2<br>$$</p> <p>假设$E_(\omega, b)=loss_(\omega, b)$,于是：</p> <p>为求得最优的$\omega ， b$,即求解$E_(\omega, b)=\sum_{i=1}^{m} (y_i - \omega x_i -b)^2$的最小取值下的$\omega ， b$ 最优解。</p> <ul> <li>注意此时的$E_(\omega, b)$是一个凸函数，注意也就是对应国内教材下凹函数曲线。</li> </ul> <h3 id="1-5-最小二乘法的求解最优的-omega-，-b-的方法"><a href="#1-5-最小二乘法的求解最优的-omega-，-b-的方法" class="headerlink" title="1.5 最小二乘法的求解最优的$\omega ， b$的方法"></a>1.5 最小二乘法的求解最优的$\omega ， b$的方法</h3><p>直接通过对$E_(\omega, b)$ 对$\omega ， b$ 分别求偏导，并将偏导设为0，求取凸函数取得最小值下的对应$\omega ， b$ 参数。</p> <h3 id="1-6-最小二乘法的局限性和适用场景"><a href="#1-6-最小二乘法的局限性和适用场景" class="headerlink" title="1.6 最小二乘法的局限性和适用场景　　"></a>1.6 最小二乘法的局限性和适用场景 </h3><p> 从上面可以看出，最小二乘法适用简洁高效，比梯度下降这样的迭代法似乎方便很多。但是这里我们就聊聊最小二乘法的局限性。</p> <p> 首先，最小二乘法需要计算的逆矩阵，有可能它的逆矩阵不存在，这样就没有办法直接用最小二乘法了，此时梯度下降法仍然可以使用。当然，我们可以通过对样本数据进行整理，去掉冗余特征。让的行列式不为0，然后继续使用最小二乘法。</p> <p> 第二，当样本特征n非常的大的时候，计算的逆矩阵是一个非常耗时的工作（nxn的矩阵求逆），甚至不可行。此时以梯度下降为代表的迭代法仍然可以使用。那这个n到底多大就不适合最小二乘法呢？如果你没有很多的分布式大数据计算资源，建议超过10000个特征就用迭代法吧。或者通过主成分分析降低特征的维度后再用最小二乘法。</p> <p> 第三，如果拟合函数不是线性的，这时无法使用最小二乘法，需要通过一些技巧转化为线性才能使用，此时梯度下降仍然可以用。</p> <p> 第四，讲一些特殊情况。当样本量m很少，小于特征数n的时候，这时拟合方程是欠定的，常用的优化方法都无法去拟合数据。当样本量m等于特征说n的时候，用方程组求解就可以了。当m大于n时，拟合方程是超定的，也就是我们常用与最小二乘法的场景了。</p> <p> 原文地址：<a href="http://www.cnblogs.com/pinard/p/5976811.html" target="_blank" rel="noopener">http://www.cnblogs.com/pinard/p/5976811.html</a></p> <h2 id="第二部分、梯度下降算法"><a href="#第二部分、梯度下降算法" class="headerlink" title="第二部分、梯度下降算法"></a>第二部分、梯度下降算法</h2><h3 id="2-1-梯度下降算法的求解最优的-omega-，-b-的方法"><a href="#2-1-梯度下降算法的求解最优的-omega-，-b-的方法" class="headerlink" title="2.1 梯度下降算法的求解最优的$\omega ， b$的方法"></a>2.1 梯度下降算法的求解最优的$\omega ， b$的方法</h3><p>同样，梯度下降算法也是要求最小损失函数</p> <p>$$<br>loss = (\omega x + b -y)^2<br>$$</p> <p>但是方法不一样了，梯度下降算法，在上面的基础上设定一个学习率的参数，假设为:$lr$ </p> <p>对于待求解的参数$\omega ， b$ 则转化为 –&gt; 求最终待求的$\omega ‘ ， b’$ 关于前一时刻的$\omega ， b$ 的函数，如下</p> <p>$$<br>\frac{\bigtriangledown loss}{\bigtriangledown \omega} = \frac{2(\omega x+b-y)*x}{N}<br>$$</p> <p>$$<br>\frac{\bigtriangledown loss}{\bigtriangledown b} = \frac{2(\omega x+b-y)}{N}<br>$$</p> <h3 id="2-2-梯度下降算法的算法核心公式"><a href="#2-2-梯度下降算法的算法核心公式" class="headerlink" title="2.2 梯度下降算法的算法核心公式"></a>2.2 梯度下降算法的算法核心公式</h3><p>对于$\omega$和$b$ , 算法的核心在于如何更新这两个参数，这两个参数的更新不是能用公式可以简单的推到的，但是可以用下面的举例进行理解</p> <blockquote> <p>$\omega$和$b$ 参数更新的理解，首先我们需要的是最小化这个loss代价函数，这个代价函数是一个下凸函数，所以我们按照凸函数的特点来理解，类似于一个山，人闭着眼往山下走小碎步(这个小碎步就是学习率乘梯度，如下公式)</p> </blockquote> <p>$$lr * \frac{\bigtriangledown loss}{\bigtriangledown \omega}$$</p> <blockquote> <blockquote> <p>我们要求解的是，找这个loss的局部最优解，由于我们是针对线性一元的，所以loss是只有一个极小值点，也就是局部解就是最优解，所以接下来理解。</p> </blockquote> </blockquote> <blockquote> <p>人要走到山下，那么问题来了，我怎么怎么确保我们一直是朝向山谷走的呢，(比如人走在山谷的左边,应该接着忘右边走，才能到达山谷；又如，我们走超了，小碎步跨大了，跨到山谷的左边去了，我们应该要要朝山谷的左边走才能到山谷)，这里就需要个<strong>方向</strong>，这个在局部最优点的左边还是右边的方向由$\frac{\bigtriangledown loss}{\bigtriangledown \omega}$ 确定。</p> </blockquote> <blockquote> <p>第三个问题是，人走小碎步时，要的方向是朝着局部最优点(山谷)走的,即loss数值(代价函数)减少的方向，所以我们要在小碎步前乘以负数，来确保，取(点，人)在(山)左边时(左边时梯度=斜率，就是loss的导数为负数,负数乘以负数，就为正数)我们要确保我们需要预测的$\omega , b$所确定的 </p> </blockquote> <p>$$f(x; \omega , b)= \omega * x+b$$</p> <blockquote> <p>接近原数据y,所以对于价值函数，人在左边时 $\omega$, 我们要确保人是往loss梯度下降(loss减少)的方向移动, 此时$\omega$ 就可以看作走碎步的人，方向都已确定 </p> </blockquote> <p>$$-lr * \frac{\bigtriangledown loss}{\bigtriangledown \omega}$$</p> <blockquote> <p>,现在就是在前一步$\omega_{0}$ 的基础上，走下一步得到 $\omega_{1}$即有</p> </blockquote> <p>$$<br>\omega_{1} = \omega_{0}+(-lr*\frac{\bigtriangledown loss}{\bigtriangledown \omega})<br>$$</p> <p>进一步简化为</p> <p>$$\omega ‘=\omega - lr * \frac{\bigtriangledown loss}{\bigtriangledown \omega}$$</p> <p>同理：</p> <blockquote> <p>人，走碎步(小碎步的步长是$- lr * \frac{\bigtriangledown loss}{\bigtriangledown b}$)，上一步是b, 方向是$\frac{\bigtriangledown loss}{\bigtriangledown \omega}$ ,走到的下一步就是$b^{‘}$ ,即得到</p> </blockquote> <p>$$b ‘=b - lr * \frac{\bigtriangledown loss}{\bigtriangledown b}$$</p> <ul> <li>根据上面的式子，假设学习率lr的初始值为0，然后通过for循环进行迭代，此时求解的关于$\omega ， b$ 的曲线会随着迭代的次数增加，一步步无限的靠近最优的解，理论上会求解到最优的$\omega ， b$ 。</li> </ul> <hr> <blockquote> <p>这里我相信题主对梯度下降法的整体理念是认可的，只是不清楚这个更新公式的实质含义。首先这个梯度更新公式确实不是推导而是创造出来的，所以只能从概念上去理解。设想下有个函数，你的目标是：找到一个参数 使得它的值 最小。但它很复杂，你无法找到这个参数的解析解，所以你希望通过梯度下降法去猜这个参数。 问题是怎么猜？对于多数有连续性的函数来说，显然不可能把每个 都试一遍。所以只能先随机取一个 ，然后看看怎么调整它最有可能使得 变小。把这个过程重复n遍，自然最后得到的 的估值会越来越小。</p> </blockquote> <blockquote> <blockquote> <p>作者：老董<br><br>链接：<a href="https://www.zhihu.com/question/57747902/answer/240695458" target="_blank" rel="noopener">https://www.zhihu.com/question/57747902/answer/240695458</a> <br><br>来源：知乎</p> </blockquote> </blockquote> <p>针对上面的一元回归梯度下降算法的代码实现，如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># y = wx + b</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_error_for_line_given_points</span><span class="params">(b, w, points)</span>:</span></span><br><span class="line"> totalError = <span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(points)):</span><br><span class="line"> x = points[i, <span class="number">0</span>]</span><br><span class="line"> y = points[i, <span class="number">1</span>]</span><br><span class="line"> totalError += (y - (w * x + b)) ** <span class="number">2</span></span><br><span class="line"> <span class="keyword">return</span> totalError / float(len(points))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">step_gradient</span><span class="params">(b_current, w_current, points, learningRate)</span>:</span></span><br><span class="line"> b_gradient = <span class="number">0</span></span><br><span class="line"> w_gradient = <span class="number">0</span></span><br><span class="line"> N = float(len(points))</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(points)):</span><br><span class="line"> x = points[i, <span class="number">0</span>]</span><br><span class="line"> y = points[i, <span class="number">1</span>]</span><br><span class="line"> b_gradient += -(<span class="number">2</span>/N) * (y - ((w_current * x) + b_current))</span><br><span class="line"> w_gradient += -(<span class="number">2</span>/N) * x * (y - ((w_current * x) + b_current))</span><br><span class="line"> new_b = b_current - (learningRate * b_gradient)</span><br><span class="line"> new_m = w_current - (learningRate * w_gradient)</span><br><span class="line"> <span class="keyword">return</span> [new_b, new_m]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_descent_runner</span><span class="params">(points, starting_b, starting_m, learning_rate, num_iterations)</span>:</span></span><br><span class="line"> b = starting_b</span><br><span class="line"> m = starting_m</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(num_iterations):</span><br><span class="line"> b, m = step_gradient(b, m, np.array(points), learning_rate)</span><br><span class="line"> <span class="keyword">return</span> [b, m]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line"> points = np.genfromtxt(<span class="string">"data.csv"</span>, delimiter=<span class="string">","</span>)</span><br><span class="line"> learning_rate = <span class="number">0.0001</span></span><br><span class="line"> initial_b = <span class="number">0</span> <span class="comment"># initial y-intercept guess</span></span><br><span class="line"> initial_m = <span class="number">0</span> <span class="comment"># initial slope guess</span></span><br><span class="line"> num_iterations = <span class="number">1000</span></span><br><span class="line"> print(<span class="string">"Starting gradient descent at b = &#123;0&#125;, m = &#123;1&#125;, error = &#123;2&#125;"</span></span><br><span class="line"> .format(initial_b, initial_m,</span><br><span class="line"> compute_error_for_line_given_points(initial_b, initial_m, points))</span><br><span class="line"> )</span><br><span class="line"> print(<span class="string">"Running..."</span>)</span><br><span class="line"> [b, m] = gradient_descent_runner(points, initial_b, initial_m, learning_rate, num_iterations)</span><br><span class="line"> print(<span class="string">"After &#123;0&#125; iterations b = &#123;1&#125;, m = &#123;2&#125;, error = &#123;3&#125;"</span>.</span><br><span class="line"> format(num_iterations, b, m,</span><br><span class="line"> compute_error_for_line_given_points(b, m, points))</span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"> run()</span><br></pre></td></tr></table></figure> <p>对应的数据集如下(data.csv)：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">32.502345269453031</span>,<span class="number">31.70700584656992</span></span><br><span class="line"><span class="number">53.426804033275019</span>,<span class="number">68.77759598163891</span></span><br><span class="line"><span class="number">61.530358025636438</span>,<span class="number">62.562382297945803</span></span><br><span class="line"><span class="number">47.475639634786098</span>,<span class="number">71.546632233567777</span></span><br><span class="line"><span class="number">59.813207869512318</span>,<span class="number">87.230925133687393</span></span><br><span class="line"><span class="number">55.142188413943821</span>,<span class="number">78.211518270799232</span></span><br><span class="line"><span class="number">52.211796692214001</span>,<span class="number">79.64197304980874</span></span><br><span class="line"><span class="number">39.299566694317065</span>,<span class="number">59.171489321869508</span></span><br><span class="line"><span class="number">48.10504169176825</span>,<span class="number">75.331242297063056</span></span><br><span class="line"><span class="number">52.550014442733818</span>,<span class="number">71.300879886850353</span></span><br><span class="line"><span class="number">45.419730144973755</span>,<span class="number">55.165677145959123</span></span><br><span class="line"><span class="number">54.351634881228918</span>,<span class="number">82.478846757497919</span></span><br><span class="line"><span class="number">44.164049496773352</span>,<span class="number">62.008923245725825</span></span><br><span class="line"><span class="number">58.16847071685779</span>,<span class="number">75.392870425994957</span></span><br><span class="line"><span class="number">56.727208057096611</span>,<span class="number">81.43619215887864</span></span><br><span class="line"><span class="number">48.955888566093719</span>,<span class="number">60.723602440673965</span></span><br><span class="line"><span class="number">44.687196231480904</span>,<span class="number">82.892503731453715</span></span><br><span class="line"><span class="number">60.297326851333466</span>,<span class="number">97.379896862166078</span></span><br><span class="line"><span class="number">45.618643772955828</span>,<span class="number">48.847153317355072</span></span><br><span class="line"><span class="number">38.816817537445637</span>,<span class="number">56.877213186268506</span></span><br><span class="line"><span class="number">66.189816606752601</span>,<span class="number">83.878564664602763</span></span><br><span class="line"><span class="number">65.41605174513407</span>,<span class="number">118.59121730252249</span></span><br><span class="line"><span class="number">47.48120860786787</span>,<span class="number">57.251819462268969</span></span><br><span class="line"><span class="number">41.57564261748702</span>,<span class="number">51.391744079832307</span></span><br><span class="line"><span class="number">51.84518690563943</span>,<span class="number">75.380651665312357</span></span><br><span class="line"><span class="number">59.370822011089523</span>,<span class="number">74.765564032151374</span></span><br><span class="line"><span class="number">57.31000343834809</span>,<span class="number">95.455052922574737</span></span><br><span class="line"><span class="number">63.615561251453308</span>,<span class="number">95.229366017555307</span></span><br><span class="line"><span class="number">46.737619407976972</span>,<span class="number">79.052406169565586</span></span><br><span class="line"><span class="number">50.556760148547767</span>,<span class="number">83.432071421323712</span></span><br><span class="line"><span class="number">52.223996085553047</span>,<span class="number">63.358790317497878</span></span><br><span class="line"><span class="number">35.567830047746632</span>,<span class="number">41.412885303700563</span></span><br><span class="line"><span class="number">42.436476944055642</span>,<span class="number">76.617341280074044</span></span><br><span class="line"><span class="number">58.16454011019286</span>,<span class="number">96.769566426108199</span></span><br><span class="line"><span class="number">57.504447615341789</span>,<span class="number">74.084130116602523</span></span><br><span class="line"><span class="number">45.440530725319981</span>,<span class="number">66.588144414228594</span></span><br><span class="line"><span class="number">61.89622268029126</span>,<span class="number">77.768482417793024</span></span><br><span class="line"><span class="number">33.093831736163963</span>,<span class="number">50.719588912312084</span></span><br><span class="line"><span class="number">36.436009511386871</span>,<span class="number">62.124570818071781</span></span><br><span class="line"><span class="number">37.675654860850742</span>,<span class="number">60.810246649902211</span></span><br><span class="line"><span class="number">44.555608383275356</span>,<span class="number">52.682983366387781</span></span><br><span class="line"><span class="number">43.318282631865721</span>,<span class="number">58.569824717692867</span></span><br><span class="line"><span class="number">50.073145632289034</span>,<span class="number">82.905981485070512</span></span><br><span class="line"><span class="number">43.870612645218372</span>,<span class="number">61.424709804339123</span></span><br><span class="line"><span class="number">62.997480747553091</span>,<span class="number">115.24415280079529</span></span><br><span class="line"><span class="number">32.669043763467187</span>,<span class="number">45.570588823376085</span></span><br><span class="line"><span class="number">40.166899008703702</span>,<span class="number">54.084054796223612</span></span><br><span class="line"><span class="number">53.575077531673656</span>,<span class="number">87.994452758110413</span></span><br><span class="line"><span class="number">33.864214971778239</span>,<span class="number">52.725494375900425</span></span><br><span class="line"><span class="number">64.707138666121296</span>,<span class="number">93.576118692658241</span></span><br><span class="line"><span class="number">38.119824026822805</span>,<span class="number">80.166275447370964</span></span><br><span class="line"><span class="number">44.502538064645101</span>,<span class="number">65.101711570560326</span></span><br><span class="line"><span class="number">40.599538384552318</span>,<span class="number">65.562301260400375</span></span><br><span class="line"><span class="number">41.720676356341293</span>,<span class="number">65.280886920822823</span></span><br><span class="line"><span class="number">51.088634678336796</span>,<span class="number">73.434641546324301</span></span><br><span class="line"><span class="number">55.078095904923202</span>,<span class="number">71.13972785861894</span></span><br><span class="line"><span class="number">41.377726534895203</span>,<span class="number">79.102829683549857</span></span><br><span class="line"><span class="number">62.494697427269791</span>,<span class="number">86.520538440347153</span></span><br><span class="line"><span class="number">49.203887540826003</span>,<span class="number">84.742697807826218</span></span><br><span class="line"><span class="number">41.102685187349664</span>,<span class="number">59.358850248624933</span></span><br><span class="line"><span class="number">41.182016105169822</span>,<span class="number">61.684037524833627</span></span><br><span class="line"><span class="number">50.186389494880601</span>,<span class="number">69.847604158249183</span></span><br><span class="line"><span class="number">52.378446219236217</span>,<span class="number">86.098291205774103</span></span><br><span class="line"><span class="number">50.135485486286122</span>,<span class="number">59.108839267699643</span></span><br><span class="line"><span class="number">33.644706006191782</span>,<span class="number">69.89968164362763</span></span><br><span class="line"><span class="number">39.557901222906828</span>,<span class="number">44.862490711164398</span></span><br><span class="line"><span class="number">56.130388816875467</span>,<span class="number">85.498067778840223</span></span><br><span class="line"><span class="number">57.362052133238237</span>,<span class="number">95.536686846467219</span></span><br><span class="line"><span class="number">60.269214393997906</span>,<span class="number">70.251934419771587</span></span><br><span class="line"><span class="number">35.678093889410732</span>,<span class="number">52.721734964774988</span></span><br><span class="line"><span class="number">31.588116998132829</span>,<span class="number">50.392670135079896</span></span><br><span class="line"><span class="number">53.66093226167304</span>,<span class="number">63.642398775657753</span></span><br><span class="line"><span class="number">46.682228649471917</span>,<span class="number">72.247251068662365</span></span><br><span class="line"><span class="number">43.107820219102464</span>,<span class="number">57.812512976181402</span></span><br><span class="line"><span class="number">70.34607561504933</span>,<span class="number">104.25710158543822</span></span><br><span class="line"><span class="number">44.492855880854073</span>,<span class="number">86.642020318822006</span></span><br><span class="line"><span class="number">57.50453330326841</span>,<span class="number">91.486778000110135</span></span><br><span class="line"><span class="number">36.930076609191808</span>,<span class="number">55.231660886212836</span></span><br><span class="line"><span class="number">55.805733357942742</span>,<span class="number">79.550436678507609</span></span><br><span class="line"><span class="number">38.954769073377065</span>,<span class="number">44.847124242467601</span></span><br><span class="line"><span class="number">56.901214702247074</span>,<span class="number">80.207523139682763</span></span><br><span class="line"><span class="number">56.868900661384046</span>,<span class="number">83.14274979204346</span></span><br><span class="line"><span class="number">34.33312470421609</span>,<span class="number">55.723489260543914</span></span><br><span class="line"><span class="number">59.04974121466681</span>,<span class="number">77.634182511677864</span></span><br><span class="line"><span class="number">57.788223993230673</span>,<span class="number">99.051414841748269</span></span><br><span class="line"><span class="number">54.282328705967409</span>,<span class="number">79.120646274680027</span></span><br><span class="line"><span class="number">51.088719898979143</span>,<span class="number">69.588897851118475</span></span><br><span class="line"><span class="number">50.282836348230731</span>,<span class="number">69.510503311494389</span></span><br><span class="line"><span class="number">44.211741752090113</span>,<span class="number">73.687564318317285</span></span><br><span class="line"><span class="number">38.005488008060688</span>,<span class="number">61.366904537240131</span></span><br><span class="line"><span class="number">32.940479942618296</span>,<span class="number">67.170655768995118</span></span><br><span class="line"><span class="number">53.691639571070056</span>,<span class="number">85.668203145001542</span></span><br><span class="line"><span class="number">68.76573426962166</span>,<span class="number">114.85387123391394</span></span><br><span class="line"><span class="number">46.230966498310252</span>,<span class="number">90.123572069967423</span></span><br><span class="line"><span class="number">68.319360818255362</span>,<span class="number">97.919821035242848</span></span><br><span class="line"><span class="number">50.030174340312143</span>,<span class="number">81.536990783015028</span></span><br><span class="line"><span class="number">49.239765342753763</span>,<span class="number">72.111832469615663</span></span><br><span class="line"><span class="number">50.039575939875988</span>,<span class="number">85.232007342325673</span></span><br><span class="line"><span class="number">48.149858891028863</span>,<span class="number">66.224957888054632</span></span><br><span class="line"><span class="number">25.128484647772304</span>,<span class="number">53.454394214850524</span></span><br></pre></td></tr></table></figure> <h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是关于简单的一元回归的关于梯度下降和最小二乘的区别，对于代码中，的迭代的实现下一小节中会有详细的介绍，会通过代码来直观例说迭代算法和递归算法的差异和原理。</p> <p>无聊时刻看部综艺：</p> <!-- <iframe height=498 width=100% src='http://player.youku.com/embed/XNDAwMjkxOTM4OA==' frameborder=0 'allowfullscreen'></iframe> --> <div><br><iframe height="498" width="100%" src="http://player.youku.com/embed/XNDAwMjkxOTM4OA==" frameborder="0" 'allowfullscreen'=""></iframe><br></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 梯度下降和最小二乘法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.4  Decision tree</title>
      <link href="//decisiontree/"/>
      <url>//decisiontree/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>决策树是在已知各种情况发生的概率的基础上，通过决策树来求取净现值的期望值大于或等于零的概率，从而评价项目风险，判断其可能性的决策分析方法，是直观的运用概率分析的一种图解方法。由于决策树画成的图像就像一棵树的树干，故称决策树。在机器学习中决策树是一种预测模型，他表示对象属性和对象之间的一种映射关系。决策树是一种判断其可行性的决策分析的方法，也是一种能够直观运用概率分析的一种图解法。</p> <p><img src="/image2/decision_tree_01.jpg" alt="决策树"></p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。 </li> </ul> <a id="more"></a> <p>决策树是一种树形结构，其中每个内部节点表示一个属性上的测试，每个分支代表一个测试输出，每个叶节点代表一种类别。</p> <p>分类树（决策树）是一种十分常用的分类方法。他是一种监管学习，所谓监管学习就是给定一堆样本，每个样本都有一组属性和一个类别，这些类别是事先确定的，那么通过学习得到一个分类器，这个分类器能够对新出现的对象给出正确的分类。这样的机器学习就被称之为监督学习。</p> <p>参考自百度百科：<a href="https://baike.baidu.com/item/%E5%86%B3%E7%AD%96%E6%A0%91/10377049" target="_blank" rel="noopener">决策树</a></p> <h1 id="一、组成"><a href="#一、组成" class="headerlink" title="一、组成"></a>一、组成</h1><p><img src="/image2/decision_tree_01.jpg" alt="决策树的组成"></p> <p>决策树是一种树形的结构图，在计算机预测模型中，其中每个内部节点代表一个属性上的测试，每个分支代表一个测试输出（可能的属性值），每个叶节点代表一种类别。他由分支来对该类型的对象依靠属性进行分类。当不能在进行分割或一个单独的类可以被应用于某一分支时，递归过程就完成了。</p> <p><img src="/image2/decision_tree_01.jpeg" alt="决策树的组成"></p> <p>A、先画一个方框作为出发点，又称决策节点；</p> <p>B、从出发点向右引出若干条直线，这些直线叫做方案枝；</p> <p>C、在每个方案枝的末端画一个圆圈，这个圆圈称为概率分叉点，或自然状态点；</p> <p>D、从自然状态点引出代表各自然状态的分枝，称为概率分枝；</p> <p>E、如果问题只需要一级决策，则概率分枝末端画三角形，表示终点 。</p> <h1 id="二、-决策树的作用"><a href="#二、-决策树的作用" class="headerlink" title="二、 决策树的作用"></a>二、 决策树的作用</h1><ul> <li>尽可能最大化地规避项目风险。</li> <li>能够直观地通过图示的方式传达信息背后的价值。</li> <li>显示出项目所有可供选择的行动方案，行动方案之间的关系，行动方案的后果以及发生的概率，甚至是每种方案的损益期望值。</li> </ul> <p>具体的决策树绘制方法与很多，下面给一个国内的强大绘图软件：<a href="http://www.edrawsoft.cn/draw-decision-tree/" target="_blank" rel="noopener">亿方图软件绘制决策树的方法</a>。</p> <h1 id="三、实例理解"><a href="#三、实例理解" class="headerlink" title="三、实例理解"></a>三、实例理解</h1><p>还是纯粹的理论有点不好理解，接下来进行实例，来进一步了解决策树算法。</p> <p>第一个例子是<a href="https://baike.baidu.com/item/%E5%86%B3%E7%AD%96%E6%A0%91/10377049" target="_blank" rel="noopener">引用百科的</a>。</p> <h2 id="3-1-案例一"><a href="#3-1-案例一" class="headerlink" title="3.1 案例一"></a>3.1 案例一</h2><p>为了适应市场的需要，某地准备扩大电视机生产。市场预测表明：产品销路好的概率为0.7；销路差的概率为0.3。</p> <p>[ ] 备选方案有三个：第一个方案是建设大工厂，需要投资600万元，可使用10年；如销路好，每年可赢利200万元；如销路不好，每年会亏损40万元。</p> <p>[ ] 第二个方案是建设小工厂，需投资280万元；如销路好，每年可赢利80万元；如销路不好，每年也会赢利60万元。</p> <p>[ ] 第三个方案也是先建设小工厂，但是如销路好，3年后扩建，扩建需投资400万元，可使用7年，扩建后每年会赢利190万元。</p> <p><strong>根据如上绘制决策树</strong>如下图所示：</p> <p><img src="/image2/decision_tree_02.jpg" alt="案例一的决策树"></p> <p>各点期望：</p> <p>点②：0.7×200×10+0.3×（-40）×10-600（投资）=680（万元）</p> <p>点⑤：1.0×190×7-400=930（万元）</p> <p>点⑥：1.0×80×7=560（万元）</p> <p>比较决策点4的情况可以看到，由于点⑤（930万元）与点⑥（560万元）相比，点⑤的期望利润值较大，因此应采用扩建的方案，而舍弃不扩建的方案。把点⑤的930万元移到点4来，可计算出点③的期望利润值。</p> <p>点③：0.7×80×3+0.7×930+0.3×60×（3+7）-280 = 719（万元）</p> <blockquote> <p>最后比较决策点1的情况。由于点③（719万元）与点②（680万元）相比，点③的期望利润值较大，因此取点③而舍点②。这样，相比之下，建设大工厂的方案不是最优方案，合理的策略应采用前3年建小工厂，如销路好，后7年进行扩建的方案。</p> </blockquote> <h2 id="3-2-实例学习2"><a href="#3-2-实例学习2" class="headerlink" title="3.2 实例学习2"></a>3.2 实例学习2</h2><p>假设有一项工程，施工管理人员需要决定下月是否开工。如果开工后天气好，则可为国家创收4万元，若开工后天气坏，将给国家造成损失1万元，不开工则损失1000元。根据过去的统计资料，下月天气好的概率是0.3,天气坏的概率是0.7。请做出决策。现采用决策树方法进行决策。</p> <p>解：</p> <ul> <li>第一步：将题意表格化</li> </ul> <table> <thead> <tr> <th style="text-align:center">自然状态</th> <th style="text-align:center">概率</th> <th style="text-align:center">行动方案</th> <th style="text-align:center">行动方案</th> </tr> </thead> <tbody> <tr> <td style="text-align:center"></td> <td style="text-align:center"></td> <td style="text-align:center">开工</td> <td style="text-align:center">不开工</td> </tr> <tr> <td style="text-align:center">天气好</td> <td style="text-align:center">0.3</td> <td style="text-align:center">40000</td> <td style="text-align:center">-1000</td> </tr> <tr> <td style="text-align:center">天气坏</td> <td style="text-align:center">0.7</td> <td style="text-align:center">-10000</td> <td style="text-align:center">-1000</td> </tr> </tbody> </table> <ul> <li>第二步：画决策树形，根据第一步所列的表格，在绘制决策树，如下图：</li> </ul> <p><img src="/image2/decision_tree_03.jpeg" alt="决策树形"></p> <ul> <li>第三步：计算期望值</li> </ul> <p>一般按反向的时间程序逐步计算，将各方案的几种可能结果的数值和它们各自的概率相乘，并汇总所得之和，其和就是该方案的期望值。</p> <ul> <li>第四步：确定决策方案</li> </ul> <p>在比较方案考虑的是收益值时，则取最大期望值；若考虑的是损失时，则取最小期望值。<br>根据计算出的期望值分析，本题采取开工方案较好。 </p> <p><a href="./Attachment/决策树的画法A.ppt">更多的可以参考这个PPT</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 决策树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.10 hexo网页定制</title>
      <link href="//webcustomization/"/>
      <url>//webcustomization/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了1.10 hexo网页定制，要知道原作官方提供的hexo yeele网站的手机页面和电脑页面css布局和java页面交互的文本进行个性定制。第一部分，设置手机页面的 mobile-slider.styl 等文件， 里面的css文件。</p> <p>第二部分是java交互界面的文件设置。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="一、样式定制之css样式文件定制"><a href="#一、样式定制之css样式文件定制" class="headerlink" title="一、样式定制之css样式文件定制"></a>一、样式定制之css样式文件定制</h1><ul> <li>使用之前删掉里面的注释<h2 id="1-1-mobile-slider-styl"><a href="#1-1-mobile-slider-styl" class="headerlink" title="1.1 mobile-slider.styl"></a>1.1 mobile-slider.styl</h2></li> </ul> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#viewer</span>&#123;</span><br><span class="line"> <span class="attribute">position</span>: fixed;</span><br><span class="line"> <span class="attribute">z-index</span>: <span class="number">1000000</span>;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line">//mune bar setting</span><br><span class="line"><span class="selector-id">#viewer-box</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: flex;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"> <span class="attribute">position</span>: relative;</span><br><span class="line">//设置浮窗的左边距</span><br><span class="line"> <span class="selector-tag">left</span><span class="selector-pseudo">:30px</span>;</span><br><span class="line"> <span class="selector-tag">color</span>: <span class="selector-id">#0f0</span>;</span><br><span class="line"> <span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">translate3d</span>(<span class="selector-tag">-100</span>%, 0, 0 );</span><br><span class="line"> <span class="selector-tag">-webkit-transition</span>: <span class="selector-tag">-webkit-transform</span> <span class="selector-class">.25s</span> <span class="selector-tag">ease-in-out</span>;</span><br><span class="line">//设置悬浮的弹窗页面</span><br><span class="line"> <span class="selector-class">.viewer-box-l</span>&#123;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgba</span>(20,20,20,1);</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line"> <span class="attribute">height</span>: auto;</span><br><span class="line"> <span class="attribute">flex-grow</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">min-width</span>: <span class="number">8em</span>;</span><br><span class="line"> <span class="attribute">max-width</span>: <span class="number">23em</span>;</span><br><span class="line"> .viewer-box-wrap&#123;</span><br><span class="line"> //revise the moble menu</span><br><span class="line"> <span class="selector-tag">margin</span>: 20<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 0<span class="selector-tag">px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> //frends links menu</span><br><span class="line"> <span class="selector-class">.viewer-title</span>&#123;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">32px</span>;</span><br><span class="line"> //black</span><br><span class="line"> <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0,0,0,1);</span><br><span class="line"> &amp;<span class="selector-pseudo">:before</span>&#123;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">6px</span>;</span><br><span class="line"> //border: 1px solid #999;</span><br><span class="line"> <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#006699</span>;</span><br><span class="line"> <span class="selector-tag">-webkit-border-radius</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line"> <span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line"> //background is tabar of list content</span><br><span class="line"> <span class="selector-tag">background</span>: <span class="selector-id">#0000cc</span>;</span><br><span class="line"> <span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br><span class="line"> <span class="selector-tag">margin-right</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> //div Underline, dash</span><br><span class="line"> <span class="selector-class">.viewer-div</span>&#123;</span><br><span class="line"> //setting div 黄色背景幕布</span><br><span class="line"> <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(255,255,153,0<span class="selector-class">.85</span>);</span><br><span class="line"> //蓝色圆点</span><br><span class="line"> <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">dotted</span> <span class="selector-id">#0000cc</span>;</span><br><span class="line"> <span class="selector-tag">padding-bottom</span>: 13<span class="selector-tag">px</span>;</span><br><span class="line"> <span class="selector-tag">line-height</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line"> &amp;<span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line"> //设置标签背景白色透明，不继承上面的白色</span><br><span class="line"> <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line"> <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(229,229,255,0<span class="selector-class">.01</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.switch-friends-link</span>&#123;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">//black</span><br><span class="line"> <span class="selector-class">.viewer-box-r</span>&#123;</span><br><span class="line"> <span class="attribute">flex-grow</span>: <span class="number">1</span></span><br><span class="line"> width: auto</span><br><span class="line"> height: auto</span><br><span class="line"> background: <span class="built_in">rgba</span>(0,0,0,1)</span><br><span class="line"> &amp;:hover &#123;</span><br><span class="line"> cursor: w-resize</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#viewer-box</span><span class="selector-class">.anm-swipe</span>&#123;</span><br><span class="line"> <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line"> .viewer-box-r&#123;</span><br><span class="line"> <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0,0,0,1);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hide</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#viewer-box</span> <span class="selector-class">.viewer-list</span>&#123;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"> <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <h2 id="1-1-mobile-styl"><a href="#1-1-mobile-styl" class="headerlink" title="1.1 mobile.styl"></a>1.1 mobile.styl</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left-col</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mid-col</span> &#123;</span><br><span class="line"> <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span>&#123;</span><br><span class="line"> .header-nav&#123;</span><br><span class="line"> <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.header-menu</span> &#123;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">1.3</span></span><br><span class="line"> min-height <span class="number">3rem</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header-author</span>&#123;</span><br><span class="line"> &amp;.fixed&#123;</span><br><span class="line"> <span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;</span><br><span class="line"> <span class="selector-tag">top</span>: <span class="selector-tag">-8px</span>;</span><br><span class="line"> <span class="selector-tag">width</span>: 100%;</span><br><span class="line"> <span class="selector-tag">color</span>: <span class="selector-id">#ddd</span>;</span><br><span class="line"> <span class="selector-tag">a</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: white;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.overlay</span>&#123;</span><br><span class="line"> .slider-trigger&#123;</span><br><span class="line"> <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="comment">/*设置手机页面滑动图标置于最上层显示*/</span></span><br><span class="line"> <span class="selector-tag">z-index</span>: 999;</span><br><span class="line"> <span class="selector-tag">bottom</span>: 0;</span><br><span class="line"> <span class="selector-tag">left</span>: 0;</span><br><span class="line"> <span class="selector-tag">width</span>: 42<span class="selector-tag">px</span>;</span><br><span class="line"> <span class="selector-tag">height</span>: 42<span class="selector-tag">px</span>;</span><br><span class="line"> &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"> <span class="attribute">background</span>: <span class="number">#3399</span>;</span><br><span class="line"> <span class="comment">/*background: #444;*/</span></span><br><span class="line"> &#125;</span><br><span class="line"> &amp;<span class="selector-pseudo">:before</span>&#123;</span><br><span class="line"> <span class="comment">/*background: #ff3399;*/</span></span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#ddd</span>;</span><br><span class="line"> <span class="attribute">content</span>: <span class="string">"\f00b"</span>;</span><br><span class="line"> <span class="attribute">font</span>: <span class="number">16px</span> FontAwesome;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line"> <span class="attribute">margin-left</span>: <span class="number">9px</span>;</span><br><span class="line"> <span class="attribute">margin-top</span>: <span class="number">14px</span>;</span><br><span class="line"> <span class="attribute">display</span>: block;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.article-header</span>&#123;</span><br><span class="line"> <span class="attribute">border-left</span>: none;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">border-bottom</span>: <span class="number">1px</span> dotted <span class="number">#ddd</span>;</span><br><span class="line"> h1&#123;</span><br><span class="line"> <span class="selector-tag">margin-bottom</span>: 2<span class="selector-tag">px</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.header-subtitle</span>&#123;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">3em</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article-info-index</span><span class="selector-class">.article-info</span>&#123;</span><br><span class="line"> <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.article-info-post</span><span class="selector-class">.article-info</span>&#123;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line"> <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#viewer-box</span> <span class="selector-class">.viewer-box-l</span>&#123;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.article</span>&#123;</span><br><span class="line"> <span class="attribute">margin</span>: (<span class="number">10</span>/<span class="number">16</span>)rem <span class="number">10px</span>;</span><br><span class="line"> .article-entry&#123;</span><br><span class="line"> <span class="selector-tag">padding-left</span>: 0;</span><br><span class="line"> <span class="selector-tag">padding-right</span>: 0;</span><br><span class="line"> <span class="selector-class">.highlight</span> &#123;</span><br><span class="line"> padding .35em .6em</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.article-title</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: block;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"> font-size 1.5rem</span><br><span class="line"> <span class="selector-tag">font-weight</span> <span class="selector-tag">bold</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.article-meta</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: none;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article-inner</span> &#123;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.archive-article-inner</span> <span class="selector-class">.article-meta</span> &#123;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">margin-top</span>: .<span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.archives</span> &#123;</span><br><span class="line"> .archive-article &#123;</span><br><span class="line"> <span class="selector-tag">padding</span>: 0;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.archive-article-date</span> &#123;</span><br><span class="line"> <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.article-info</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: none;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.archive-article-inner</span> <span class="selector-class">.article-meta</span> <span class="selector-class">.archive-article-date</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.share</span>&#123;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.duoshuo</span> &#123;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#disqus_thread</span> &#123;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#mobile-nav</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page-nav</span> <span class="selector-class">.extend</span>&#123;</span><br><span class="line"> <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page-nav</span> &#123;</span><br><span class="line"> <span class="attribute">margin-top</span>: <span class="number">1em</span>;</span><br><span class="line"> .page-number &#123;</span><br><span class="line"> <span class="selector-tag">margin-bottom</span>: 1<span class="selector-class">.5em</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.instagram</span> <span class="selector-class">.open-ins</span>&#123;</span><br><span class="line"> <span class="attribute">left</span>: <span class="number">2px</span>;</span><br><span class="line"> <span class="attribute">top</span>: -<span class="number">30px</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.info-on-right</span>&#123;</span><br><span class="line"> <span class="attribute">float</span>: initial;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.archives-wrap</span>&#123;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">0px</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"> <span class="attribute">padding-right</span>: <span class="number">0</span>;</span><br><span class="line"> .archive-year-wrap&#123;</span><br><span class="line"> <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line"> <span class="selector-tag">padding</span>: 0 0 0 0;</span><br><span class="line"> <span class="selector-tag">a</span>&#123;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-tag">h1</span> &#123;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line"> <span class="attribute">margin-bottom</span>: .<span class="number">3em</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.archives</span>&#123;</span><br><span class="line"> .archive-article&#123;</span><br><span class="line"> <span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span> 0;</span><br><span class="line"> <span class="selector-tag">margin-left</span>: 0;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line"> .footer-left&#123;</span><br><span class="line"> <span class="selector-tag">float</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"> <span class="selector-tag">margin-bottom</span>: <span class="selector-class">.5em</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.footer-right</span>&#123;</span><br><span class="line"> <span class="attribute">float</span>: initial;</span><br><span class="line"> <span class="attribute">margin-bottom</span>: <span class="number">1em</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.visit</span> &#123;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article-category</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.article-tag</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.article-meta</span> <span class="selector-tag">time</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.visit</span> &#123;</span><br><span class="line"> <span class="attribute">margin-top</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tocButton</span> &#123;</span><br><span class="line"> <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"> <span class="attribute">position</span>: fixed;</span><br><span class="line"> <span class="attribute">left</span>: .<span class="number">5em</span>;</span><br><span class="line"> <span class="attribute">top</span>: auto; <span class="comment">/*In order to cover style in article.styl*/</span></span><br><span class="line"> <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line"> <span class="attribute">padding</span>: .<span class="number">2em</span> .<span class="number">4em</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line"> <span class="attribute">border-style </span>: outset;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 255, .7);</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line"> <span class="attribute">font-weight</span>: bold;</span><br><span class="line"> <span class="attribute">color</span>: gray;</span><br><span class="line"> &amp;:hover &#123;</span><br><span class="line"> <span class="selector-tag">color</span>: <span class="selector-id">#88acdb</span>;</span><br><span class="line"> <span class="selector-tag">font-size</span>: 1<span class="selector-tag">em</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toc-article</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: none;</span><br><span class="line"> <span class="attribute">z-index</span>: <span class="number">99</span></span><br><span class="line"> left: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">top</span>: <span class="number">38%</span>;</span><br><span class="line"> <span class="attribute">bottom</span>: <span class="number">1em</span>;</span><br><span class="line"> <span class="attribute">height</span>: auto;</span><br><span class="line"> <span class="attribute">max-height</span>: <span class="number">58%</span>;</span><br><span class="line"> <span class="attribute">width</span>: none;</span><br><span class="line"> <span class="attribute">width</span>: auto;</span><br><span class="line"> <span class="attribute">min-width</span>: <span class="number">7em</span>;</span><br><span class="line"> <span class="attribute">max-width</span>: <span class="number">61.8%</span>;</span><br><span class="line"> <span class="attribute">overflow</span>: auto;</span><br><span class="line"> <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"> <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">2.8%</span>;</span><br><span class="line"> <span class="attribute">background</span>: none;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">1.25em</span>;</span><br><span class="line"> .toc-title &#123;</span><br><span class="line"> <span class="selector-tag">display</span>: <span class="selector-tag">none</span>;</span><br><span class="line"> <span class="selector-tag">padding</span>: <span class="selector-class">.3em</span>;</span><br><span class="line"> <span class="selector-tag">color</span>: <span class="selector-tag">white</span>;</span><br><span class="line"> <span class="selector-tag">background</span>: <span class="selector-tag">lightgray</span>;</span><br><span class="line"> <span class="selector-tag">border-radius</span> 3<span class="selector-tag">px</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.toc</span> &#123;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0.5em</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-tag">ol</span> &#123;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">0.5em</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 255, .85);</span><br><span class="line"> ol &#123;</span><br><span class="line"> <span class="selector-tag">padding</span>: 0<span class="selector-class">.1em</span> 0;</span><br><span class="line"> <span class="selector-tag">padding-left</span>: 1<span class="selector-class">.2em</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-tag">a</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#767676</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">if</span> <span class="selector-tag">toc-nowrap</span></span><br><span class="line"> <span class="selector-tag">li</span><span class="selector-class">.toc-item</span></span><br><span class="line"> <span class="selector-tag">line-height</span>: 1<span class="selector-class">.2</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copyright</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line"> <span class="attribute">padding</span>: .<span class="number">5em</span> .<span class="number">8em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.scroll</span> &#123;</span><br><span class="line"> <span class="attribute">right</span>: <span class="number">1.2em</span>;</span><br><span class="line"> li &#123;</span><br><span class="line"> <span class="selector-tag">font-size</span>: 1<span class="selector-class">.7em</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hide-labels</span> &#123;</span><br><span class="line"> <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"> <span class="attribute">position</span>: fixed;</span><br><span class="line"> <span class="attribute">left</span>: .<span class="number">5em</span>;</span><br><span class="line"> <span class="attribute">top</span>: auto; </span><br><span class="line"> <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line"> <span class="attribute">padding</span>: .<span class="number">2em</span> .<span class="number">4em</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line"> <span class="attribute">border-style </span>: outset;</span><br><span class="line"> <span class="attribute">opacity</span>: .<span class="number">9</span>;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 255, .8);</span><br><span class="line"> <span class="attribute">font-weight</span>: bold;</span><br><span class="line"> <span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#post-nav-button</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-list</span> &#123;</span><br><span class="line"> <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*多说 UA*/</span></span><br><span class="line"><span class="selector-class">.ua</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">if</span> <span class="selector-tag">hexo-config</span>("<span class="selector-tag">github_widget</span>")</span><br><span class="line"> <span class="selector-class">.github-text</span></span><br><span class="line"> <span class="selector-tag">display</span> <span class="selector-tag">none</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.copyright</span></span><br><span class="line"> <span class="selector-tag">font-size</span> 16<span class="selector-tag">px</span></span><br><span class="line"> <span class="selector-class">.copy-path</span></span><br><span class="line"> <span class="selector-tag">display</span> <span class="selector-tag">none</span></span><br><span class="line"></span><br><span class="line">// Tags Cloud Page</span><br><span class="line"><span class="selector-class">.tags</span> <span class="selector-tag">a</span></span><br><span class="line"> <span class="selector-tag">line-height</span> 45<span class="selector-tag">px</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> css </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.9 hexo 实现本地图片加载</title>
      <link href="//hexolocalimage/"/>
      <url>//hexolocalimage/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了1.9 hexo 实现本地图片加载，要知道原作官方提供的hexo-asset-image，根本不能满足自己的需要，所以这里是基于原作的代码进行修改实现，原作并未其提供的代码做出解释说明，本文将对更改后能实现本地图片加载的代码进行解释，并有针对性的对后来遇到问题的，或者可以给你们提供二次修改说明的解释并提醒。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <p><a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">hexo-asset-image</a>,这是原作者提供的代码，有一个特别致命的问题，是每次hexo g,后，需要手动将图片一张张对应复制到public文件夹中对应你的博文对应生成的文件夹的路径下才可以实现，本地图片显示。那么问题来了，我如果写了很多博文，需要每次复制如此多的图片到不同博文对应生成的文件夹中去。太麻烦了</p> <ul> <li>若，我是写的书的格式，分章分节，一章我有10几节，那一个文件一个文件复制太麻烦了。</li> </ul> <h1 id="一、要解决的问题"><a href="#一、要解决的问题" class="headerlink" title="一、要解决的问题"></a>一、要解决的问题</h1><ul> <li>我们要解决既要加载本地图库在我们的站点显示</li> <li>又不想一个博文一个博文区分开了分别拷贝对应图片到public文件夹中</li> </ul> <blockquote> <p>假设：如果我们能够把每章节的很多文章的不同图片放到该章节的图库文件夹中，这样每章就一个图库文件，我们把图库（image1文件夹）直接复制到（source文件夹下），然后直接hexo clean &amp;&amp; hexo g 就可以，这样不用手动添加文件到问文件夹中。</p> </blockquote> <h1 id="二、操作"><a href="#二、操作" class="headerlink" title="二、操作"></a>二、操作</h1><h2 id="2-1-下载原作者的文件，然后修改原文件代码"><a href="#2-1-下载原作者的文件，然后修改原文件代码" class="headerlink" title="2.1 下载原作者的文件，然后修改原文件代码"></a>2.1 下载原作者的文件，然后修改原文件代码</h2><ul> <li>安装原作者的<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">hexo-asset-image</a></li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure> <h2 id="2-2-原始作者的代码如下（还未经过博主修改前的代码）"><a href="#2-2-原始作者的代码如下（还未经过博主修改前的代码）" class="headerlink" title="2,2 原始作者的代码如下（还未经过博主修改前的代码）"></a>2,2 原始作者的代码如下（还未经过博主修改前的代码）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> config = hexo.config;</span><br><span class="line"> <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line"> <span class="keyword">var</span> link = data.permalink;</span><br><span class="line"> <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"> <span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line"> <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line"> link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line"> <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line"> ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line"> xmlMode: <span class="literal">false</span>,</span><br><span class="line"> lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line"> decodeEntities: <span class="literal">false</span></span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line"> <span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line"> <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line"> <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line"> !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line"> <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line"> <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line"> <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line"> srcArray.shift();</span><br><span class="line"> src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line"> $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line"> <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line"> <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> data[key] = $.html();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> <h2 id="2-3-修改原作代码"><a href="#2-3-修改原作代码" class="headerlink" title="2.3 修改原作代码"></a>2.3 修改原作代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="comment">//获取对应链接的'/'分开的某部分</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> config = hexo.config;</span><br><span class="line"> <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line"> <span class="keyword">var</span> link = data.permalink;</span><br><span class="line"> <span class="comment">//调用上面的函数，取link链接的第三个'/'位置的数组下标值，做下面取链接的首地址区间。</span></span><br><span class="line"> <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line"> <span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line"> <span class="comment">//取link链接的最后一个'/'，做下面取链接的尾地址区间。</span></span><br><span class="line"> <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line"> <span class="comment">//取link连接中我们认为有用的地址部分。</span></span><br><span class="line"> link = link.substring(beginPos, endPos);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line"> <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line"> ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line"> xmlMode: <span class="literal">false</span>,</span><br><span class="line"> lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line"> decodeEntities: <span class="literal">false</span></span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line"> <span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line"> <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line"> <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line"> !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line"> <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line"> <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line"> <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="comment">//取图片的名字，比如 x.png</span></span><br><span class="line"> <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line"> srcArray.shift();</span><br><span class="line"> src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line"> <span class="comment">//$(this).attr('src', config.root + link + src);</span></span><br><span class="line"> <span class="comment">//notes: src is image name,and config.root is localhost:port,the middle cahr string is my local image Repository</span></span><br><span class="line"> <span class="comment">//这我们做判断，判断原始link链接的前3个字是不是“第一章”,如果是，我们将link地址写成'image1'，（image1是我们存放第一章所有图片的图库文件夹）</span></span><br><span class="line"> <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第一章"</span>)&#123;</span><br><span class="line"> <span class="comment">//第一章的所有图片放到这个文件夹下</span></span><br><span class="line"> link=<span class="string">"image1/"</span>;</span><br><span class="line"> <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the fist capture!"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//这我们做判断，判断原始link链接的前3个字是不是“第二章”,如果是，我们将link地址写成'image2'，（image2是我们存放第二章所有图片的图库文件夹）</span></span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第二章"</span>)&#123;</span><br><span class="line"> link=<span class="string">"image2/"</span>; </span><br><span class="line"> <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the second capture!"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第三章"</span>)&#123;</span><br><span class="line"> link=<span class="string">"image3/"</span>; </span><br><span class="line"> <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the third capture!"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第四章"</span>)&#123;</span><br><span class="line"> link=<span class="string">"image4/"</span>; </span><br><span class="line"> <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the fourth capture!"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第五章"</span>)&#123;</span><br><span class="line"> link=<span class="string">"image5/"</span>; </span><br><span class="line"> <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the fifth capture!"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第六章"</span>)&#123;</span><br><span class="line"> link=<span class="string">"image6/"</span>; </span><br><span class="line"> <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the sixth capture!"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(link.substring(<span class="number">0</span>,<span class="number">3</span>)==<span class="string">"第七章"</span>)&#123;</span><br><span class="line"> link=<span class="string">"image7/"</span>; </span><br><span class="line"> <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"judement the seventh capture!"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//$(this).attr('src', config.root + "image1/" + src);</span></span><br><span class="line"> <span class="comment">//这里我们做字符串的拼接，将最终输出的图片链接地址改为：config.root + link + src</span></span><br><span class="line"> <span class="comment">//其中config.root 是'/'表示根目录。link使我们的图库相对根目录的位置。src是图片的名字: x.png或其他格式图片</span></span><br><span class="line"> $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line"> <span class="comment">//终端上打印调试信息，供自己调试，是否每个图片输出地址是正确的。</span></span><br><span class="line"> <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + <span class="string">"=="</span> + link + <span class="string">"=="</span> + src);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line"> <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> data[key] = $.html();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> <h2 id="2-3-修改你站点文件根目录的-config-yml文件的配置信息"><a href="#2-3-修改你站点文件根目录的-config-yml文件的配置信息" class="headerlink" title="2.3 修改你站点文件根目录的_config.yml文件的配置信息"></a>2.3 修改你站点文件根目录的_config.yml文件的配置信息</h2><p>找到如下条，将默认的false改为true,注意_config.yml不是你的主题文件家中的文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true # local image to url,revise true</span><br></pre></td></tr></table></figure> <h2 id="2-4-我的博文目录格式如下图片所示："><a href="#2-4-我的博文目录格式如下图片所示：" class="headerlink" title="2.4 我的博文目录格式如下图片所示："></a>2.4 我的博文目录格式如下图片所示：</h2><p><img src="/image1/hexo_image1.png" alt="hexo_我的目录"></p> <h2 id="2-5-将你的的博文直接放到你站点根目录下的：source-gt-post文件夹下，如下图"><a href="#2-5-将你的的博文直接放到你站点根目录下的：source-gt-post文件夹下，如下图" class="headerlink" title="2.5 将你的的博文直接放到你站点根目录下的：source-&gt;_post文件夹下，如下图"></a>2.5 将你的的博文直接放到你站点根目录下的：source-&gt;_post文件夹下，如下图</h2><p><img src="/image1/hexo_image2.png" alt="hexo_我的目录"></p> <h2 id="2-6-将你的所有章节的图库文件夹直接放到source文件夹中即可"><a href="#2-6-将你的所有章节的图库文件夹直接放到source文件夹中即可" class="headerlink" title="2.6 将你的所有章节的图库文件夹直接放到source文件夹中即可"></a>2.6 将你的所有章节的图库文件夹直接放到source文件夹中即可</h2><p>如图：</p> <p><img src="/image1/hexo_image3.png" alt="hexo_我的目录"></p> <h1 id="三、Hexo手机页面优化"><a href="#三、Hexo手机页面优化" class="headerlink" title="三、Hexo手机页面优化"></a>三、Hexo手机页面优化</h1><p>文件路径</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">站点根目录/themes/yelee/source/css/_partial/mobile-slider.styl</span><br></pre></td></tr></table></figure> <p>修改mobile-slider.styl文件内容：</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#viewer&#123;</span><br><span class="line"> position: fixed;</span><br><span class="line"> z-index: 1000000;</span><br><span class="line"> top: 0;</span><br><span class="line"> bottom: 0;</span><br><span class="line"> left: 0;</span><br><span class="line"> right: 0;</span><br><span class="line"> overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">#viewer-box&#123;</span><br><span class="line"> display: flex;</span><br><span class="line"> width: 100%;</span><br><span class="line"> height: 100%;</span><br><span class="line"> position: relative;</span><br><span class="line"> color: #ccc;</span><br><span class="line"> -webkit-transform: translate3d(-100%, 0, 0 );</span><br><span class="line"> -webkit-transition: -webkit-transform .25s ease-in-out;</span><br><span class="line"> .viewer-box-l&#123;</span><br><span class="line"> background: rgba(20,20,20,1);</span><br><span class="line"> width: 80%;</span><br><span class="line"> height: auto;</span><br><span class="line"> flex-grow: 0;</span><br><span class="line"> min-width: 8em;</span><br><span class="line"> max-width: 23em;</span><br><span class="line"> .viewer-box-wrap&#123;</span><br><span class="line"> //revise the moble menu</span><br><span class="line"> margin: 20px 10px 0px 60px;</span><br><span class="line"> &#125;</span><br><span class="line"> .viewer-title&#123;</span><br><span class="line"> line-height: 32px;</span><br><span class="line"> &amp;:before&#123;</span><br><span class="line"> content: "";</span><br><span class="line"> width: 6px;</span><br><span class="line"> height: 6px;</span><br><span class="line"> border: 1px solid #999;</span><br><span class="line"> -webkit-border-radius: 10px;</span><br><span class="line"> border-radius: 10px;</span><br><span class="line"> background: #0000cc;</span><br><span class="line"> display: inline-block;</span><br><span class="line"> margin-right: 10px;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> .viewer-div&#123;</span><br><span class="line"> border-bottom: 1px dotted #666;</span><br><span class="line"> padding-bottom: 13px;</span><br><span class="line"> line-height: 20px;</span><br><span class="line"> &amp;:last-child&#123;</span><br><span class="line"> border-bottom: none;</span><br><span class="line"> &#125;</span><br><span class="line"> .switch-friends-link&#123;</span><br><span class="line"> line-height: 20px;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> .viewer-box-r&#123;</span><br><span class="line"> flex-grow: 1</span><br><span class="line"> width: auto</span><br><span class="line"> height: auto</span><br><span class="line"> background: rgba(0,0,0,0)</span><br><span class="line"> &amp;:hover &#123;</span><br><span class="line"> cursor: w-resize</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">#viewer-box.anm-swipe&#123;</span><br><span class="line"> -webkit-transform: translate3d(0, 0, 0);</span><br><span class="line"> .viewer-box-r&#123;</span><br><span class="line"> background: rgba(0,0,0,0);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">.hide&#123;</span><br><span class="line"> display: none;</span><br><span class="line">&#125;</span><br><span class="line">#viewer-box .viewer-list&#123;</span><br><span class="line"> margin: 0;</span><br><span class="line"> padding: 0;</span><br><span class="line"> height: 100%;</span><br><span class="line"> overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Conf </tag>
            
            <tag> hexo </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.12 logistic regression</title>
      <link href="//logisticRe/"/>
      <url>//logisticRe/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> logistic regression </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.13 局部响应归一化</title>
      <link href="//LRN/"/>
      <url>//LRN/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>LRN(Local Reponse Normalization, 局部响应归一化), 该层中其作用类似DROPOUT和数据增强作为relu激励之后防止数据过拟合而提出的一种处理方法。</p> <h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul> <li style="list-style: none"><input type="checkbox" checked> 有利于增加泛化能力</li> <li style="list-style: none"><input type="checkbox" checked> 做了平滑处理</li> <li style="list-style: none"><input type="checkbox" checked> 防止过拟合</li> </ul> <blockquote> <p>LRN 层模仿生物神经系统的侧抑制机制，对局部神经元的活动创建竞争机制，使得响应比较大的值相对更大，提高模型的泛化能力。</p> </blockquote> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> LRN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>朴素贝叶斯法</title>
      <link href="//pusubeiyesi/"/>
      <url>//pusubeiyesi/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>朴素贝叶斯方法是基于贝叶斯定理与条件假设的分类方法</p> <ul> <li>[1] 特征条件独立假设，求输入/出的联合概率分布d</li> <li><p>[2] 利用贝叶斯定理求出最大后验概率</p> </li> <li><p>[x] Edit By Porter, 积水成渊,蛟龙生焉。</p> </li> </ul> <a id="more"></a> <h2 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h2><p>$$p(c|x)= \frac{p(x|c)P(c)}{P(x)}$$</p> <h2 id="朴素贝叶斯基本方法-X-Y-独立同分布"><a href="#朴素贝叶斯基本方法-X-Y-独立同分布" class="headerlink" title="朴素贝叶斯基本方法(X,Y 独立同分布)"></a>朴素贝叶斯基本方法(X,Y 独立同分布)</h2><p>训练数据集T:</p> <p>$$T={(x_{1},y_{1}),(x_{2},y_{2}),…,(x_{N},y_{N}),} $$</p> <p>由$$P(x,y)$$独立同分布产生.</p> <p>$$P(Y=c_{k}|X=x)=\frac{P(X=x|Y=c_{k})P(Y=c_{k})}{\sum_{k}^{}P(X=x|Y=c_{k})P(Y=c_{k}) }$$</p> <h2 id="公式概念"><a href="#公式概念" class="headerlink" title="公式概念"></a>公式概念</h2><ul> <li>联合概率分布 </li> </ul> <p>$$P(X,Y)$$ 是独立同分布产生的联合概率分布。</p> <ul> <li>先验概率分布 </li> </ul> <p>$$P(Y=c_{k}),k=1,2,3,…,k$$</p> <ul> <li>条件概率分布 </li> </ul> <p>$$P(X=x|Y=c_{k}) = P(X^{1}=x^{1},X^{2}=x^{2},…X^{N}=x^{N}|Y=c_{k}) , k=1,2,3,…,k$$</p> <ul> <li>后验概率分布</li> </ul> <p>$$P(Y=c_{k}|X=x)$$</p> <h2 id="朴素贝叶斯的表达式"><a href="#朴素贝叶斯的表达式" class="headerlink" title="朴素贝叶斯的表达式"></a>朴素贝叶斯的表达式</h2><p>由于朴素二字的前提是独立特征分布概率，所以条件独立假设为(条件概率)为：</p> <p>$$P(X=x|Y=c_{k})=P(X^{1}=x^{1},X^{2}=x^{2},…,X^{n}=x^{n}|Y=c_{k})$$<br>$$=\prod <em>{j=1}^{n}P(X^{j}=x^{j}|Y=c</em>{k})$$</p> <blockquote> <p>朴素贝叶斯实际上是学习到生成数据的机制，所以属于生成学习模型</p> </blockquote> <h2 id="朴素贝叶斯分类器"><a href="#朴素贝叶斯分类器" class="headerlink" title="朴素贝叶斯分类器"></a>朴素贝叶斯分类器</h2><p>于是朴素贝叶斯分类器可表示为:</p> <p>$$y=f(x)=arg\;max_{c_{k}}\frac{P(Y=c_{k})\prod_{j} P(X^{j}=x^{j}|y=c_{k})}{\sum_{k}^{}P(Y=c_{k})\prod_{j}P(X^{j}=x^{j}|Y=c_{k}) }$$</p> <p>由于上式分母对$$c_{k}$$，都是相同的，所以分类器的输出y又可以是：</p> <p>$$y=f(x)=arg\;max_{c_{k}}P(Y=c_{k})\prod_{j} P(X^{j}=x^{j}|y=c_{k})$$</p> <h2 id="贝叶斯估计"><a href="#贝叶斯估计" class="headerlink" title="贝叶斯估计"></a>贝叶斯估计</h2><h3 id="条件概率贝叶斯估计"><a href="#条件概率贝叶斯估计" class="headerlink" title="条件概率贝叶斯估计"></a>条件概率贝叶斯估计</h3><p>$$<br>P(X^{j}=a_{jl}|Y=c_{k})=\frac{\sum_{i=1}^{N}I(x_{i}^{j}=a_{jl},y_{i}=c_{k})+\lambda }{\sum_{i=1}^{N}I(y_{i}=c_{k})+S_{j}\lambda }, j=1,2,…,n;l=1,2,..,S_{j};k=1,2,…,K<br>$$</p> <h3 id="先验概率的贝叶斯估计"><a href="#先验概率的贝叶斯估计" class="headerlink" title="先验概率的贝叶斯估计"></a>先验概率的贝叶斯估计</h3><p>$$<br>P(Y=c_{k})=\frac{\sum_{N}^{i=1}I(y_{i}=c_{k})+lambda }{N+k\lambda },k=1,2,…,K<br>$$</p> <div><br><iframe height="498" width="100%" src="https://www.bilibili.com/video/av7719936" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><br></div> <h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>参考文档来源2:<a href="">李航-朴素贝叶斯</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Bayes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ROS室内仿真环境</title>
      <link href="//rosSimulink/"/>
      <url>//rosSimulink/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本节笔记主要记录ROS室内仿真环景的具体演示过程和</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。 </li> </ul> <a id="more"></a> <h1 id="《机器人操作系统入门》课程代码示例"><a href="#《机器人操作系统入门》课程代码示例" class="headerlink" title="《机器人操作系统入门》课程代码示例"></a><center>《机器人操作系统入门》课程代码示例</center></h1><hr> <h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>欢迎来到中国大学MOOC—<a href="https://www.icourse163.org/" target="_blank" rel="noopener"><strong>《机器人操作系统入门》</strong></a>课程，本ROS软件包是课程的代码示例，课程中使用的例子均出自本代码包。除了代码包，课程还提供<a href="https://sychaichangkun.gitbooks.io/ros-tutorial-icourse163/content/" target="_blank" rel="noopener">讲义</a>，欢迎各位朋友下载、学习和分享。</p> <p>本示例包含了XBot机器人和中科院软件博物馆仿真、ROS通信示例程序、导航与SLAM功能演示，在每个软件包下都有相应的功能介绍。</p> <p><img src="/image4/robot_sim_demo.gif" alt="Gazebo仿真效果"></p> <p>如果你遇到任何问题，可以在Github上方的issues栏目中提问，我们课程团队会耐心回答。本示例将<strong>长期维护</strong>，<strong>不断更新</strong>，如果你认可我们的工作，请点击右上角的<strong>star</strong>按钮，您的鼓励是我们的动力。</p> <hr> <h2 id="示例介绍"><a href="#示例介绍" class="headerlink" title="示例介绍"></a>示例介绍</h2><p>本仓库为ROS入门教程的代码示例，包括以下ROS软件包:</p> <table> <thead> <tr> <th style="text-align:left">软件包</th> <th style="text-align:center">内容</th> </tr> </thead> <tbody> <tr> <td style="text-align:left"><strong>robot_sim_demo</strong></td> <td style="text-align:center">机器人仿真程序，大部分示例会用到这个软件包</td> </tr> <tr> <td style="text-align:left"><strong>topic_demo</strong></td> <td style="text-align:center">topic通信，自定义msg，包括C++和python两个版本实现</td> </tr> <tr> <td style="text-align:left"><strong>service_demo</strong></td> <td style="text-align:center">service通信，自定义srv，分别以C++和python两种语言实现</td> </tr> <tr> <td style="text-align:left"><strong>action_demo</strong></td> <td style="text-align:center">action通信，自定义action，C++和python两种语言实现</td> </tr> <tr> <td style="text-align:left"><strong>param_demo</strong></td> <td style="text-align:center">param操作，分别以C++和python两种语言实现</td> </tr> <tr> <td style="text-align:left"><strong>msgs_demo</strong></td> <td style="text-align:center">演示msg、srv、action文件的格式规范</td> </tr> <tr> <td style="text-align:left"><strong>tf_demo</strong></td> <td style="text-align:center">tf相关API操作演示，tf示例包括C++和python两个版本</td> </tr> <tr> <td style="text-align:left"><strong>tf_follower</strong></td> <td style="text-align:center">制作mybot机器人 实现mybot跟随xbot的功能</td> </tr> <tr> <td style="text-align:left"><strong>urdf_demo</strong></td> <td style="text-align:center">创建机器人urdf模型，在RViz中显示</td> </tr> <tr> <td style="text-align:left"><strong>navigation_sim_demo</strong></td> <td style="text-align:center">导航演示工具包，包括AMCL, Odometry Navigation等演示</td> </tr> <tr> <td style="text-align:left"><strong>slam_sim_demo</strong></td> <td style="text-align:center">同步定位与建图演示，包括Gmapping, Karto, Hector等SLAM演示</td> </tr> <tr> <td style="text-align:left"><strong>robot_orbslam2_demo</strong></td> <td style="text-align:center">ORB_SLAM2的演示</td> </tr> <tr> <td style="text-align:left"><strong>ros_academy_for_beginners</strong></td> <td style="text-align:center">Metapacakge示例，依赖了本仓库所有的pacakge</td> </tr> </tbody> </table> <hr> <h2 id="下载和编译"><a href="#下载和编译" class="headerlink" title="下载和编译"></a>下载和编译</h2><ol> <li><p>克隆或下载ROS-Academy-for-Beginners教学包到工作空间的<code>/src</code>目录下，例如 <code>~/catkin_ws/src</code></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/DroidAITech/ROS-Academy-for-Beginners.git</span><br></pre></td></tr></table></figure> </li> <li><p>安装教学包所需的依赖</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">$ rosdep install --from-paths src --ignore-src --rosdistro=kinetic -y</span><br></pre></td></tr></table></figure> </li> </ol> <p>如果安装失败,出现如下的错误信息：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR: the following packages/stacks could not have their rosdep keys resolved to system dependencies:</span><br><span class="line">slam_sim_demo: No definition of [hector_mapping] for OS [debian]</span><br><span class="line">navigation_sim_demo: No definition of [dwa_local_planner] for OS [debian]</span><br><span class="line">robot_sim_demo: No definition of [yocs_cmd_vel_mux] for OS [debian]</span><br></pre></td></tr></table></figure> <p>可以执行如下的命令(在ubuntu16下对应-xenial)</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosdep install --from-paths src --ignore-src --rosdistro=$&#123;ROS_DISTRO&#125; -y --os=ubuntu:xenial</span><br></pre></td></tr></table></figure> <ol start="3"> <li><p>编译并刷新环境</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ catkin_make</span><br><span class="line">$ <span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br></pre></td></tr></table></figure> </li> <li><p>运行示例</p> </li> </ol> <hr> <h2 id="运行须知"><a href="#运行须知" class="headerlink" title="运行须知"></a>运行须知</h2><ol> <li><p>建议在<strong>本地Ubuntu 16.04</strong>下运行仿真程序。目前Gazebo模拟器的<strong>兼容性</strong>是一大问题，在虚拟机或配置较低的电脑上可能无法运行。<strong>如果你的显卡是N卡，建议安装Ubuntu下的显卡驱动</strong>。</p> </li> <li><p>运行Gazebo仿真程序<code>robot_sim_demo</code>前，请将Gazebo升级到7.x版本以上（<strong>推荐7.9版本</strong>）。</p> <p>查看Gazebo版本方法</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gazebo -v <span class="comment">#确认7.0以上，推荐7.9</span></span><br></pre></td></tr></table></figure> <p>升级方法</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sh -c <span class="string">'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main" &gt; /etc/apt/sources.list.d/gazebo-stable.list'</span></span><br><span class="line">$ wget http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install gazebo7</span><br></pre></td></tr></table></figure> </li> <li><p>确保所有依赖都已安装，如<code>gazebo_ros</code>, <code>gmapping</code>, <code>slam_karto</code>, <code>amcl</code>。</p> </li> </ol> <hr> <h2 id="Copyright"><a href="#Copyright" class="headerlink" title="Copyright"></a>Copyright</h2><p><img src="/image4/joint_logo.png" alt="Logo"></p> <h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><h1 id="ROS-场景搭建"><a href="#ROS-场景搭建" class="headerlink" title="ROS 场景搭建"></a><center>ROS 场景搭建</center></h1><hr> <h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>目前这个项目是借鉴的XBot机器人和中科院软件博物馆仿真，在此做操作备注</p> <p><img src="/image4/robot_sim_demo.gif" alt="Gazebo仿真效果"></p> <h2 id="运行指令如下"><a href="#运行指令如下" class="headerlink" title="运行指令如下"></a>运行指令如下</h2><h3 id="1-编译并刷新环境"><a href="#1-编译并刷新环境" class="headerlink" title="1. 编译并刷新环境"></a>1. 编译并刷新环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> to/catkin_ws/</span><br><span class="line">$ catkin_make</span><br><span class="line">$ <span class="built_in">source</span> ./devel/setup.bash <span class="comment">#source devel/setup.bash</span></span><br></pre></td></tr></table></figure> <h3 id="2-执行打开指令"><a href="#2-执行打开指令" class="headerlink" title="2.执行打开指令"></a>2.执行打开指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">porter@porter-Aspire:~/ROS_Project/catkin_ws$ <span class="built_in">source</span> ./devel/setup.bash</span><br><span class="line">porter@porter-Aspire:~/ROS_Project/catkin_ws$ rospack profile</span><br><span class="line">porter@porter-Aspire:~/ROS_Project/catkin_ws$ roslaunch robot_sim_demo robot_spawn.launch</span><br></pre></td></tr></table></figure> <h3 id="3-等待启动"><a href="#3-等待启动" class="headerlink" title="3.等待启动"></a>3.等待启动</h3><p>将会花费数秒时间，然后才会出现效果</p> <h3 id="4-运行"><a href="#4-运行" class="headerlink" title="4.运行"></a>4.运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">porter@porter-Aspire:~/ROS_Project/catkin_ws$ <span class="built_in">source</span> devel/setup.bash</span><br><span class="line">porter@porter-Aspire:~/ROS_Project/catkin_ws$ rosrun robot_sim_demo robot_keyboard_teleop.py</span><br></pre></td></tr></table></figure> <ul> <li>注意每次运行rosrun 都source一下。</li> </ul> <p>聚焦控制程序窗口，按下i、j、l等按键，这样你就可以通过键盘来控制机器人的移动了。<br>javascript:void(0);</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.11 极大似然估计</title>
      <link href="//jidasiranguji/"/>
      <url>//jidasiranguji/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>极大似然估计,</p> <!-- TOC --> <ul> <li><a href="#摘要">摘要</a><ul> <li><a href="#原理">原理：</a></li> <li><a href="#举个例子">举个例子</a></li> </ul> </li> <li><a href="#贝叶斯的参数估计">贝叶斯的参数估计</a><ul> <li><a href="#先验概率的极大似然估计">先验概率的极大似然估计</a></li> <li><a href="#条件概率极大似然估计">条件概率极大似然估计</a></li> </ul> </li> <li><a href="#参考">参考</a></li> </ul> <!-- /TOC --> <h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><ul> <li><p>极大似然估计是建立在极大似然原理的基础上的一个统计方法，是概率论在统计学中的应用。</p> </li> <li><p>极大似然估计提供了一种给定观察数据来评估模型参数的方法，即：“模型已定，参数未知”。</p> </li> <li><p>通过若干次试验，观察其结果，利用试验结果得到某个参数值能够使样本出现的概率为最大，则称为极大似然估计。</p> </li> <li><p>[x] Edit By Porter, 积水成渊,蛟龙生焉。</p> </li> </ul> <a id="more"></a> <p><img src="/image2/jidasiran.jpeg" alt="极大似然估计"></p> <h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>由于样本集中的样本都是独立同分布，可以只考虑一类样本集D，来估计参数向量θ。记已知的样本集为：</p> <p>$$D={x_{1}, x_{2},…, x_{N}}$$</p> <p>似然函数（linkehood function）：联合概率密度函数$P(D|\theta )$称为相对于$${x_{1}, x_{2},…, x_{N}}$$的$\theta$的似然函数。</p> <p>$$<br>l(\theta)=P(D|\theta)=P(x_{1}, x_{2},…,x_{N}|\theta)=\prod <em>{i=1}^{N}P(x</em>{i}|\theta)<br>$$</p> <p> 如果 $\hat{\theta}$是参数空间中能使似然函数$l(\theta)$最大的θ值，$\hat{\theta}$则应该是“最可能”的参数值，那么 $\hat{\theta}$ 就是θ的极大似然估计量。它是样本集的函数，记作：</p> <p> $$\hat{\theta}=d(x_{1},x_{2},…,xx_{N})=d(D)$$</p> <p> $$\theta(x_{1},x_{2},…,xx_{N})$$,称为极大似然估计值</p> <h2 id="贝叶斯的参数估计"><a href="#贝叶斯的参数估计" class="headerlink" title="贝叶斯的参数估计"></a>贝叶斯的参数估计</h2><h3 id="先验概率的极大似然估计"><a href="#先验概率的极大似然估计" class="headerlink" title="先验概率的极大似然估计"></a>先验概率的极大似然估计</h3><p>$$<br>P(Y=c_{k})=\frac{\sum_{N}^{i=1}I(y_{i}=c_{k})}{N},k=1,2,…,K<br>$$</p> <p>I 为指示函数，上式的分子，表示$y_{i}=c_{k}$时的统计次数，分母表示一共有多少个样本。</p> <h3 id="条件概率极大似然估计"><a href="#条件概率极大似然估计" class="headerlink" title="条件概率极大似然估计"></a>条件概率极大似然估计</h3><p>$$<br>P(X^{j}=a_{jl}|Y=c_{k})=\frac{\sum_{i=1}^{N}I(x_{i}^{j}=a_{jl},y_{i}=c_{k})}{\sum_{i=1}^{N}I(y_{i}=c_{k})}, j=1,2,…,n;l=1,2,..,S_{j};k=1,2,…,K<br>$$</p> <div><br><iframe height="498" width="100%" src="//player.bilibili.com/player.html?aid=14846640&cid=24190212&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><br></div> <h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>参考文献1：<a href="https://blog.csdn.net/qq_39355550/article/details/81809467" target="_blank" rel="noopener">鹏大大大-CSDN</a><br>参考文档来源2:<a href="">李航-极大似然估计</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 最大似然估计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.1.3 隐马尔科夫HMM</title>
      <link href="//yingmaerkefu/"/>
      <url>//yingmaerkefu/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本篇文章笔记总结来自网络和书本，引用部分都有来源，内容主要介绍隐马尔科夫HMM相关实际应用搞得入门例子，很简单，但是能说明隐马尔科夫HMM的原理相关。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="HMM（隐马尔可夫模型）"><a href="#HMM（隐马尔可夫模型）" class="headerlink" title="HMM（隐马尔可夫模型）"></a>HMM（隐马尔可夫模型）</h1><p>隐马尔可夫模型是一种统计模型，用来描述一个含有隐含未知参数的马尔可夫过程。其难点是从可观察的参数中确定该过程的隐含参数。然后利用这些参数来作进一步的分析，例如模式识别。</p> <p>是在被建模的系统被认为是一个马尔可夫过程与未观测到的（隐藏的）的状态的统计马尔可夫模型。</p> <p>本文简述的是离散情况下的隐马尔可夫模型.</p> <h2 id="一、贝叶斯公式"><a href="#一、贝叶斯公式" class="headerlink" title="一、贝叶斯公式"></a>一、贝叶斯公式</h2><p>定义：假设以硬币的例子，从5角和1元的一堆硬币中，随意取出一枚硬币，然后然我们猜这枚硬币是5角还是1元。假设允许我们称这枚硬币的重量x（单位：g），(但是不允许我们直接看硬币，一般1元是比5角重的)。现在应考察在一直这枚硬币的重量x的情况下硬币属于各类（5角还是一元)的概率，分别记$$P(\omega_{1}|x)$$,(知重量为x时，是5角的概率),$$P(\omega_{2}|x)$$, (知重量为x时，是一元的概率)，这种概率成为后验概率（我们需要求的）。这时的决策为：如果$$P(\omega_{1}|x)&gt;P(\omega_{2}|x)$$,则$$x \epsilon \omega_{1} $$; 反之，则$$x \epsilon \omega_{2} $$</p> <ul> <li>最终我们要的就是这个决策。</li> </ul> <p>概率论中的贝叶斯公式：</p> <p>$$<br>P(\omega_{i}|x)=\frac{p(x,\omega_{i})}{p(\omega_{i})}=\frac{p|\omega_{i}P(\omega_{i})}{p(x)} ,i=1,2<br>$$</p> <table> <thead> <tr> <th style="text-align:center">分布</th> <th style="text-align:center">表示</th> <th style="text-align:left">$$x \epsilon \left { \omega_{1},\omega_{2} \right }$$</th> </tr> </thead> <tbody> <tr> <td style="text-align:center">类条件概率：</td> <td style="text-align:center">$$p(x\mid \omega_{i})$$</td> <td style="text-align:left">表示得到硬币结果是$$\omega_{i}$$条件下，得到x的概率密度</td> </tr> <tr> <td style="text-align:center">后验概率：</td> <td style="text-align:center">$$P(\omega_{i}\mid x)$$</td> <td style="text-align:left">在重量为x，的条件下，得到是哪种硬币（5/1）的概率</td> </tr> <tr> <td style="text-align:center">先验概率：</td> <td style="text-align:center">$$P(\omega_{i})$$</td> <td style="text-align:left">根据之前的经验，得到5角和1元各自取得的概率</td> </tr> <tr> <td style="text-align:center">硬币重量概率密度函数:</td> <td style="text-align:center">$$p(x)$$</td> <td style="text-align:left">硬币重量的概率密度函数</td> </tr> <tr> <td style="text-align:center">联合概率密度：</td> <td style="text-align:center">$$p(x,\omega_{i})$$</td> <td style="text-align:left">在重量不同条件下，每种情况对应的取得不同硬币结果的联合概率</td> </tr> </tbody> </table> <p>$$<br>P(Q_{i}|O)=\frac{P(O,Q_{i})}{P(O)}=\frac{P(O|Q_{i})P(Q)}{P(O)}<br>$$</p> <p>$$<br>P(Q_{i}|O)=\frac{P(O,Q_{i})}{P(O)}=\frac{P(O|Q_{i})P(Q)}{P(O)}<br>$$</p> <p>$$P(Q_{i}|O)$$ ,后验概率，$$P(O,Q_{i})$$ ,表示O与Q的联合概率密度；P(O)表示两类所有的概率密度； P(Q_{i})是先验概率；$$P(O|Q_{i})$$是第i类状态随机序列的类条件概率密度</p> <blockquote> <p>贝叶斯决策：在类条件概率密度和鲜艳概率已知（或可估计）的情况下，通过贝叶斯公式比较样本属于两类的后验概率，将类别决策为后验概率大的一类，这样做的目的是为了使总体错误率最小。</p> </blockquote> <p>一条隐藏的马尔可夫链生成的 <strong>状态随机序列</strong> (State sequence, 图中的白色节点) $$Q=(q_{1},q_{2},…..,q_{T})$$是<strong>不可观测的</strong>，并记所有可能状态的集合为$$S={S_{1},S_{2},…..,S_{N}}$$;由它们产生一个<strong>可观测的观测随机序列</strong>（observation sequence，图示的深色节点）$$O=(o_{1},o_{2},……,o_{T})$$, 并记所有可能观测的集合为$$V={v_{1},v_{2},……,v_{M}}$$。</p> <p>序列的值可以看作是随时刻产生的，每个时刻对应着序列的一个值。所以HMM是个双重随机过程（doubly embedded stochastic process），一个是状态转移，另一个是由状态释放出观测值。在序列标注（Sequence labelling）任务中，模型就是需要对状态序列进行标注。</p> <p><img src="/image2/HHMarkov_3.1.png" alt="HHM 示意图"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 隐马尔科夫HMM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>K近邻算法</title>
      <link href="//kjinglin/"/>
      <url>//kjinglin/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>K近邻算法(K-nearest neighbor, k-NN)是一种基本的分类与回归的方法。</p> <p>k近邻算法：</p> <p>输入：训练数据集</p> <p>$$T={(x_{1},y_{1}), (x_{2},y_{2})…, (x_{N},y_{N})}$$</p> <p>其中</p> <p>$$x_{i}\epsilon \chi \subseteq R^{n}$$</p> <p>为实例的特征向量</p> <p>$$y_{i} \epsilon Y={c_{1}, c_{2}……, c_{K}, }$$</p> <p>为实例的类别,i=1,2,…,N</p> <p>输出：给定实例x，要能输出新给的特征向量所属y中的类</p> <p>(1). 根据给定的距离度量，在训练集T中找出与x最邻近的k个点，涵盖这k个点的x的邻域基座 $N_{k} (x)$ ;</p> <p>(2). 在 $N_{k} (x)$ 中根据分类决策规则（如多数表决表，对$N_{k} (x)$ 进行排序，然后取出现频率最高的第k个点的类）决定x的类别y：</p> <p>$$<br>y=arg\, \max_{c_{j}}^{\ } \sum_{x_{i}\subseteq N_{k}(x)}^{\ } I(y_{i}=c_{j})<br>$$</p> <p>其中I为指示函数，为$$y_{i}=c_{j}$$情况下, I = 1 否则I = 0</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>更通俗的理解可以为如下：</p> <h2 id="KNN是通过测量不同特征值之间的距离进行分类"><a href="#KNN是通过测量不同特征值之间的距离进行分类" class="headerlink" title="KNN是通过测量不同特征值之间的距离进行分类"></a>KNN是通过测量不同特征值之间的距离进行分类</h2><ul> <li>它的思路是：</li> </ul> <p>如果选择一个待分类的样本，其在特征空间中有k个最相似的样本值（即特征空间中和这个待分类的点为最邻近点集）。</p> <p>这k个样本集中的绝大多数属于某一类别，则该待分类的样本也属于这个绝大多数的同一类别。</p> <p>其中K通常是不大于20的整数。</p> <p>KNN算法中，所选择的邻居都是已经正确分类的对象。该方法在定类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别。</p> <h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>下面通过一个简单的例子说明一下：如下图，绿色圆要被决定赋予哪个类，是红色三角形还是蓝色四方形？如下图所示</p> <ul> <li><p>如果K=3，最小的圆, 由于红色三角形所占比例为2/3，绿色圆将被赋予红色三角形那个类。</p> </li> <li><p>如果K=5，虚线内，由于蓝色四方形比例为3/5，因此绿色圆被赋予蓝色四方形类。</p> </li> </ul> <p><img src="/image2/knn_1.jpg" alt="knn算法例子"></p> <p>由此也说明了KNN算法的结果很大程度取决于K的选择。</p> <p>在KNN中，通过计算对象间距离来作为各个对象之间的非相似性指标，避免了对象之间的匹配问题，在这里距离一般使用欧氏距离或曼哈顿距离：</p> <h3 id="欧氏距离："><a href="#欧氏距离：" class="headerlink" title="欧氏距离："></a>欧氏距离：</h3><p>$$<br>d(x,y)=\sqrt{\sum_{k=1}^{n}(x_{k}-y_{k})^{2}}<br>$$</p> <h3 id="曼哈顿距离："><a href="#曼哈顿距离：" class="headerlink" title="曼哈顿距离："></a>曼哈顿距离：</h3><p>$$<br>d(x,y)=\sqrt{\sum_{k=1}^{n}|x_{k}-y_{k}|}<br>$$</p> <p>同时，KNN通过依据k个对象中占优的类别进行决策，而不是单一的对象类别决策。这两点就是KNN算法的优势。</p> <hr> <h2 id="接下来对KNN算法的思想总结一下"><a href="#接下来对KNN算法的思想总结一下" class="headerlink" title="接下来对KNN算法的思想总结一下"></a>接下来对KNN算法的思想总结一下</h2><p>就是在训练集中数据和标签已知的情况下，输入测试数据，将测试数据的特征与训练集中对应的特征进行相互比较，找到训练集中与之最为相似的前K个数据，则该测试数据对应的类别就是K个数据中出现次数最多的那个分类，其算法的描述为：</p> <ul> <li><p>1）计算测试数据与各个训练数据之间的距离；</p> </li> <li><p>2）按照距离的递增关系进行排序；</p> </li> <li><p>3）选取距离最小的K个点；</p> </li> <li><p>4）确定前K个点所在类别的出现频率；</p> </li> <li><p>5）返回前K个点中出现频率最高的类别作为测试数据的预测分类。</p> </li> </ul> <p>python 代码实现：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"><span class="comment">##给出训练数据以及对应的类别</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataSet</span><span class="params">()</span>:</span></span><br><span class="line"> group = array([[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">1.2</span>,<span class="number">0.1</span>],[<span class="number">0.1</span>,<span class="number">1.4</span>],[<span class="number">0.3</span>,<span class="number">3.5</span>]])</span><br><span class="line"> labels = [<span class="string">'A'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'B'</span>]</span><br><span class="line"> <span class="keyword">return</span> group,labels</span><br><span class="line"></span><br><span class="line"><span class="comment">###通过KNN进行分类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(input,dataSe t,label,k)</span>:</span></span><br><span class="line"> dataSize = dataSet.shape[<span class="number">0</span>]</span><br><span class="line"> <span class="comment">####计算欧式距离</span></span><br><span class="line"> diff = tile(input,(dataSize,<span class="number">1</span>)) - dataSet</span><br><span class="line"> sqdiff = diff ** <span class="number">2</span></span><br><span class="line"> squareDist = sum(sqdiff,axis = <span class="number">1</span>)<span class="comment">###行向量分别相加，从而得到新的一个行向量</span></span><br><span class="line"> dist = squareDist ** <span class="number">0.5</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">##对距离进行排序</span></span><br><span class="line"> sortedDistIndex = argsort(dist)<span class="comment">##argsort()根据元素的值从大到小对元素进行排序，返回下标</span></span><br><span class="line"></span><br><span class="line"> classCount=&#123;&#125;</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line"> voteLabel = label[sortedDistIndex[i]]</span><br><span class="line"> <span class="comment">###对选取的K个样本所属的类别个数进行统计</span></span><br><span class="line"> classCount[voteLabel] = classCount.get(voteLabel,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"> <span class="comment">###选取出现的类别次数最多的类别</span></span><br><span class="line"> maxCount = <span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> key,value <span class="keyword">in</span> classCount.items():</span><br><span class="line"> <span class="keyword">if</span> value &gt; maxCount:</span><br><span class="line"> maxCount = value</span><br><span class="line"> classes = key</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> classes</span><br></pre></td></tr></table></figure> <p>测试代码如下：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">"...文件路径..."</span>)</span><br><span class="line"><span class="keyword">import</span> KNN</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line">dataSet,labels = KNN.createDataSet()</span><br><span class="line">input = array([<span class="number">1.1</span>,<span class="number">0.3</span>])</span><br><span class="line">K = <span class="number">3</span></span><br><span class="line">output = KNN.classify(input,dataSet,labels,K)</span><br><span class="line">print(<span class="string">"测试数据为:"</span>,input,<span class="string">"分类结果为："</span>,output)</span><br></pre></td></tr></table></figure> <p>回车之后的结果为：</p> <p>测试数据为： [ 1.1 0.3] 分类为： A</p> <p>答案符合我们的预期，要证明算法的准确性，势必还需要通过处理复杂问题进行验证，之后另行说明。</p> <p>【提示】python版本为3.7</p> <p>具体的KNN视频教程地址为：</p> <div><br><iframe height="498" width="100%" src="https://player.bilibili.com/player.html?aid=38792500&cid=68183480&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><br></div> <h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>参考文档来源1:<a href="https://www.cnblogs.com/ybjourney/p/4702562.html" target="_blank" rel="noopener">Yabea-博客</a></p> <p>参考文档来源2:<a href="">李航-统计学习方法</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> KNN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.1.2 最大熵模型</title>
      <link href="//zuidashangmoxing/"/>
      <url>//zuidashangmoxing/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本篇文章笔记总结来自网络和书本，引用部分都有来源，内容主要介绍最大熵相关实际应用搞得入门例子，很简单，但是能说明最大熵的原理相关。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="2-1-2-隐马尔科夫HMM"><a href="#2-1-2-隐马尔科夫HMM" class="headerlink" title="2.1.2 隐马尔科夫HMM"></a>2.1.2 隐马尔科夫HMM</h1><p>在讲HMM前先看看什么是熵的概念</p> <h2 id="一、什么是熵-Entropy"><a href="#一、什么是熵-Entropy" class="headerlink" title="一、什么是熵(Entropy)"></a>一、什么是熵(Entropy)</h2><p>信息熵的概念这个得从 <strong>热熵</strong> 开始说起，信熵是香农老先生从热力学引进来的，为了表示把信息中排除了冗余后的平均信息量称为“信息熵”。</p> <ul> <li>热力学中的热熵是表示分子状态混乱程度的物理量。香农用信息熵的概念来描述信源的不确定度。</li> </ul> <h3 id="1-1-热力学中–热熵"><a href="#1-1-热力学中–热熵" class="headerlink" title="1.1 热力学中–热熵"></a>1.1 热力学中–热熵</h3><p>从能量角度来看,熵定律意味着自然进行的能量转化过程总是由有序度高的能量向有序度低的能量转化,这个过程必定朝着熵增加的方向进行。</p> <p>高温物体所有分子的平均能量要高于低温物体,所以相接触时总是从高温物体向低温物体传递热量,因为碰撞使它们的状态向平衡过渡,系统才会稳定;</p> <p>热熵是向着熵增大的方向进行。从宇宙形成到地球诞生以及地球生命的形成,热熵一直有缓慢变大的趋势。</p> <p><img src="/image2/hotShang_1.1.jpeg" alt="熵增"></p> <h4 id="热熵改变是指在某个空间内热量分布的变化。"><a href="#热熵改变是指在某个空间内热量分布的变化。" class="headerlink" title="热熵改变是指在某个空间内热量分布的变化。"></a>热熵改变是指在某个空间内热量分布的变化。</h4><ul> <li><p>1、在热力学中熵是对热量状态的描述，空间内热量分布差异越大则熵越小，做功的能力越强；空间内热量分布差异越小则熵越大，做功的能力越弱。热熵改变是指在某个空间内热量分布的变化，熵越大则热量分布的差异越小。正常情况下熵会从小到大的变化，最终熵达到最大而呈热寂。</p> </li> <li><p>2、根据热力学第二定律，作为一个“孤立”的系统，宇宙的熵会随着时间的流逝而增加，由有序向无序，当宇宙的熵达到最大值时，宇宙中的其他有效能量已经全数转化为热能，所有物质温度达到热平衡。这种状态称为热寂。这样的宇宙中再也没有任何可以维持运动或是生命的能量存在。</p> </li> <li>3、热熵改变的本质是热量分布由有序向无序发展，所以也可以看成系统混乱程度的改变。</li> <li>4、熵最初是根据热力学第二定律引出的一个反映自发过程不可逆性的物质状态参量。热力学第二定律是根据大量观察结果总结出来的规律，有下述表述方式：热量总是从高温物体传到低温物体，不可能作相反的传递而不引起其他的变化；功可以全部转化为热，但任何热机不能全部地，连续不断地把所接受的热量转变为功；在孤立系统中，实际发生过程总使整个系统的熵值增大，此即熵增原理。 <blockquote> <p>简单总结：热熵是熵增的过程，热量由有序的状态，转移，或是机械能，或是向其他低温物体转移，产生的影响是，最终达到系统平衡的目的，但也使得整个系统不再是以前清晰的状态，相反是变成了另一种混乱的状态，可以这样白话理解。</p> </blockquote> </li> </ul> <h3 id="1-2-信息论中的信息熵–信熵"><a href="#1-2-信息论中的信息熵–信熵" class="headerlink" title="1.2 信息论中的信息熵–信熵"></a>1.2 信息论中的信息熵–信熵</h3><ul> <li>香农用信息熵的概念来描述信源的不确定度。</li> </ul> <h4 id="信息量"><a href="#信息量" class="headerlink" title="信息量"></a>信息量</h4><p>信息量：一个事件发生的概率越小，信息量越大，所以信息量应该为概率的减函数，对于相互独立的两个事有p(xy)=p(x)p(y)，对于这两个事件信息量应满足h(xy)=h(x)+h(y)，那么信息量应为对数函数：</p> <p><img src="/image2/HMM_xinxiL.png" alt="信息量"></p> <h4 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h4><p>根据Charles H. Bennett对Maxwell’s Demon的重新解释，对信息的销毁是一个不可逆过程，所以销毁信息是符合热力学第二定律的。而产生信息，则是为系统引入负（热力学）熵的过程。所以信息熵的符号与热力学熵应该是相反的。</p> <ul> <li>假设离散随机变量X的概率分布为P(x)，则其熵为：</li> </ul> <p><img src="/image2/hotShang_1.2.jpeg" alt="熵增"></p> <p>H(x) = E[I(xi)] = E[ log(2,1/p(xi)) ] = -∑p(xi)log(2,p(xi)) (i=1,2,..n)</p> <p>其中，x表示随机变量，与之相对应的是所有可能输出的集合，定义为符号集,随机变量的输出用x表示。P(x)表示输出概率函数。<strong>变量的不确定性越大，熵也就越大</strong> ，把它搞清楚所需要的信息量也就越大.</p> <p>能量角度，高温向低温转变，一般是熵增的过程；而信息论中，为了最大可能接收到正确的（发出==收到）的信息，我们处理（优化）系统，是一种熵减的过程，信熵越小，系统有用信息量越大。</p> <p>信息熵：<strong>信息的基本作用就是消除人们对事物的不确定性</strong> 。多数粒子组合之后，在它似像非像的形态上押上有价值的数码，具体地说，这就是一个在博弈对局中现象信息的混乱。</p> <h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p>-(p1<em>log(2,p1) + p2 </em> log(2,p2) +　．．．　+p32 *log(2,p32))，其中，p1，p2 ，　．．．，p32 分别是这 32 个球队夺冠的概率。香农把它称为“信息熵” (Entropy)，一般用符号 H 表示，单位是比特。</p> <p><img src="/image2/hotShang_1.3.jpeg" alt="熵增"></p> <p>有兴趣的读者可以推算一下当 32 个球队夺冠概率相同时，对应的信息熵等于五比特。有数学基础的读者还可以证明上面公式的值不可能大于五。因为得冠军的频率相同代表整个系统信息量最小。</p> <p>熵是随机变量不确定性的度量，不确定性越大，熵值就越大；若随机变量退化成定值，熵为0。均匀分布(信熵最大)是“最不确定”的分布。</p> <p>熵最早来原于物理学. 德国物理学家鲁道夫·克劳修斯首次提出熵的概念，用来表示任何一种能量在空间中分布的均匀程度，能量分布得越均匀，熵就越大。</p> <blockquote> <p>总结：香农，描述一个信息系统的时候就借用了熵的概念，这里熵表示的是这个信息系统的平均信息量(平均不确定程度),信熵越小，系统信息不确定程度越低，反之，系统信息输出越混乱，有用信息越不容易被确认。</p> </blockquote> <h3 id="1-3-联合熵"><a href="#1-3-联合熵" class="headerlink" title="1.3 联合熵"></a>1.3 联合熵</h3><p>联合熵是一集变量之间不确定性的衡量手段。两个变量和的联合信息熵定义为：</p> <p><img src="/image2/lianheShang1.3.1.png" alt="联合熵"></p> <ul> <li>一集变量的联合熵大于或等于这集变量中任一个的独立熵。</li> </ul> <p><img src="/image2/lianheShang1.3.2.png" alt="联合熵"> </p> <ul> <li>少于独立熵的和</li> </ul> <p><img src="/image2/lianheShang1.3.3.png" alt="联合熵"> </p> <p>这表明，两个变量关联之后不确定性会增大，但是又由于相互有制约关系，不确定小于单独两个变量的不确定度之和。</p> <h3 id="1-4-条件熵"><a href="#1-4-条件熵" class="headerlink" title="1.4 条件熵"></a>1.4 条件熵</h3><ul> <li>条件熵H(X|Y) = H(X,Y) - H(Y)</li> </ul> <blockquote> <p>X在条件Y下的条件熵</p> </blockquote> <p><img src="/image2/tiaojianShang1.4.1.png" alt="条件熵"> </p> <p>条件熵 H(Y|X) 表示在已知随机变量 X 的条件下随机变量 Y 的不确定性。条件熵 H(Y|X) 定义为 X 给定条件下 Y 的条件概率分布的熵对 X 的数学期望：</p> <p>证明如下：</p> <p><img src="/image2/HMM_tiaojianS_1.4.1.png" alt="条件熵"></p> <p>条件熵 H(Y|X) 相当于联合熵 H(X,Y) 减去单独的熵 H(X)，即</p> <p><img src="/image2/HMM_tiaojianS_1.4.2.png" alt="条件熵"></p> <p>举个例子，比如环境温度是低还是高，和我穿短袖还是外套这两个事件可以组成联合概率分布 H(X,Y)，因为两个事件加起来的信息量肯定是大于单一事件的信息量的。假设 H(X) 对应着今天环境温度的信息量，由于今天环境温度和今天我穿什么衣服这两个事件并不是独立分布的，所以在已知今天环境温度的情况下，我穿什么衣服的信息量或者说不确定性是被减少了(条件熵减少，联合熵是不变)。当已知 H(X) 这个信息量的时候，H(X,Y) 剩下的信息量就是条件熵：</p> <p>H(Y|X)=H(X,Y)−H(X)</p> <h3 id="1-5-相对熵与互信息"><a href="#1-5-相对熵与互信息" class="headerlink" title="1.5 相对熵与互信息"></a>1.5 相对熵与互信息</h3><ul> <li><p>相对熵 (Relative entropy)，也称KL散度 (Kullback–Leibler divergence)</p> <p>设p(x),q(x)是X中取值的两个概率分布，则p对q的相对熵是：</p> </li> </ul> <p><img src="/image2/HMM_xiangduiS_1.5.1.gif" alt="相对熵"></p> <p>性质： </p> <ul> <li>1、如果 p(x) 和 q(x) 两个分布相同，那么相对熵等于0</li> <li>2、<img src="/image2/HMM_xiangduiS_1.5.2.gif" alt="相对熵"> ,相对熵具有不对称性。大家可以举个简单例子算一下。</li> <li>3、DKL(p||q)≥0 证明如下（利用Jensen不等式<a href="https://en.wikipedia.org/wiki/Jensen%27s_inequality）：" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Jensen%27s_inequality）：</a></li> </ul> <p><img src="/image2/HMM_xiangduiS_1.5.3.png" alt="相对熵"></p> <p>因为：</p> <p><img src="/image2/HMM_xiangduiS_1.5.4.gif" alt="相对熵"></p> <p>所以：</p> <p><img src="/image2/HMM_xiangduiS_1.5.5.gif" alt="相对熵"></p> <p>总结：相对熵可以用来衡量两个概率分布之间的差异，上面公式的意义就是求 p 与 q 之间的对数差在 p 上的期望值。</p> <blockquote> <p>相对熵，两者相同，那么相对熵等于0，两者差距越大，则相对熵值越大。</p> </blockquote> <h4 id="互信息"><a href="#互信息" class="headerlink" title="互信息"></a>互信息</h4><p>两个随机变量X，Y的联合分布与独立分布乘积的相对熵，即：</p> <p><img src="/image2/huxinxi_1.png" alt="互信息"></p> <p><img src="/image2/huxinxi_2.png" alt="互信息"></p> <h3 id="1-6-交叉熵-Cross-entropy"><a href="#1-6-交叉熵-Cross-entropy" class="headerlink" title="1.6 交叉熵 (Cross entropy)"></a>1.6 交叉熵 (Cross entropy)</h3><p>熵的公式：<br>$$<br>H(p)=-\displaystyle\sum_{x}p(x)logp(x)<br>$$</p> <p>相对熵的公式：</p> <p>$$<br>H(p,q)=\displaystyle\sum _{x}p(x)log\frac{1}{q(x)}=-\sum _{x}p(x)logq(x)<br>$$</p> <p>所以有：</p> <p>$$<br>D_{KL}(p||q)=H(p,q)-H(p)<br>$$</p> <blockquote> <p>当用非真实分布 q(x) 得到的平均码长比真实分布 p(x) 得到的平均码长多出的比特数就是相对熵）</p> </blockquote> <blockquote> <p>并且当 H(p) 为常量时（注：在机器学习中，训练数据分布是固定的），最小化相对熵 DKL(p||q) 等价于最小化交叉熵 H(p,q) 也等价于最大化似然估计（具体参考Deep Learning 5.5）。</p> </blockquote> <blockquote> <p>在机器学习中，我们希望在训练数据上模型学到的分布 P(model) 和真实数据的分布 P(real) 越接近越好，所以我们可以使其相对熵最小。</p> </blockquote> <ul> <li>信息熵是衡量随机变量分布的混乱程度，是随机分布各事件发生的信息量的期望值，随机变量的取值个数越多，状态数也就越多，信息熵就越大，混乱程度就越大。当随机分布为均匀分布时，熵最大；信息熵推广到多维领域，则可得到联合信息熵；条件熵表示的是在 X 给定条件下，Y 的条件概率分布的熵对 X<br>的期望。</li> <li>相对熵可以用来衡量两个概率分布之间的差异。</li> <li>交叉熵可以来衡量在给定的真实分布下，使用非真实分布所指定的策略消除系统的不确定性所需要付出的努力的大小。</li> </ul> <ul> <li>几种熵的关系：</li> </ul> <p><img src="/image2/shangzongJ.png" alt="熵关系"></p> <h2 id="二、最大熵模型"><a href="#二、最大熵模型" class="headerlink" title="二、最大熵模型"></a>二、<a href="https://www.cnblogs.com/hgl0417/p/6693656.html" target="_blank" rel="noopener">最大熵模型</a></h2><ul> <li><p>最大熵模型在形式上是最漂亮的统计模型，而在实现上是最复杂的模型之一。最大熵模型，可以说是集简与繁于一体，形式简单，实现复杂。值得一提的是，在Google的很多产品中，比如机器翻译，都直接或间接地用到了最大熵模型。 </p> </li> <li><p>达拉皮垂兄弟等科学家在那里，用于最大熵模型和其他一些先进的数学工具对股票预测，获得了巨大的成功。(值得一提的是，信息处理的很多数学手段，包括隐含马尔可夫模型、子波变换、贝叶斯网络等等，在华尔街多有直接的应用。由此可见，数学模型的作用)。</p> </li> </ul> <p>我们平常说的最大熵模型，只是运用最大熵思想的多分类模型，最大熵的思想却是一种通用的思维方法。所以，理解最大熵模型只需要搞清楚两件事就可以：</p> <ul> <li>最大熵思想是什么</li> <li>最大熵模型是如何运用最大熵思想的</li> </ul> <h3 id="2-1-最大熵思想"><a href="#2-1-最大熵思想" class="headerlink" title="2.1 最大熵思想"></a>2.1 最大熵思想</h3><p>我们知道，分类模型有判别模型和生成模型两种，判别模型是要学习一个条件概率分布 P(y|x)。<br><strong>举例说明</strong> ，设：x是病人身体指标，体温、血压、血糖，y是各种可能的疾病，可简化为小病、中病、大病三种。</p> <p>现在，我们有一个样本x1={体温：30，血压：160，血糖：60}，那么P(y|x1)就是一个概率分布，该分布的值就是上面简化的三种，小病、中病、大病。可能的概率分布如下所示：</p> <table> <thead> <tr> <th style="text-align:center">之前参考样本\病况</th> <th style="text-align:center">小病</th> <th style="text-align:center">中病</th> <th style="text-align:center">大病</th> </tr> </thead> <tbody> <tr> <td style="text-align:center">假设之前有和X1一样的情况有1/2的患者为小病，则此时的最大熵参考样本为</td> <td style="text-align:center">1/2</td> <td style="text-align:center">1/4</td> <td style="text-align:center">1/4</td> </tr> <tr> <td style="text-align:center">先前12个人和X1一样，结果有3个小病，4个中病的患者，则5个大病</td> <td style="text-align:center">1/4</td> <td style="text-align:center">1/3</td> <td style="text-align:center">5/12</td> </tr> <tr> <td style="text-align:center">无先前参考样本，假设取最大熵的概率</td> <td style="text-align:center">1/3</td> <td style="text-align:center">1/3</td> <td style="text-align:center">1/3</td> </tr> </tbody> </table> <blockquote> <p>当然，这样的分布有无数种，上面只是举例说明而已。那么，问题来了，在这无数种概率分布中，哪一个才是好的呢？</p> </blockquote> <ul> <li><p>1、也就是说我们没有过往的经验可以参考，那么，就直接选一个熵最大的分布就是，也就是上面表格中的第三个分布，因为均匀分布总是同类分布中熵最大的分布。</p> </li> <li><p>2、如果查看以往病例后，我们得到一个经验，指标x1={体温：30，血压：160，血糖：60}有1/2的概率是小病，于是我们有了一定的经验知识，此时，最好的分布就是符合这个经验知识的前提下，熵最大的分布，显然，第一个分布就是最好的分布。</p> </li> <li><p>以上，我们就是运用了 <strong>最大熵的思想</strong> 。总结来说，最大熵的思想是，当你要猜一个概率分布时，如果你对这个分布一无所知，那就猜熵最大的均匀分布，如果你对这个分布知道一些情况，那么，就猜满足这些情况的熵最大的分布。</p> </li> </ul> <h3 id="2-2-运用最大熵思想来做多分类问题"><a href="#2-2-运用最大熵思想来做多分类问题" class="headerlink" title="2.2 运用最大熵思想来做多分类问题"></a>2.2 运用最大熵思想来做多分类问题</h3><ul> <li>最大熵原理认为，学习概率模型时，在所有可能的概率模型（分布）中，上最大的模型是最好 的模型。 </li> </ul> <p>假设离散随机变量X的概率分布是P(X)，则其熵是：</p> <p><img src="/image2/hotShang_1.2.jpeg" alt="熵增"></p> <p>熵取值范围为（当且仅当X是均匀分布时右边的等号成立）：</p> <p><img src="/image2/shangQZFW.gif" alt="熵取值范围"></p> <ul> <li><p>直观的，最大熵原理认为，要选择的概率模型首先必须要满足已有的事实，即约束条件后，对那些不确定的部分进行等可能概率分配。最大熵原理通过熵的最大化来表示为约束部分等可能性。</p> </li> <li><p>最大熵定义</p> </li> </ul> <h3 id="2-3-最大熵的例题解说"><a href="#2-3-最大熵的例题解说" class="headerlink" title="2.3 最大熵的例题解说"></a>2.3 最大熵的例题解说</h3><p>题：假设随机变量X有5个取值{A,B,C,D,E}, 要估计取各个值的概率P(A),P(B),P(C),P(D),P(E). 假设约束条件如下：</p> <p><img src="/image2/shangQZ_1.gif" alt="熵取值范围"></p> <p><img src="/image2/shangQZ_2.gif" alt="熵取值范围"></p> <blockquote> <p>满足上述两个约束条件的可能取值任然很多，于是在求最大熵的过程中，为了得到最大熵，认为为约束的概率分布为等概率分布（等概率分布能确定为最大熵）</p> </blockquote> <p>解：有约束条件和概率分布知识可知,</p> <p>$$<br>min -H(P) = \sum_{i=1}^{5}P(y_{i})logP(y_{i})<br>$$</p> <p><img src="/image2/shangQZ_3.gif" alt="熵取值范围"></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.t. P(y_&#123;1&#125;)+P(y_&#123;2&#125;)=\widetilde&#123;P(y_&#123;1&#125;)&#125;+\widetilde&#123;P(y_&#123;2&#125;)&#125;=\frac&#123;3&#125;&#123;10&#125;</span><br></pre></td></tr></table></figure> <p><img src="/image2/shangQZ_4.gif" alt="熵取值范围"></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\sum_&#123;i=1&#125;^&#123;5&#125;P(y_&#123;i&#125;) = \sum_&#123;i=1&#125;^&#123;5&#125;\widetilde&#123;P(y_&#123;i&#125;)&#125;=1</span><br></pre></td></tr></table></figure> <p><img src="/image2/shangQZ_5.gif" alt="熵取值范围"></p> <blockquote> <p>其中带波浪的是实际经验分布概率函数。</p> </blockquote> <ul> <li>引进拉格朗日乘子<img src="/image2/shangQZ_6.gif" alt="熵取值范围">、<img src="/image2/shangQZ_7.gif" alt="熵取值范围"> 。由上面的约束条件得到的三个方程式结合拉格朗日乘子得到如下拉格朗日函数L(P,w)的表达式。</li> </ul> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L(P,w)=-H(P)+\omega _&#123;0&#125;(\sum_&#123;y&#125;^&#123; &#125;)P(y|x))+\sum_&#123;i=1&#125;^&#123;n&#125;\omega_&#123;1&#125;(E_&#123;\widetilde&#123;P&#125;&#125;(f_&#123;i&#125;)-E_&#123;P&#125;(f_&#123;i&#125;))=\sum_&#123;x,y&#125;\widetilde&#123;P(x)&#125;P(y|x)logP(y|x)+\omega_&#123;0&#125;(1-\sum_&#123;y&#125;^&#123; &#125;P(y|x))+\sum_&#123;i=1&#125;^&#123;n&#125;\omega_1(\sum_&#123;x,y&#125;\widetilde&#123;P(x,y)&#125;-\sum_&#123;x,y&#125;^&#123; &#125;\widetilde&#123;P(x)&#125;P(y|x)f_&#123;i&#125;(x,y))</span><br></pre></td></tr></table></figure> <p><img src="/image2/shangQZ_8.gif" alt="熵取值范围"></p> <p>带入题干信息可得如下的拉格朗日函数对应本题的表达式：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L(P,w)=-H(P)+\omega_&#123;0&#125;(1-\sum_&#123;y&#125;^&#123; &#125;P(y|x))+\sum_&#123;i=1&#125;^&#123;n&#125;\omega_&#123;i&#125;(E_&#123;\widetilde&#123;P&#125;&#125;(f_&#123;i&#125;)-E_&#123;P&#125;(f_&#123;i&#125;))=\sum_&#123;i=1&#125;^&#123;5&#125;P(y_&#123;i&#125;)logP(y_&#123;i&#125;)+\omega_&#123;1&#125;(P(y_&#123;1&#125;)+P(y_&#123;2&#125;)-\frac&#123;3&#125;&#123;10&#125;)+\omega_&#123;0&#125;(\sum_&#123;i=1&#125;^&#123;5&#125;P(y_&#123;i&#125;)-1)</span><br></pre></td></tr></table></figure> <p>这里只有3个限制条件，所以带入三个变量w得：</p> <p><img src="/image2/shangQZ_9.gif" alt="熵取值范围"></p> <ul> <li>原始问题和对偶问题</li> </ul> <p>根据拉格朗日函数（Ｌ)的对偶性，可以通过求解Ｌ(w)函数的对偶最优化问题得到我们原是函数（Ｌ(p))的最优解。即：</p> <p><img src="/image2/shangQZFW_1.gif" alt="最优问题"></p> <p>即，对于构造的Ｌ函数，求Ｐ的最小值问题对应ｗ参数的最大值最优解问题，Ｐ是要求的原始问题。Ｐ是原始问题的对偶问题的求解函数变量。</p> <p>接下来开始求解了原始问题和对偶问题的最优解问题，步骤如下：</p> <ul> <li>第一步先将原始问题（Ｐ参数的Ｌ函数）的最优解换化出来，即</li> </ul> <p><img src="/image2/shangQZFW_２.gif" alt="y1偏导数"></p> <p><img src="/image2/shangQZFW_３.gif" alt="y2偏导数"></p> <p><img src="/image2/shangQZFW_４.gif" alt="y3偏导数"></p> <p><img src="/image2/shangQZFW_５.gif" alt="y4偏导数"></p> <p><img src="/image2/shangQZFW_６.gif" alt="y5偏导数"></p> <ul> <li>令各偏导数等于0，解得：</li> </ul> <p><img src="/image2/shangQZFW_7.gif" alt="偏导数得"></p> <p><img src="/image2/shangQZFW_8.gif" alt="偏导数得"></p> <p>于是，</p> <p><img src="/image2/shangQZFW_9.gif" alt="偏导数得"></p> <ul> <li>第二步，将原始问题对应的对偶问题（ｗ参数，对应Ｌ函数的最优解）的最优解解出来，即</li> </ul> <p>$$<br>L(P_{w},w)<br>$$</p> <p>关于$$w$$的极大化问题。</p> <p>$$<br>\max_{\omega}L(P_{w},w)=-2e^{-w_{1}-w_{0}-1}-3e^{-w_{1}-1}-\frac{3}{10}w_{1}-w_{0}<br>$$</p> <p>分别求$$L(P_{w},w)$$关于$$w_{0},w_{1}$$的偏导数并令其为0，得到：</p> <p>$$<br>e^{-w_{1}-w_{0}-1}=\frac{3}{20}<br>,e^{-w_{0}-1}=\frac{7}{30}<br>$$</p> <p>于是得到所要求的概率分布为：</p> <p>$$<br>P(y_{1})=P(y_{2})=\frac{3}{20}<br>,P(y_{3})=P(y_{4})=P(y_{5})=\frac{7}{30}<br>$$</p> <blockquote> <p>总结：最大熵模型，形式简单，但是训练的代价太大，比如最原始的最大熵训练模型GIS（通用迭代算法）和IIS（改进迭代算法），每次迭代时间都很长，而且每步需要迭代很多次，实现复杂了。</p> </blockquote> <hr> <p><strong>追加</strong> ：此处记录下拉格朗日函数的相关性质：</p> <ul> <li>拉格朗日中值定理：</li> </ul> <p>如果函数f(x)满足：<br>（1）在闭区间[a, b]上连续；<br>（2）在开区间[a, b]内可导；<br>那么在开区间(a, b)内至少有一点 <img src="/image2/lagelangri_1.jpg" alt="拉格朗日插值"> 使等式 <img src="/image2/lagelangri_2.jpg" alt="拉格朗日插值"> 成立。</p> <ul> <li>拉格朗日差值法：</li> </ul> <p>1、两点确定一条直线，这条直线就是线性插值</p> <p>2、 <img src="/image2/lagelangrichazhi_1.gif" alt="拉格朗日插值"> ，这个$$P_{1}(x)$$函数就是线性插值函数</p> <p>为了和后面公式进行对比，上面公式可以转化为下面表达式，</p> <p><img src="/image2/lagelangrichazhi_2.gif" alt="拉格朗日插值"></p> <p>这两个都是叫做线性插值的基函数 .</p> <p>得到的插值效果如下：</p> <p><img src="/image2/lagelangrichazhi_2_1.gif" alt="拉格朗日插值"></p> <blockquote> <p>线性插值仅仅利用两个节点信息，精确度很低，故接下来讲二次差值(考察曲线问题)</p> </blockquote> <p>3、拉格朗日二次插值</p> <p>如果按照线性插值的形式，以每3个相邻点做插值，就得到了二次插值(3个点：xi,xi+1,xi+2)：</p> <p><img src="/image2/lagelangrichazhi_3.gif" alt="拉格朗日插值"></p> <p>得到的曲线效果是：</p> <p><img src="/image2/lagelangrichazhi_3_1.gif" alt="拉格朗日插值"></p> <p>二次插值在每段二次曲线内是光滑的，但在每条曲线的连接处其光滑性可能甚至比线性插值还差。二次插值只适合3个节点的情形，当节点数超过3个时，就需要分段插值了。</p> <p>4、拉格朗日多项式插值</p> <p><img src="/image2/lagelangrichazhi_4.gif" alt="拉格朗日插值"></p> <blockquote> <p> 一个n次的拉格朗日插值函数可以绘制经过(n+1)个节点的曲线，但运算量非常大。而且在次数比较高时，容易产生剧烈的震荡（龙格现象）。所以要选择位置特殊的节点（比如切比雪夫多项式的零点）进行插值，或使用多个次数较低的拉格朗日函数分段插值。（关于拉格朗日多项式和龙格现象，详见维基百科链接）</p> </blockquote> <p>使用4次拉格朗日多项式分段插值：</p> <p><img src="/image2/lagelangrichazhi_4_1.gif" alt="拉格朗日插值"></p> <p>如果直接使用20次的拉格朗日插值，得到的图像如下：</p> <p><img src="/image2/lagelangrichazhi_4_1_1.gif" alt="拉格朗日插值"></p> <p>等，更多的插值，[请参考这里] <a href="https://blog.csdn.net/eric_e/article/details/79499617" target="_blank" rel="noopener">数值分析（拟合、插值和逼近）之数据插值方法（线性插值、二次插值、Cubic插值、埃米尔特、拉格朗日多项式插值、牛顿插值、样条插值</a></p> <hr> <hr> <p><a href="https://www.cnblogs.com/hgl0417/p/6693656.html" target="_blank" rel="noopener">参考地址1</a><br><a href="https://www.cnblogs.com/skyme/p/4651331.html" target="_blank" rel="noopener">参考地址2</a><br><a href="https://www.cnblogs.com/Determined22/p/6750327.html" target="_blank" rel="noopener">参考地址3</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 最大熵模型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Prioritized Experience Replay</title>
      <link href="//PrioritizedEP/"/>
      <url>//PrioritizedEP/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><ul> <li><p>创新点：在抽取经验池中过往经验样本时，采取按优先级抽取的方法</p> </li> <li><p>改进：同上</p> </li> <li><p>改进原因： 原来随机抽取经验忽略了经验之间的重要程度，实际上如人脑中一定会有更为重要的记忆</p> </li> <li><p>带来益处：使得算法更快收敛，效果更好</p> </li> </ul> <p>经验回放使得在线强化学习的agent能够记住和重新利用过去的经验，在以往的研究中，过去的经验（transition，经验池中的一条记录，表示为元祖形式，包含state，action，reward,discount factor,next state），只是通过均匀采样来获取。然而这种方法，只要原来有过这个经验，那么就跟别的经验以相同的概率会被再次利用，忽略了这些经验各自的重要程度。</p> <p>本文我们提出了一种优先回放结构，这种方法可以使重要的经验被回放的概率大，从而使学习变得更有效率。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>论文笔记7：Prioritized Experience Replay</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.3 线性回归</title>
      <link href="//xianxinghuigui23/"/>
      <url>//xianxinghuigui23/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本篇文章笔记总结来自网络和书本，引用部分都有来源，内容主要介绍线性回归相关基础相关实际应用搞得入门例子，很简单，但是能说明线性回归相关基础的原理相关。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="LinearRegression算法"><a href="#LinearRegression算法" class="headerlink" title="LinearRegression算法"></a>LinearRegression算法</h1><blockquote> <p><a href="https://baijiahao.baidu.com/s?id=1613474944612061421&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">学习参考来源</a></p> </blockquote> <h1 id="一、最小二乘法的拟合原理"><a href="#一、最小二乘法的拟合原理" class="headerlink" title="一、最小二乘法的拟合原理"></a>一、最小二乘法的拟合原理</h1><p><img src="/image2/zuiXECfa_define.jpeg" alt="最小二乘法"></p> <p>最小二乘法定义如上图所示，但是初看可能会有点懵，上面的表示是啥意思，好接下来总结下我的理解</p> <p>最小二乘法（又称最小平方法）是一种数学优化技术，除了能拟合直线还能拟合曲线问题。</p> <blockquote> <p>书中截取部分如果可以这样理解$$\alpha_{i}$$，如果是二次项的话$$y=\alpha_{1} x^{2}+\alpha_{2} x + \alpha_{3} $$，知道了吧，就是一个二项式子中的待解参数。</p> </blockquote> <p>本文为了推导和笔记的简单化，直接以拟合直线 $$f(x;a,b): y=ax+b$$</p> <h2 id="1-1-代数推导："><a href="#1-1-代数推导：" class="headerlink" title="1.1 代数推导："></a>1.1 代数推导：</h2><ul> <li>[1]. 假设拟合直线 $$f(x;a,b): y=ax+b$$</li> <li>[2]. 已经由n个样本$$(x_{n}, y_{n})$$</li> <li>[3]. 误差$$e_{i}=y_{i}-(ax_{i}+b)$$</li> <li>[4]. 当$$S = \sum_{i=1}^{n} e_{i}^{2}$$为最小值时，即得到的a,b参数就是最小二乘法得到的解.</li> </ul> <p>如何求解这些参数（a，b）</p> <p>$$\frac{\partial S}{\partial b}=-2(\sum_{i=1}^{n}y_{i}-nb-a\sum_{i=1}^{n}x_{i})$$</p> <p>$$\frac{\partial S}{\partial a}=-2(\sum_{i=1}^{n}x_{i}y_{i}-b\sum_{i=1}{n}x_{i}-a\sum_{i=1}^{n}x_{i}^{2})$$</p> <p>分别令上式中对a,b求偏导数的有点等于0,以此求取对a,b的最值.有：$$n\bar x=\sum_{i=1}^{n}x_i,n\bar y=\sum_{i=1}^{n}y_i$$</p> <p>得到：</p> <p>$$a=\frac {\sum_{i=1}^{n}({x_i-\bar x})(y_i-\bar y)} {\sum_{i=1}^{n}({x_i-\bar x})^2}$$</p> <p>$$b=\bar y-a\bar x$$</p> <p>$$a=\frac {n\sum_{}^{}{x_iy_i}-\sum_{}^{}{x_i}\sum_{}^{}{y_i}} {n\sum_{}^{}{x_i}^2-(\sum_{}^{}{x_i})^2}$$</p> <p>$$b=\frac {\sum_{}^{}{x_i}^2\sum_{}^{}{y_i}-\sum_{}^{}{x_i}\sum_{}^{}{x_iy_i}} {n\sum_{}^{}{x_i}^2-(\sum_{}^{}{x_i})^2}$$</p> <h3 id="1-1-1-代数推导的代码实现"><a href="#1-1-1-代数推导的代码实现" class="headerlink" title="1.1.1 代数推导的代码实现"></a>1.1.1 代数推导的代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcAB</span><span class="params">(x,y)</span>:</span></span><br><span class="line"> n = len(x)</span><br><span class="line"> sumX,sumY,sumXY,sumXX =<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n):</span><br><span class="line"> sumX += x[i]</span><br><span class="line"> sumY += y[i]</span><br><span class="line"> sumXX += x[i]*x[i]</span><br><span class="line"> sumXY += x[i]*y[i]</span><br><span class="line"> a = (n*sumXY -sumX*sumY)/(n*sumXX -sumX*sumX)</span><br><span class="line"> b = (sumXX*sumY - sumX*sumXY)/(n*sumXX-sumX*sumX)</span><br><span class="line"> <span class="keyword">return</span> a,b,</span><br><span class="line"></span><br><span class="line">xi = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">yi = [<span class="number">10</span>,<span class="number">11.5</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14.5</span>,<span class="number">15.5</span>,<span class="number">16.8</span>,<span class="number">17.3</span>,<span class="number">18</span>,<span class="number">18.7</span>]</span><br><span class="line">a,b=calcAB(xi,yi)</span><br><span class="line">print(<span class="string">"y = %10.5fx + %10.5f"</span> %(a,b))</span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">y = a * x + b</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.scatter(xi,yi)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> <h2 id="1-2-矩阵推导"><a href="#1-2-矩阵推导" class="headerlink" title="1.2 矩阵推导"></a>1.2 矩阵推导</h2><p>对于$$y=ax+b$$,转为向量的形式为<br>$$<br>W=\begin{bmatrix}<br>w_0\<br>w_1<br>\end{bmatrix},X=\begin{bmatrix}<br>1\<br>x_1<br>\end{bmatrix}<br>$$</p> <p>于是：<br>$$y=w_1x_1+w_0=W^TX$$</p> <p>损失函数为:</p> <p>$$<br>L=\frac{1}{n}\sum_{i=1}^{n}(y_n-(W^TX)^2)=\frac{1}{n}(y-XW)^T(y-XW)<br>$$</p> <p>最后可化为</p> <p>$$\frac{1}{n}X^TW^TXW-\frac{2}{n}X^TW^Ty+\frac{1}{n}y^Ty$$</p> <p>令偏导为0</p> <p>$$\frac{\partial L}{\partial W}=\frac{2}{n}X^TXW-\frac{2}{n}X^Ty=0$$</p> <p>另外：</p> <p>$$(X^TX)^{-1}X^TX=E,EW=W$$,则</p> <p>$$(X^TX)^{-1}X^TXW=(X^TX)^{-1}X^Ty,W=(X^TX)^{-1}X^Ty$$</p> <h3 id="1-2-1-代码实现："><a href="#1-2-1-代码实现：" class="headerlink" title="1.2.1 代码实现："></a>1.2.1 代码实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">y = [<span class="number">10</span>,<span class="number">11.5</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14.5</span>,<span class="number">15.5</span>,<span class="number">16.8</span>,<span class="number">17.3</span>,<span class="number">18</span>,<span class="number">18.7</span>]</span><br><span class="line"></span><br><span class="line">A = np.vstack([x,np.ones(len(x))]).T</span><br><span class="line"></span><br><span class="line">a,b = np.linalg.lstsq(A,y)[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">"y = %10.5fx + %10.5f"</span> %(a,b))</span><br><span class="line">x = np.array(x)</span><br><span class="line">y = np.array(y)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y,<span class="string">'o'</span>,label=<span class="string">'data'</span>,markersize=<span class="number">10</span>)</span><br><span class="line">plt.plot(x,a*x+b,<span class="string">'r'</span>,label=<span class="string">'line'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> <p>拟合的效果（蓝线）</p> <p><img src="/image2/ZECFa.png" alt="拟合图"></p> <h2 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3 小结"></a>1.3 小结</h2><p><img src="/image2/zuiXECfa_1.jpeg" alt="最小二乘法"></p> <p><img src="/image2/zuiXECfa_1.jpeg" alt="切比雪夫算法"></p> <h1 id="二、线性回归"><a href="#二、线性回归" class="headerlink" title="二、线性回归"></a>二、线性回归</h1><p>线性回归的目的是找到一个与这些数据最为温和的线性函数，用来预测或者分类，主要解决线性问题。<br>一般来说，线性回归问题都可以通过最小二乘法来求出方程。线性回归属于监督学习,因此方法和监督学习应该一样，先给一个训练集，根据这个训练集学习出一个线性函数，然后测试这个函数训练的好不好（拟合是否恰当）。Cost Function 越小的函数，说明训练数据拟合程度越好。</p> <ul> <li>线性回归，通过数据集的线性组合来预测函数：</li> </ul> <p>$$f(x)=\omega_{1}x_{1}+\omega_{2}x_{2}+\omega_{3}x_{3}+…+\omega_{d}x_{d}+b$$</p> <p>一般向量形式写为：</p> <p>$$f(x)=\omega^{T}x+b$$</p> <p>其中的$$\omega=(\omega_{1};\omega_{2};\omega_{2};…\omega_{d})$$</p> <p>$$x_{1},x_{2},…x_{k}$$是一组独立的预测变量</p> <p>$$\omega_{1},\omega_{2},…\omega_{k}$$为模型从训练数据中学习得到的参数，或称赋予每个变量的权值。</p> <p>b是一个学习到的参数，这个现行函数中的常量也称模型的偏置（Bias）</p> <ul> <li>根据输入属性可分为一元，二元……多元线性回归。</li> </ul> <p>多元数据集的定义如下：</p> <p>$$D=\left [ x_{i,j}, y_{i}\right ]$$，其中i,表示数据集第i位序列的值，而j则表示在第i位x的属性是j种属性，即数据集中，x(i,j)，i维行，j维纵坐标的矩阵。</p> <p>即数据集j元的属性矩阵表示为：<br>$$<br>\begin{bmatrix}<br>x_{1,1} &amp; x_{1,2} &amp; … &amp; x_{1,j-1} &amp; x_{1,j}\<br>x_{2,1} &amp; x_{2,2} &amp; … &amp; x_{2,j-1} &amp; x_{2,j}\<br>… &amp; … &amp; … &amp; … &amp; …\<br>x_{i,1} &amp; x_{i,2} &amp; … &amp; x_{i,j-1} &amp; x_{i,j}<br>\end{bmatrix}<br>$$</p> <p>比如3元的表示一个西瓜好坏，【hue, root, echo】，加入预测函数的参数已经求得$$\omega=\left [ 0.2, 0.5, 0.3 \right ],b=1$$，则好瓜（good)函数$$f_{good}(x)=0.2 \cdot x_{hue}+0.5 \cdot x_{root}+0.3 \cdot x_{echo}+1$$</p> <h2 id="2-1-一元线性回归"><a href="#2-1-一元线性回归" class="headerlink" title="2.1 一元线性回归"></a>2.1 一元线性回归</h2><ul> <li>输入属性只有一个的情况，称一元线性回归</li> </ul> <blockquote> <p>属性：</p> </blockquote> <p>这里考虑一元的情况则数据集为： $$D=\left [ x_{i}, y_{i}\right ]_{i=1}^{m} $$,即上面矩阵表示的j元数据集中j=1，现在我们来尝试一元的线性回归。</p> <ul> <li>[1] 假设我们预测函数形式：$$f(x_{i})=\omega x_{i}+b_{i}$$,使得$$f(x_{i})\approx y_{i}$$.</li> </ul> <p>接下来我们引入上面的最小二乘法求参数$$\omega , b$$.</p> <ul> <li>[2] 假设最小均方误差函数为：</li> </ul> <p>$$e_{\omega^<em>,b^</em>}=arg_{(\omega,b)}min \sum_{i=1}^{m}(f(x_{i})-y_{i})^2 $$</p> <ul> <li><p>[3] 对上式e的函数分别对$$\omega,b$$求偏导，对偏导结果赋值0，求$$\omega,b$$值。</p> </li> <li><p>[4] 偏导数</p> </li> </ul> <p>$$\frac{\partial E_{\omega,b}}{\partial \omega}=2(\omega\sum_{i=1}^{m}x_{i}^{2}-\sum_{i=1}^{m}(y_{i}-b)x_{i})$$</p> <p>$$\frac{\partial E_{\omega,b}}{\partial b}=2(mb-\sum_{i=1}^{m}(y_{i} - \omega x_{i}))$$</p> <ul> <li>[5] 上一步骤中的偏导数都设为零，以此来求得$$\omega , b$$.</li> </ul> <p>$$\omega = \frac{\sum_{i=1}^{m} y_{i}(x_{i}-\bar{x})}{\sum_{i=1}^{m}x_{i}^{2}-\frac{1}{m}(\sum_{i=1}^{m}x_{i})^2}$$</p> <p>$$b=\frac{1}{m}\sum_{i=1}^{m}(y_{i}-\omega x_{i}),\bar{x}=\frac{1}{m}\sum_{i=1}^{m}x_{i}$$,$$\bar{x}$$为序列x的均值。</p> <blockquote> <p>这里一元的线性回归，用最小二乘法求解的参数估计，称为线性回归模型的最小二乘法“参数估计”(parameter estimation).</p> </blockquote> <h2 id="2-2-多元线性回归"><a href="#2-2-多元线性回归" class="headerlink" title="2.2 多元线性回归"></a>2.2 多元线性回归</h2><p>类似一元，但是求解 估计的参数矩阵$$\omega, b$$，就需要全部看成矩阵的求解方法求出。见最小二乘法矩阵推导那一节，不再具体推推导了，在2.1节基础上明白线性回归，多元回归思想即可明白。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 线性回归 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.7 神经网络浅学笔记</title>
      <link href="//shenjingwanguo/"/>
      <url>//shenjingwanguo/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文主要记录神经网络相关的基础知识</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h1 id="一、神经网络"><a href="#一、神经网络" class="headerlink" title="一、神经网络"></a>一、神经网络</h1><p>神经网络是一种模拟人脑的神经网络以期能够实现类人工智能的机器学习技术。</p> <p><img src="/image2/neuralNetworks1.jpg" alt="神经网络"></p> <p>对于神经元的研究由来已久，1904年生物学家就已经知晓了神经元的组成结构。</p> <p> 一个神经元通常具有多个树突，主要用来接受传入信息；而轴突只有一条，轴突尾端有许多轴突末梢可以给其他多个神经元传递信息。轴突末梢跟其他神经元的树突产生连接，从而传递信号。这个连接的位置在生物学上叫做“突触”。</p> <p><img src="/image2/neuralNetworks2.jpg" alt="神经网络"></p> <h2 id="1-1-神经元"><a href="#1-1-神经元" class="headerlink" title="1.1 神经元"></a>1.1 神经元</h2><h3 id="1-1-1-让我们来看一个经典的神经网络。"><a href="#1-1-1-让我们来看一个经典的神经网络。" class="headerlink" title="1.1.1 让我们来看一个经典的神经网络。"></a>1.1.1 让我们来看一个经典的神经网络。</h3><p>这是一个包含三个层次的神经网络。</p> <p>红色的是输入层，绿色的是输出层，紫色的是中间层（也叫隐藏层）。</p> <p>输入层有3个输入单元，隐藏层有4个单元，输出层有2个单元。</p> <p>后文中，我们统一使用这种颜色来表达神经网络的结构。</p> <p><img src="/image2/neuralNetworks3.jpg" alt="神经网络"></p> <h3 id="1-1-2-在开始介绍前，有一些知识可以先记在心里"><a href="#1-1-2-在开始介绍前，有一些知识可以先记在心里" class="headerlink" title="1.1.2 在开始介绍前，有一些知识可以先记在心里"></a>1.1.2 在开始介绍前，有一些知识可以先记在心里</h3><ul> <li><p>设计一个神经网络时，输入层与输出层的节点数往往是固定的，中间层则可以自由指定；</p> </li> <li><p>神经网络结构图中的拓扑与箭头代表着预测过程时数据的流向，跟训练时的数据流有一定的区别；</p> </li> <li><p>结构图里的关键不是圆圈（代表“神经元”），而是连接线（代表“神经元”之间的连接）。每个连接线对应一个不同的权重（其值称为权值），这是需要训练得到的。</p> </li> </ul> <h3 id="1-1-3-神经元结构"><a href="#1-1-3-神经元结构" class="headerlink" title="1.1.3 神经元结构"></a>1.1.3 神经元结构</h3><p>神经元模型是一个包含输入，输出与计算功能的模型。输入可以类比为神经元的树突，而输出可以类比为神经元的轴突，计算则可以类比为细胞核。</p> <p>下图是一个典型的神经元模型：包含有3个输入，1个输出，以及2个计算功能。注意中间的箭头线。这些线称为“连接”。每个上有一个“权值”。</p> <p><img src="/image2/neuralNetworks4.jpg" alt="神经网络"></p> <p>连接是神经元中最重要的东西。每一个连接上都有一个权重。</p> <p>一个神经网络的训练算法就是让权重的值调整到最佳，以使得整个网络的预测效果最好。</p> <p>我们使用a来表示输入，用w来表示权值。一个表示连接的有向箭头可以这样理解：在初端，传递的信号大小仍然是a，端中间有加权参数w，经过这个加权后的信号会变成a<em>w，因此在连接的末端，信号的大小就变成了a</em>w。</p> <p>在其他绘图模型里，有向箭头可能表示的是值的不变传递。而在神经元模型里，每个有向箭头表示的是值的加权传递。</p> <p><img src="/image2/neuralNetworks5.jpg" alt="神经网络"></p> <p>如果我们将神经元图中的所有变量用符号表示，并且写出输出的计算公式的话，就是下图。</p> <p><img src="/image2/neuralNetworks6.jpg" alt="神经网络"></p> <font color="red">可见z是在输入和权值的线性加权和叠加了一个函数g的值。<strong>在MP模型里，函数g是sgn函数，也就是取符号函数。这个函数当输入大于0时，输出1，否则输出0。</strong></font> <p>下面对神经元模型的图进行一些扩展。首先将sum函数与sgn函数合并到一个圆圈里，代表神经元的内部计算。其次，把输入a与输出z写到连接线的左上方，便于后面画复杂的网络。最后说明，一个神经元可以引出多个代表输出的有向箭头，但值都是一样的。</p> <p> 神经元可以看作一个计算与存储单元。计算是神经元对其的输入进行计算功能。存储是神经元会暂存计算结果，并传递到下一层。</p> <p><img src="/image2/neuralNetworks7.jpg" alt="神经网络"></p> <p>当我们用“神经元”组成网络以后，描述网络中的某个“神经元”时，我们更多地会用“单元”（unit）来指代。同时由于神经网络的表现形式是一个有向图，有时也会用“节点”（node）来表达同样的意思。 </p> <h3 id="1-1-4-神经元模型的使用可以这样理解"><a href="#1-1-4-神经元模型的使用可以这样理解" class="headerlink" title="1.1.4 神经元模型的使用可以这样理解"></a>1.1.4 神经元模型的使用可以这样理解</h3><p> 我们有一个数据，称之为样本。样本有四个属性，其中三个属性已知，一个属性未知。我们需要做的就是通过三个已知属性预测未知属性。</p> <p> 具体办法就是使用神经元的公式进行计算。三个已知属性的值是a1，a2，a3，未知属性的值是z。z可以通过公式计算出来。</p> <p> 这里，已知的属性称之为特征，未知的属性称之为目标。假设特征与目标之间确实是线性关系，并且我们已经得到表示这个关系的权值w1，w2，w3。那么，我们就可以通过神经元模型预测新样本的目标。</p> <h2 id="1-2-单层神经网络（感知器）"><a href="#1-2-单层神经网络（感知器）" class="headerlink" title="1.2 单层神经网络（感知器）"></a>1.2 单层神经网络（感知器）</h2><p>1958年，计算科学家Rosenblatt提出了由两层神经元组成的神经网络。他给它起了一个名字–“感知器”（Perceptron）</p> <p>感知器是当时首个可以学习的人工神经网络。</p> <h3 id="1-2-1-感知器模型结构"><a href="#1-2-1-感知器模型结构" class="headerlink" title="1.2.1 感知器模型结构"></a>1.2.1 感知器模型结构</h3><p>在原来MP模型的“输入”位置添加神经元节点，标志其为“输入单元”。其余不变，于是我们就有了下图：从本图开始，我们将权值w1, w2, w3写到“连接线”的中间。</p> <p><img src="/image2/neuralNetworks8.jpg" alt="神经网络"></p> <p> 在“感知器”中，有两个层次。分别是输入层和输出层。输入层里的“输入单元”只负责传输数据，不做计算。输出层里的“输出单元”则需要对前面一层的输入进行计算。</p> <p>我们把需要计算的层次称之为“计算层”，并把拥有一个计算层的网络称之为“单层神经网络”。有一些文献会按照网络拥有的层数来命名，例如把“感知器”称为两层神经网络。但在本文里，我们根据计算层的数量来命名。</p> <p>假如我们要预测的目标不再是一个值，而是一个向量，例如[2,3]。那么可以在输出层再增加一个“输出单元”。</p> <p><img src="/image2/neuralNetworks9.jpg" alt="神经网络"></p> <p>可以看到，z1的计算跟原先的z并没有区别。</p> <p>我们已知一个神经元的输出可以向多个神经元传递，因此z2的计算公式如下图。</p> <p><img src="/image2/neuralNetworks10.jpg" alt="神经网络"></p> <p>可以看到，z2的计算中除了三个新的权值：w4，w5，w6以外，其他与z1是一样的。整个网络的输出如下图。</p> <p><img src="/image2/neuralNetworks11.jpg" alt="神经网络"></p> <p>目前的表达公式有一点不让人满意的就是：w4，w5，w6是后来加的，很难表现出跟原先的w1，w2，w3的关系。</p> <p> 因此我们改用二维的下标，用wx,y来表达一个权值。下标中的x代表后一层神经元的序号，而y代表前一层神经元的序号（序号的顺序从上到下）。</p> <p> 例如，w1,2代表后一层的第1个神经元与前一层的第2个神经元的连接的权值（这种标记方式参照了Andrew Ng的课件）。根据以上方法标记，我们有了下图。</p> <p><img src="/image2/neuralNetworks12.jpg" alt="神经网络"></p> <p>如果我们仔细看输出的计算公式，会发现这两个公式就是线性代数方程组。因此可以用矩阵乘法来表达这两个公式。</p> <p> 例如，输入的变量是[a1，a2，a3]T（代表由a1，a2，a3组成的列向量），用向量a来表示。方程的左边是[z1，z2]T，用向量z来表示。</p> <p> 系数则是矩阵W（2行3列的矩阵，排列形式与公式中的一样）。</p> <p> 于是，输出公式可以改写成：</p> <p>$$g(W * a) = z;$$</p> <p>这个公式就是神经网络中从前一层计算后一层的矩阵运算。</p> <h3 id="1-2-2-效果"><a href="#1-2-2-效果" class="headerlink" title="1.2.2 效果"></a>1.2.2 效果</h3><p>与神经元模型不同，感知器中的权值是通过训练得到的。因此，根据以前的知识我们知道，感知器类似一个逻辑回归模型，可以做线性分类任务。</p> <p>我们可以用决策分界来形象的表达分类的效果。决策分界就是在二维的数据平面中划出一条直线，当数据的维度是3维的时候，就是划出一个平面，当数据的维度是n维时，就是划出一个n-1维的超平面。</p> <p>下图显示了在二维平面中划出决策分界的效果，也就是感知器的分类效果。</p> <p><img src="/image2/ganzhiji1.png" alt="神经网络"></p> <blockquote> <p>感知器只能做简单的线性分类任务。</p> </blockquote> <h2 id="1-3-两层神经网络（多层感知器）"><a href="#1-3-两层神经网络（多层感知器）" class="headerlink" title="1.3 两层神经网络（多层感知器）"></a>1.3 两层神经网络（多层感知器）</h2><p>Minsky说过单层神经网络无法解决异或问题。但是当增加一个计算层以后，两层神经网络不仅可以解决异或问题，而且具有非常好的非线性分类效果。不过两层神经网络的计算是一个问题，没有一个较好的解法。</p> <p>1986年，Rumelhar和Hinton等人提出了反向传播（Backpropagation，BP）算法，解决了两层神经网络所需要的复杂计算量问题，从而带动了业界使用两层神经网络研究的热潮。目前，大量的教授神经网络的教材，都是重点介绍两层（带一个隐藏层）神经网络的内容。 </p> <p> 这时候的Hinton还很年轻，30年以后，正是他重新定义了神经网络，带来了神经网络复苏的又一春。</p> <h3 id="1-3-1-两层神经网络的结构（多层感知器）"><a href="#1-3-1-两层神经网络的结构（多层感知器）" class="headerlink" title="1.3.1 两层神经网络的结构（多层感知器）"></a>1.3.1 两层神经网络的结构（多层感知器）</h3><p>Minsky说过单层神经网络无法解决异或问题。但是当增加一个计算层以后，两层神经网络不仅可以解决异或问题，而且具有非常好的非线性分类效果。不过两层神经网络的计算是一个问题，没有一个较好的解法。</p> <p>两层神经网络除了包含一个输入层，一个输出层以外，还增加了一个中间层。此时，中间层和输出层都是计算层。我们扩展上节的单层神经网络，在右边新加一个层次（只含有一个节点）。</p> <p>现在，我们的权值矩阵增加到了两个，我们用上标来区分不同层次之间的变量。</p> <p>例如$$a_{x} ^{(y)}$$代表第y层的第x个节点。$$z_{1},z_{2}$$变成了$$a_{1} ^{(2)} , a_{2} ^{(2)}$$。下图给出了$$a_{1} ^{(2)} , a_{2} ^{(2)}$$的计算公式。</p> <p><img src="/image2/neuralNetworks13.jpg" alt="神经网络"></p> <p>计算最终输出z的方式是利用了中间层的$$a_{1} ^{(2)}, a_{2} ^{(2)}$$和第二个权值矩阵计算得到的，如下图。</p> <p><img src="/image2/neuralNetworks14.jpg" alt=" 两层神经网络（输出层计算）"></p> <p>假设我们的预测目标是一个向量，那么与前面类似，只需要在“输出层”再增加节点即可。</p> <p>我们使用向量和矩阵来表示层次中的变量。$$a_{1} , a_{2} , z $$是网络中传输的向量数据。$$W^{(1)}, W^{(2)}$$是网络的矩阵参数。如下图。</p> <p><img src="/image2/neuralNetworks15.jpg" alt="两层神经网络（向量形式）"></p> <p>使用矩阵运算来表达整个计算公式的话如下：</p> <p>$$g(W^{(1)} <em> a^{(1)}) = a^{(2)}; g(W^{(2)} </em> a^{(2)}) = z;$$</p> <p>上面写的全是权重w但还未引入偏置。下面我们接着写偏置</p> <p> 由此可见，使用矩阵运算来表达是很简洁的，而且也不会受到节点数增多的影响（无论有多少节点参与运算，乘法两端都只有一个变量）。因此神经网络的教程中大量使用矩阵运算来描述。</p> <p> 需要说明的是，至今为止，我们对神经网络的结构图的讨论中都没有提到偏置节点（bias unit）。事实上，这些节点是默认存在的。它本质上是一个只含有存储功能，且存储值永远为1的单元。在神经网络的每个层次中，除了输出层以外，都会含有这样一个偏置单元。正如线性回归模型与逻辑回归模型中的一样。</p> <p> 偏置单元与后一层的所有节点都有连接，我们设这些参数值为向量b，称之为偏置。如下图。</p> <p><img src="/image2/neuralNetworks16.jpg" alt="偏置"></p> <p>可以看出，偏置节点很好认，因为其没有输入（前一层中没有箭头指向它）。有些神经网络的结构图中会把偏置节点明显画出来，有些不会。一般情况下，我们都不会明确画出偏置节点。 </p> <p> 在考虑了偏置以后的一个神经网络的矩阵运算如下：</p> <p>$$g(W^{(1)} <em> a^{(1)}+b^{(1)}) = a^{(2)}; g(W^{(2)} </em> a^{(2)}+b^{(1)}) = z;$$</p> <p> 需要说明的是，在两层神经网络中，我们不再使用sgn函数作为函数g，而是使用平滑函数sigmoid作为函数g。我们把函数g也称作激活函数（active function）。</p> <p> 事实上，神经网络的本质就是通过参数与激活函数来拟合特征与目标之间的真实函数关系。初学者可能认为画神经网络的结构图是为了在程序中实现这些圆圈与线，但在一个神经网络的程序中，既没有“线”这个对象，也没有“单元”这个对象。实现一个神经网络最需要的是线性代数库。</p> <h2 id="1-4-多层神经网络（深度学习）"><a href="#1-4-多层神经网络（深度学习）" class="headerlink" title="1.4 多层神经网络（深度学习）"></a>1.4 多层神经网络（深度学习）</h2><h3 id="1-4-1-多层神经网络的结构（深度学习）"><a href="#1-4-1-多层神经网络的结构（深度学习）" class="headerlink" title="1.4.1 多层神经网络的结构（深度学习）"></a>1.4.1 多层神经网络的结构（深度学习）</h3><p>我们延续两层神经网络的方式来设计一个多层神经网络。</p> <p> 在两层神经网络的输出层后面，继续添加层次。原来的输出层变成中间层，新加的层次成为新的输出层。所以可以得到下图。</p> <p><img src="/image2/neuralNetworks17.jpg" alt="多层神经网络"></p> <p>依照这样的方式不断添加，我们可以得到更多层的多层神经网络。公式推导的话其实跟两层神经网络类似，使用矩阵运算的话就仅仅是加一个公式而已。</p> <p> 在已知输入$$a^{(1)}$$，参数$$W^{(1)},W^{(2)},W^{(3)}$$的情况下，输出z的推导公式如下：<br>$$<br>g(W^{(1)} * a^{(1)}) = a^{(2)}; </p> <p>g(W^{(2)} * a^{(2)}) = a^{(3)};</p> <p>g(W^{(3)} * a^{(3)}) = z;<br>$$</p> <p>多层神经网络中，输出也是按照一层一层的方式来计算。从最外面的层开始，算出所有单元的值以后，再继续计算更深一层。只有当前层所有单元的值都计算完毕以后，才会算下一层。有点像计算向前不断推进的感觉。所以这个过程叫做“正向传播”。</p> <p>下面讨论一下多层神经网络中的参数。</p> <p>首先我们看第一张图，可以看出$$W^{(1)}$$中有6个参数，$$W^{(2)}$$中有4个参数，$$W^(3)$$中有6个参数，所以整个神经网络中的参数有16个（这里我们不考虑偏置节点，下同）。</p> <p><img src="/image2/neuralNetworks18.jpg" alt="多层神经网络（较少参数）"></p> <p> 假设我们将中间层的节点数做一下调整。第一个中间层改为3个单元，第二个中间层改为4个单元。</p> <p> 经过调整以后，整个网络的参数变成了33个。</p> <p><img src="/image2/neuralNetworks19.jpg" alt="多层神经网络（较多参数）"></p> <p>虽然层数保持不变，但是第二个神经网络的参数数量却是第一个神经网络的接近两倍之多，从而带来了更好的表示（represention）能力。表示能力是多层神经网络的一个重要性质，下面会做介绍。</p> <p> 在参数一致的情况下，我们也可以获得一个“更深”的网络。</p> <p><img src="/image2/neuralNetworks20.jpg" alt="多层神经网络（更深的层次）"></p> <p>上图的网络中，虽然参数数量仍然是33，但却有4个中间层，是原来层数的接近两倍。这意味着一样的参数数量，可以用更深的层次去表达。</p> <h3 id="1-4-2-多层神经网络的效果（深度学习）"><a href="#1-4-2-多层神经网络的效果（深度学习）" class="headerlink" title="1.4.2 多层神经网络的效果（深度学习）"></a>1.4.2 多层神经网络的效果（深度学习）</h3><p>与两层层神经网络不同。多层神经网络中的层数增加了很多。</p> <p> 增加更多的层次有什么好处？更深入的表示特征，以及更强的函数模拟能力。</p> <p> 更深入的表示特征可以这样理解，随着网络的层数增加，每一层对于前一层次的抽象表示更深入。在神经网络中，每一层神经元学习到的是前一层神经元值的更抽象的表示。例如第一个隐藏层学习到的是“边缘”的特征，第二个隐藏层学习到的是由“边缘”组成的“形状”的特征，第三个隐藏层学习到的是由“形状”组成的“图案”的特征，最后的隐藏层学习到的是由“图案”组成的“目标”的特征。通过抽取更抽象的特征来对事物进行区分，从而获得更好的区分与分类能力。</p> <p> 关于逐层特征学习的例子，可以参考下图。</p> <p><img src="/image2/neuralNetworks1.png" alt=" 多层神经网络（特征学习）"></p> <p>更强的函数模拟能力是由于随着层数的增加，整个网络的参数就越多。而神经网络其实本质就是模拟特征与目标之间的真实关系函数的方法，更多的参数意味着其模拟的函数可以更加的复杂，可以有更多的容量（capcity）去拟合真正的关系。</p> <p> 通过研究发现，在参数数量一样的情况下，更深的网络往往具有比浅层的网络更好的识别效率。这点也在ImageNet的多次大赛中得到了证实。从2012年起，每年获得ImageNet冠军的深度神经网络的层数逐年增加，2015年最好的方法GoogleNet是一个多达22层的神经网络。</p> <p> 在最新一届的ImageNet大赛上，目前拿到最好成绩的MSRA团队的方法使用的更是一个深达152层的网络！关于这个方法更多的信息有兴趣的可以查阅ImageNet网站。</p> <h3 id="1-4-3-多层神经网络的训练（深度学习）"><a href="#1-4-3-多层神经网络的训练（深度学习）" class="headerlink" title="1.4.3 多层神经网络的训练（深度学习）"></a>1.4.3 多层神经网络的训练（深度学习）</h3><p>在单层神经网络时，我们使用的激活函数是sgn函数。到了两层神经网络时，我们使用的最多的是sigmoid函数。而到了多层神经网络时，通过一系列的研究发现，ReLU函数在训练多层神经网络时，更容易收敛，并且预测性能更好。因此，目前在深度学习中，最流行的非线性函数是ReLU函数。ReLU函数不是传统的非线性函数，而是分段线性函数。其表达式非常简单，就是y=max(x,0)。简而言之，在x大于0，输出就是输入，而在x小于0时，输出就保持为0。这种函数的设计启发来自于生物神经元对于激励的线性响应，以及当低于某个阈值后就不再响应的模拟。</p> <p> 在多层神经网络中，训练的主题仍然是优化和泛化。当使用足够强的计算芯片（例如GPU图形加速卡）时，梯度下降算法以及反向传播算法在多层神经网络中的训练中仍然工作的很好。目前学术界主要的研究既在于开发新的算法，也在于对这两个算法进行不断的优化，例如，增加了一种带动量因子（momentum）的梯度下降算法。 </p> <p> 在深度学习中，泛化技术变的比以往更加的重要。这主要是因为神经网络的层数增加了，参数也增加了，表示能力大幅度增强，很容易出现过拟合现象。因此正则化技术就显得十分重要。目前，Dropout技术，以及数据扩容（Data-Augmentation）技术是目前使用的最多的正则化技术。</p> <p>文章参考来源：<a href="https://www.cnblogs.com/subconscious/p/5058741.html" target="_blank" rel="noopener">计算机的潜意识</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.6 递归算法与迭代算法</title>
      <link href="//diguiyudiedai/"/>
      <url>//diguiyudiedai/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文主要记录迭代算法的相关笔记</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h1 id="一、引入实例"><a href="#一、引入实例" class="headerlink" title="一、引入实例"></a>一、引入实例</h1><h4 id="举个例子-引用"><a href="#举个例子-引用" class="headerlink" title="举个例子(引用)"></a>举个例子(<a href="https://www.cnblogs.com/xiaozhumaopao/p/4121372.html]" target="_blank" rel="noopener">引用</a>)</h4><p>我想求1+2+3+4+..+100的值。</p> <ul> <li>迭代的做法：</li> </ul> <p>从1到100，顺着往下累加。1+2=3,3+3=6,6+4=10,10+5=15……<br>程序表示</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line"> sum = sum +i; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <ul> <li>递归的做法：</li> </ul> <p>我要求1到100的累加值，如果我已经得到1到99的累加值，将这个值加上100就是1到100的累加值；</p> <p>要得到1到99的累加值，如果已经得到1到98的累加值，将这个值加上99，就是1到99的累加值……</p> <p>最后我要得到1到2的累加值，我如果得到1自身累加值，再加上2即可，1自身的累加值显然就是1了。</p> <p>于是现在我们得到了1到2的累加值，将这个值加3就得到了1到3的累加值，……最后直到得到1到100的累加值。</p> <p>程序表示，其中函数会调用自身，这就是递归方法的典型特征</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetSum</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">return</span> n+GetSum(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>上述例子中，其实递归最后得到结果也是用迭代方法完成的，只是在程序的处理上直观看不出来。</p> <h4 id="两者都能很好的完成计算任务，不同之处在于思维方式上，从而导致不同的计算方法："><a href="#两者都能很好的完成计算任务，不同之处在于思维方式上，从而导致不同的计算方法：" class="headerlink" title="两者都能很好的完成计算任务，不同之处在于思维方式上，从而导致不同的计算方法："></a>两者都能很好的完成计算任务，不同之处在于思维方式上，从而导致不同的计算方法：</h4><ul> <li>迭代是正向思维，从头到尾思考问题；</li> <li>递归是逆向思维，他假设我们已经得到了部分结果(假设我已经知道了1到99的累加值，把这个值加上100我们就得到了1到100的累加值了)，从尾部追溯到头部，从而让问题简化(当然这个例子中看不出来，这里只是方便理解）</li> </ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Algorithm </tag>
            
            <tag> 迭代算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.1 马尔科夫链</title>
      <link href="//maerkefu21/"/>
      <url>//maerkefu21/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本篇文章笔记总结来自网络和书本，引用部分都有来源，内容主要介绍马尔科夫相关的性质和几个实例进行论述。状态空间中经过从一个状态到另一个状态的转换的随机过程，需要具备“无记忆”的性质：下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关。这种特定类型的“无记忆性”称作马尔可夫性质。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。 </li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="马尔科夫链"><a href="#马尔科夫链" class="headerlink" title="马尔科夫链"></a>马尔科夫链</h1><h2 id="一、常见的马尔可夫过程："><a href="#一、常见的马尔可夫过程：" class="headerlink" title="一、常见的马尔可夫过程："></a>一、常见的马尔可夫过程：</h2><p>(1) 独立随机过程为马尔可夫过程。</p> <p>(2) 独立增量过程为马尔可夫过程：没{X(t)，t∈[0，+∞)}为一独立增量过程，且有P(X(0)=x0)=1，x0为常数，则X(t)为马尔可夫过程。</p> <p>(3) 泊松过程为马尔可夫过程。</p> <p>(4) 维纳过程为马尔可夫过程。</p> <p>(5) 质点随机游动过程为马尔可夫过程。</p> <h2 id="二、模型的创立条件"><a href="#二、模型的创立条件" class="headerlink" title="二、模型的创立条件"></a>二、模型的创立条件</h2><ul> <li>无后效性—只与前一时刻状态相关和其他历史时刻无关。</li> </ul> <p><img src="/image2/markovFormula.png" alt="markovFormula"></p> <p>图2-1 马尔科夫表示式</p> <ul> <li>系统平稳性—平稳分布（马尔可夫链的）具有某种不变（或者说平稳）性质的概率分布。</li> </ul> <p><img src="/image2/markovPW.png" alt="马尔科夫平稳性"></p> <p>图2-2 马尔科夫平稳分布表示式</p> <h3 id="2-1-无后效性"><a href="#2-1-无后效性" class="headerlink" title="2.1 无后效性"></a>2.1 无后效性</h3><p>状态空间中经过从一个状态到另一个状态的转换的随机过程。该过程要求具备“无记忆”的性质：下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关。这种特定类型的“无记忆性”称作马尔可夫性质。马尔科夫链作为实际过程的统计模型具有许多应用。</p> <p>在马尔可夫链的每一步，系统根据概率分布，可以从一个状态变到另一个状态，也可以保持当前状态。状态的改变叫做转移，与不同的状态改变相关的概率叫做转移概率。随机漫步就是马尔可夫链的例子。随机漫步中每一步的状态是在图形中的点，每一步可以移动到任何一个相邻的点，在这里移动到每一个点的概率都是相同的（无论之前漫步路径是如何的）。</p> <hr> <p>作者：bitcarmanlee<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/bitcarmanlee/article/details/82819860" target="_blank" rel="noopener">https://blog.csdn.net/bitcarmanlee/article/details/82819860</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p> <h3 id="2-2-平稳分布概念"><a href="#2-2-平稳分布概念" class="headerlink" title="2.2 平稳分布概念"></a>2.2 平稳分布概念</h3><ul> <li>平稳分布是一种概率分布。平稳分布（马尔可夫链的）具有某种不变（或者说平稳）性质的概率分布。</li> </ul> <p><img src="/image2/Markov_PWBK.png" alt="马尔科夫百科"></p> <p>图2-3 平稳分布，百度百科解释</p> <h2 id="三、马尔科夫相关的例子"><a href="#三、马尔科夫相关的例子" class="headerlink" title="三、马尔科夫相关的例子"></a>三、马尔科夫相关的例子</h2><p>直接看理论是有点头痛的，但是接下来直接上例子，学习致用，在应用中学习。</p> <h3 id="3-1-马尔科夫股市模型实例"><a href="#3-1-马尔科夫股市模型实例" class="headerlink" title="3.1 马尔科夫股市模型实例"></a>3.1 马尔科夫股市模型实例</h3><p>假设股市三种状态：牛市（Bull market）, 熊市（Bear market）和横盘（Stagnant market），每一个状态都以一定的概率转化到下一个状态。</p> <h4 id="3-1-题设"><a href="#3-1-题设" class="headerlink" title="3.1 题设"></a>3.1 题设</h4><p><img src="/image2/markovSample1_1.png" alt="股市概率转移状态图"></p> <p>图3-1 股市概率转移状态图</p> <p>比如，牛市以0.025的概率转化到横盘的状态。这个状态概率转化图可以以矩阵的形式表示。如果我们定义矩阵阵P某一位置P(i, j)的值为P(j|i)， <strong>即从状态i变为状态j的概率</strong> 。另外定义牛市、熊市、横盘的状态分别为0、1、2，这样我们得到了马尔科夫链模型的状态转移矩阵为：</p> <p><img src="/image2/markovSample1_2.png" alt="马尔科夫状态转移概率矩阵"></p> <p>图3-2 马尔科夫状态转移概率矩阵</p> <p>当这个状态转移矩阵P确定以后，整个股市模型就已经确定！</p> <h4 id="3-1-1-用计算结果说明马尔科夫的性质（无后效性，和系统平稳性）"><a href="#3-1-1-用计算结果说明马尔科夫的性质（无后效性，和系统平稳性）" class="headerlink" title="3.1.1 用计算结果说明马尔科夫的性质（无后效性，和系统平稳性）"></a>3.1.1 用计算结果说明马尔科夫的性质（无后效性，和系统平稳性）</h4><ul> <li>步骤一、假设初始状态：t0​=[0.1,0.2,0.7]，然后算之后的状态。</li> <li>步骤二、计算方法是用这个初始的状态分布概率向量(t0)点乘我们的马尔科夫状态转移概率矩阵(P)。</li> <li>如图2-2 所说的，当P^n –&gt; 会趋向一个稳定的转移概率矩阵。</li> </ul> <p><a href="./Attachment/markovDemo.py">Python 代码验证</a>：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">markov</span><span class="params">()</span>:</span> </span><br><span class="line"> init_array = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.7</span>]) </span><br><span class="line"> transfer_matrix = np.array([[<span class="number">0.9</span>, <span class="number">0.075</span>, <span class="number">0.025</span>], </span><br><span class="line"> [<span class="number">0.15</span>, <span class="number">0.8</span>, <span class="number">0.05</span>], </span><br><span class="line"> [<span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0.5</span>]]) </span><br><span class="line"> restmp = init_array <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>): </span><br><span class="line"> res = np.dot(restmp, transfer_matrix) </span><br><span class="line"> <span class="keyword">print</span> i, <span class="string">"\t"</span>, </span><br><span class="line"> res restmp = res </span><br><span class="line">markov()</span><br></pre></td></tr></table></figure> <p>执行以上代码后，输出结果，如图所示</p> <p><img src="/image2/markovGuShi_1.png" alt="马尔科夫股市代码输出"></p> <p>图3-3 马尔科夫股市代码输出</p> <p>从第18次开始，状态就开始收敛至[0.624,0.312,0.0625]。最终数字上略有不同，只是计算机浮点数运算造成的罢了。</p> <p>如果我们换一个初始状态t0​，比如[0.2,0.3.0.5]，继续运行上面的代码，只是将init_array变一下，最后结果为：</p> <p><img src="/image2/markovGuShi_2.png" alt="马尔科夫股市代码输出"></p> <p>到第18次的时候，又收敛到了[0.624,0.312,0.0625]!<br>这个转移矩阵就厉害了。不管我们的初始状态是什么样子的，只要状态转移矩阵不发生变化，当n→∞时，最终状态始终会收敛到一个固定值。</p> <h4 id="3-1-2-后续接着代码验证-图2-2-马尔科夫平稳分布表示式（3点）"><a href="#3-1-2-后续接着代码验证-图2-2-马尔科夫平稳分布表示式（3点）" class="headerlink" title="3.1.2 后续接着代码验证 图2-2 马尔科夫平稳分布表示式（3点）"></a>3.1.2 后续接着代码验证 图2-2 马尔科夫平稳分布表示式（3点）</h4><p>我们也看看这个状态转移矩阵P的25(本是n-&gt;∞幂次方) 幂次方有什么有意思的地方？</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matrixpower</span><span class="params">()</span>:</span> </span><br><span class="line"> transfer_matrix = np.array([[<span class="number">0.9</span>, <span class="number">0.075</span>, <span class="number">0.025</span>], </span><br><span class="line"> [<span class="number">0.15</span>, <span class="number">0.8</span>, <span class="number">0.05</span>], </span><br><span class="line"> [<span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0.5</span>]]) </span><br><span class="line"> restmp = transfer_matrix </span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>): </span><br><span class="line"> res = np.dot(restmp, transfer_matrix) </span><br><span class="line"> <span class="keyword">print</span> i, <span class="string">"\t"</span>, res </span><br><span class="line"> restmp = res </span><br><span class="line">matrixpower()</span><br></pre></td></tr></table></figure> <p>执行以上代码</p> <p><img src="/image2/markovGuShi_3.png" alt="马尔科夫股市代码输出"></p> <p>发现了，从第20次开始，结果开始收敛，并且每一行都为[0.625,0.312,0.0625]!</p> <p>再次验证了图2.2的定理0.4.2的 </p> <p><img src="/image2/markovGuShi_4.png" alt="马尔科夫股市代码输出"></p> <hr> <h3 id="3-2-马尔科夫的人类上中下阶层分布模型"><a href="#3-2-马尔科夫的人类上中下阶层分布模型" class="headerlink" title="3.2 马尔科夫的人类上中下阶层分布模型"></a>3.2 马尔科夫的人类上中下阶层分布模型</h3><p>假设，社会学家把人按其经济状况分为3类：下层，中层，上层，我们用1,2,3表示这三个阶层。社会学家发现决定一个人的收入阶层最重要的因素就是其父母的收入阶层。如果一个人的收入属于下层类别，则它的孩子属于下层收入的概率为0.65，属于中层收入的概率为0.28，属于上层收入的概率为0.07。从父代到子代，收入阶层转移概率如下</p> <p><img src="/image2/markovJieceng_3_1_2_1.png" alt="马尔科夫阶层分布模型"></p> <ul> <li>我们用P表示这个转移矩阵，则</li> </ul> <p><img src="/image2/markovJieceng_3_1_2_2.png" alt="马尔科夫阶层分布模型"></p> <ul> <li>假设第1代人的阶层比例为</li> </ul> <p><img src="/image2/markovJieceng_3_1_2_3.png" alt="马尔科夫阶层分布模型"></p> <ul> <li>则前10代人的阶层分布如下</li> </ul> <blockquote> <p>第二代人是第一代任PI0，点乘以P（转移概率），<br>第三代人是第二代人点乘以P</p> </blockquote> <p><img src="/image2/markovJieceng_3_1_2_4.png" alt="马尔科夫阶层分布模型"></p> <p>我们可以看到，在相同的转移矩阵作用下，状态变化最终会趋于平稳。对于第n代人的阶层分布，我们有</p> <p><img src="/image2/markovJieceng_3_1_2_5.png" alt="马尔科夫阶层分布模型"></p> <p>从表达式上我们可以看到，π是一维向量，P是两维矩阵，P进行足够多次自乘后，值趋于<strong>稳定</strong>。</p> <h4 id="3-2-1-马尔科夫的人类农村转城市人口分布模型"><a href="#3-2-1-马尔科夫的人类农村转城市人口分布模型" class="headerlink" title="3.2.1 马尔科夫的人类农村转城市人口分布模型"></a>3.2.1 马尔科夫的人类农村转城市人口分布模型</h4><p>假设城市化进程中，农村人转移为城市人的概率为0.5，城市人转移为农村人的概率为0.1。</p> <table> <thead> <tr> <th style="text-align:center">人口</th> <th style="text-align:center">农村人</th> <th style="text-align:center">城市人</th> </tr> </thead> <tbody> <tr> <td style="text-align:center">农村人</td> <td style="text-align:center">0.5</td> <td style="text-align:center">0.5</td> </tr> <tr> <td style="text-align:center">城市人</td> <td style="text-align:center">0.1</td> <td style="text-align:center">0.9</td> </tr> </tbody> </table> <p>假设一开始有100个农村人，0个城市人，每代转移人数矩阵如下</p> <table> <thead> <tr> <th style="text-align:center">代数</th> <th style="text-align:center">农村人</th> <th style="text-align:center">城市人</th> <th style="text-align:center">农村人转移为城市人</th> <th style="text-align:center">城市人转移为农村人</th> </tr> </thead> <tbody> <tr> <td style="text-align:center">1</td> <td style="text-align:center">100</td> <td style="text-align:center">0</td> <td style="text-align:center">50</td> <td style="text-align:center">0</td> </tr> <tr> <td style="text-align:center">2</td> <td style="text-align:center">50</td> <td style="text-align:center">50</td> <td style="text-align:center">25</td> <td style="text-align:center">5</td> </tr> <tr> <td style="text-align:center">3</td> <td style="text-align:center">30</td> <td style="text-align:center">70</td> <td style="text-align:center">15</td> <td style="text-align:center">7</td> </tr> <tr> <td style="text-align:center">4</td> <td style="text-align:center">22</td> <td style="text-align:center">78</td> <td style="text-align:center">11</td> <td style="text-align:center">8</td> </tr> <tr> <td style="text-align:center">5</td> <td style="text-align:center">19</td> <td style="text-align:center">81</td> <td style="text-align:center">10</td> <td style="text-align:center">8</td> </tr> <tr> <td style="text-align:center">6</td> <td style="text-align:center">17</td> <td style="text-align:center">83</td> <td style="text-align:center">8</td> <td style="text-align:center">8</td> </tr> <tr> <td style="text-align:center">7</td> <td style="text-align:center">17</td> <td style="text-align:center">83</td> <td style="text-align:center">8</td> <td style="text-align:center">8</td> </tr> </tbody> </table> <p>可以看到，城市化进程中马尔科夫平稳状态就是农村人转移为城市人的速度等于城市人转移为农村人的速度。对于上述转移矩阵P，平稳分布为农村人17%，城市人83%。如果我们可以得到当前中国城市化转移矩阵P，我们就可以算出中国最终城市化率大概为多少（这里不考虑P的变化）。同时如果我们知道了中国城市化人口比例，我们就能知道城市化进程还可以持续多少代人。</p> <h3 id="3-3-车站候车人数预测模型"><a href="#3-3-车站候车人数预测模型" class="headerlink" title="3.3 车站候车人数预测模型"></a>3.3 车站候车人数预测模型</h3><p>具体的实例过程请移步 <strong>[2.1.1 马尔科夫简单模型预测实战笔记]</strong> 章节部分</p> <hr> <h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><h3 id="4-1-马尔科夫的平稳随机性"><a href="#4-1-马尔科夫的平稳随机性" class="headerlink" title="4.1 马尔科夫的平稳随机性"></a>4.1 马尔科夫的平稳随机性</h3><ul> <li><p>非周期马氏链：马氏链转移要收敛，就一定不能是周期性的。不做特别处理，我们处理的问题基本上都是非周期性的</p> </li> <li><p>存在概率转移矩阵P，任意两个状态是连通的，如上，例题中的每个不同的阶层人的角色通过某种方式，他们之间是可以相互转化，前后转化的两种状态是联通的可以转化的，底层人士可以转化成中层等。</p> </li> </ul> <blockquote> <p>不论初始状态是什么，经过足够多次概率转移后，会存在一个稳定的状态π。<br>概率转移矩阵自乘足够多次后，每行值相等。即</p> </blockquote> <p><img src="/image2/markov4_1.png" alt="马尔科夫总结"></p> <ul> <li>显然，由于马氏链稳定后，所有状态转移到状态j的概率之和稳定。</li> </ul> <p><img src="/image2/markov4_2.png" alt="马尔科夫总结"></p> <ul> <li>则π为马氏链稳定状态，并且π是方程π=πP的唯一非负解。结合上面结论，很明显。</li> </ul> <p><img src="/image2/markov4_3.png" alt="马尔科夫总结"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 马尔科夫模型实战 </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.1.1 马尔科夫简单模型预测实战笔记</title>
      <link href="//maerkefuyuce/"/>
      <url>//maerkefuyuce/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本篇文章笔记总结来自网络和书本，引用部分都有来源，内容主要介绍马尔科夫相关实际应用搞得入门例子，很简单，但是能说明马尔科夫的原理相关。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="马尔科夫简单模型预测实战笔记"><a href="#马尔科夫简单模型预测实战笔记" class="headerlink" title="马尔科夫简单模型预测实战笔记"></a>马尔科夫简单模型预测实战笔记</h1><h2 id="一、基于马尔可夫链的公交停靠站乘客数预测"><a href="#一、基于马尔可夫链的公交停靠站乘客数预测" class="headerlink" title="一、基于马尔可夫链的公交停靠站乘客数预测"></a>一、基于马尔可夫链的公交停靠站乘客数预测</h2><h3 id="1-1-题设"><a href="#1-1-题设" class="headerlink" title="1.1 题设"></a>1.1 题设</h3><ul> <li><p>假设站点乘客数的状态具有马尔可夫性，当某一时刻有公交车停靠时， 会有一些乘客上车， 则下一时刻车辆到达时停靠站的乘客数与这一时刻剩余的乘客相关， 这一特征符合了马尔可夫链的马尔可夫性，同时在任意时刻的候车乘客只与上一时刻的乘客数相关， 而与候车时间无关。—-满足马尔科夫。</p> </li> <li><p>数据</p> </li> </ul> <blockquote> <p>以该停靠站点的候车乘客数为统计对象， 按照离散时间， 在状态转移中将以时间间隔为五分钟而对停靠站点的乘客数进行计数。以工作日某一天的上午8∶ 00 ～ 10∶ 00 的两小时为统计的时间段， 其中第一组数据为时刻 8∶05 时的乘客数， 可得到 24 组数据。如下图所示：</p> </blockquote> <p><img src="/image2/markovC_shiLi_1_1.png" alt="24组数据8-10点"></p> <p>图1-1 8-10点的24组数据</p> <p>由表 1 可知， 该站点的乘客数区间为［12， 27］，为保证预测的准确性， 根据建模步骤可将站点的乘客数分为 3 种状态， 即状态空间为( E1， E2， E3 ) ， 其中 E1 表示乘客数为 11 ～ 16， E2 表示乘客数为 17 ～22， E3 表示乘客数为 23 ～ 28， 因此有乘客数状态空间的频数分布， 如表 2 所示。</p> <ul> <li>于是得到对应上表的如下状态分布表</li> </ul> <p>表二</p> <table> <thead> <tr> <th style="text-align:left">时间点</th> <th style="text-align:left">乘客人数</th> <th style="text-align:center">时间表</th> <th style="text-align:center">乘客人数</th> <th style="text-align:right">时间表</th> <th style="text-align:right">乘客人数</th> <th style="text-align:center">时间表</th> <th style="text-align:center">乘客人数</th> </tr> </thead> <tbody> <tr> <td style="text-align:left">1</td> <td style="text-align:left">E1</td> <td style="text-align:center">7</td> <td style="text-align:center">E2</td> <td style="text-align:right">13</td> <td style="text-align:right">E1</td> <td style="text-align:center">9</td> <td style="text-align:center">E2</td> </tr> <tr> <td style="text-align:left">2</td> <td style="text-align:left">E1</td> <td style="text-align:center">8</td> <td style="text-align:center">E3</td> <td style="text-align:right">14</td> <td style="text-align:right">E2</td> <td style="text-align:center">20</td> <td style="text-align:center">E1</td> </tr> <tr> <td style="text-align:left">3</td> <td style="text-align:left">E2</td> <td style="text-align:center">9</td> <td style="text-align:center">E2</td> <td style="text-align:right">15</td> <td style="text-align:right">E2</td> <td style="text-align:center">21</td> <td style="text-align:center">E1</td> </tr> <tr> <td style="text-align:left">4</td> <td style="text-align:left">E2</td> <td style="text-align:center">10</td> <td style="text-align:center">E2</td> <td style="text-align:right">16</td> <td style="text-align:right">E3</td> <td style="text-align:center">22</td> <td style="text-align:center">E1</td> </tr> <tr> <td style="text-align:left">5</td> <td style="text-align:left">E2</td> <td style="text-align:center">11</td> <td style="text-align:center">E1</td> <td style="text-align:right">17</td> <td style="text-align:right">E3</td> <td style="text-align:center">22</td> <td style="text-align:center">E1</td> </tr> <tr> <td style="text-align:left">6</td> <td style="text-align:left">E2</td> <td style="text-align:center">12</td> <td style="text-align:center">E2</td> <td style="text-align:right">18</td> <td style="text-align:right">E2</td> <td style="text-align:center">24</td> <td style="text-align:center">E1</td> </tr> </tbody> </table> <p>于是可以得到状态转移频次表如下表所示：</p> <p>表三</p> <table> <thead> <tr> <th style="text-align:left">单位(人)</th> <th style="text-align:center">E1</th> <th style="text-align:center">E2</th> <th style="text-align:center">E3</th> </tr> </thead> <tbody> <tr> <td style="text-align:left">E1</td> <td style="text-align:center">5</td> <td style="text-align:center">3</td> <td style="text-align:center">0</td> </tr> <tr> <td style="text-align:left">E2</td> <td style="text-align:center">3</td> <td style="text-align:center">7</td> <td style="text-align:center">2</td> </tr> <tr> <td style="text-align:left">E3</td> <td style="text-align:center">0</td> <td style="text-align:center">2</td> <td style="text-align:center">1</td> </tr> </tbody> </table> <h3 id="1-2-计算模型"><a href="#1-2-计算模型" class="headerlink" title="1.2 计算模型"></a>1.2 计算模型</h3><p>根据马尔可夫变量的特征， 结合变量状态转移概率矩阵， 对站点乘客数的预测步骤如下:</p> <p>统计时需注意: 引起乘客数状态变化的转入包括下车后仍留在站点候车的乘客; 引起乘客数状态变化的转出则包括经过停靠车辆后上车的乘客， 则有表 1。</p> <p>由表二可统计得到如下信息：</p> <table> <thead> <tr> <th style="text-align:center"></th> <th style="text-align:center">E1</th> <th style="text-align:center">E2</th> <th style="text-align:center">E3</th> </tr> </thead> <tbody> <tr> <td style="text-align:center">当前统计总数(人)</td> <td style="text-align:center">8</td> <td style="text-align:center">12</td> <td style="text-align:center">3</td> </tr> </tbody> </table> <p>由此可得到表三对应的转移概率矩阵，如下</p> <table> <thead> <tr> <th style="text-align:center">转移概率</th> <th style="text-align:center">E1</th> <th style="text-align:center">E2</th> <th style="text-align:center">E3</th> </tr> </thead> <tbody> <tr> <td style="text-align:center">E1</td> <td style="text-align:center">5/8</td> <td style="text-align:center">3/8</td> <td style="text-align:center">0/8</td> </tr> <tr> <td style="text-align:center">E2</td> <td style="text-align:center">3/12</td> <td style="text-align:center">7/12</td> <td style="text-align:center">2/12</td> </tr> <tr> <td style="text-align:center">E3</td> <td style="text-align:center">0/3</td> <td style="text-align:center">2/3</td> <td style="text-align:center">1/3</td> </tr> </tbody> </table> <p>即：</p> <table> <thead> <tr> <th style="text-align:center">转移概率</th> <th style="text-align:center">E1</th> <th style="text-align:center">E2</th> <th style="text-align:center">E3</th> </tr> </thead> <tbody> <tr> <td style="text-align:center">E1</td> <td style="text-align:center">0.625</td> <td style="text-align:center">0.375</td> <td style="text-align:center">0</td> </tr> <tr> <td style="text-align:center">E2</td> <td style="text-align:center">0.25</td> <td style="text-align:center">0.58</td> <td style="text-align:center">0.17</td> </tr> <tr> <td style="text-align:center">E3</td> <td style="text-align:center">0</td> <td style="text-align:center">0.67</td> <td style="text-align:center">0.33</td> </tr> </tbody> </table> <p><img src="/image2/MarkovSZ_1.2.1.png" alt="转移概率矩阵"></p> <ul> <li>设初始时刻的状态分布为10点的时刻。由于10点出行人数是14人，在E1(11~16)之间，故设出事时刻的概率分布为:</li> </ul> <p>N(0)=(1, 0, 0)</p> <p>由N(1)=N(0).*P(1)=(0.625, 0.375, 0)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">markov</span><span class="params">()</span>:</span> </span><br><span class="line"> init_array = np.array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]) </span><br><span class="line"> transfer_matrix = np.array([[<span class="number">0.625</span>, <span class="number">0.375</span>, <span class="number">0</span>], </span><br><span class="line"> [<span class="number">0.25</span>, <span class="number">0.58</span>, <span class="number">0.17</span>], </span><br><span class="line"> [<span class="number">0</span>, <span class="number">0.67</span>, <span class="number">0.33</span>]]) </span><br><span class="line"> restmp = init_array </span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>): </span><br><span class="line"> res = np.dot(restmp, transfer_matrix) </span><br><span class="line"> print(<span class="string">'N('</span>,i+<span class="number">1</span>,<span class="string">')'</span>, <span class="string">"\t"</span>, res ) </span><br><span class="line"> restmp = res </span><br><span class="line"> </span><br><span class="line">markov()</span><br></pre></td></tr></table></figure> <p><img src="/image2/MarkovSZ_1.2.2.png" alt="代码运行结果"></p> <blockquote> <p>N(0), 代表10：00的乘客数。N(1)代表10:05分的乘客数.N(2)代表10:10分的乘客数，以此类推。</p> </blockquote> <ul> <li>取上面设定的状态范围（11~16）， （17-22）， （18~28），分别对上面的取值区间做中值得到13.5， 19.5， 25.5； </li> </ul> <ul> <li>设 E1=13.5, E2=19.5, E3=25.5.</li> </ul> <p>由10:05分的站点乘客数量状态分布，N(1)=[0.625, 0.375, 0],和E=[13.5, 19.5, 25.5]可求得10:05的期望值Ex</p> <p>$$<br>E_{x}=\sum_{i=1}^{3} (N(1,i)*E(i)) = 0.625\times 13.5 + 0.375\times19.5 + 0\times25.5 = 15.75<br>$$</p> <p><img src="/image2/MarkovSZ_1.2.3.png" alt="Ex的期望值"></p> <blockquote> <p>在概率论和统计学中，数学期望(mean)（或均值，亦简称期望）是试验中每次可能结果的概率乘以其结果的总和，是最基本的数学特征之一。它反映随机变量平均取值的大小。</p> </blockquote> <p>即，在10:05的时刻，车站人数最可能有15.75个人在等车。</p> <p>同理在10:10分，N(2)=[0.484375, 0.451875, 0.06375], 则此时刻（10:05），车站最可能（该时刻的期望值）出现的候车人数经计算为： 16.7503125（人），具体计算过程如下：</p> <p>$$<br>E_{x}=\sum_{i=1}^{3} (N(1,i)*E(i))<br> = 0.484375\times 13.5 + 0.451875\times19.5 + 0.06375\times25.5<br> = 16.7503125<br>$$</p> <ul> <li>推荐下<a href="https://www.codecogs.com/latex/eqneditor.php" target="_blank" rel="noopener">在线Latex公式编辑网站</a></li> </ul> <p><img src="/image2/MarkovSZ_1.2.4.png" alt="10:05时刻人数统计的期望值"></p> <p>10:15时刻，10:20时刻，10:25时刻，……计算方法一次类推，于是可得到整个时间段站台候车人数的预测表，如下表：</p> <table> <thead> <tr> <th style="text-align:left">时刻</th> <th style="text-align:left">状态</th> <th style="text-align:left">转移率</th> <th style="text-align:left">站台乘客数预测值</th> <th style="text-align:left">站台人数实际值</th> </tr> </thead> <tbody> <tr> <td style="text-align:left"></td> <td style="text-align:left">E1</td> <td style="text-align:left">0.625</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left">10:05</td> <td style="text-align:left">E2</td> <td style="text-align:left">0.375</td> <td style="text-align:left">15.75</td> <td style="text-align:left">14</td> </tr> <tr> <td style="text-align:left"></td> <td style="text-align:left">E3</td> <td style="text-align:left">0</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left"></td> <td style="text-align:left">E1</td> <td style="text-align:left">0.484375</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left">10:10</td> <td style="text-align:left">E2</td> <td style="text-align:left">0.50358792</td> <td style="text-align:left">16.7503125</td> <td style="text-align:left">16</td> </tr> <tr> <td style="text-align:left"></td> <td style="text-align:left">E3</td> <td style="text-align:left">0.09785625</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left"></td> <td style="text-align:left">E1</td> <td style="text-align:left">0.38142461</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left">10:15</td> <td style="text-align:left">E2</td> <td style="text-align:left">0.50358792</td> <td style="text-align:left">17.90137716</td> <td style="text-align:left">17</td> </tr> <tr> <td style="text-align:left"></td> <td style="text-align:left">E3</td> <td style="text-align:left">0.11498747</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left"></td> <td style="text-align:left">E1</td> <td style="text-align:left">0.36428736</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left">10:20</td> <td style="text-align:left">E2</td> <td style="text-align:left">0.51215683</td> <td style="text-align:left">18.0556107</td> <td style="text-align:left">18</td> </tr> <tr> <td style="text-align:left"></td> <td style="text-align:left">E3</td> <td style="text-align:left">0.12355581</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left"></td> <td style="text-align:left">E1</td> <td style="text-align:left">0.35571881</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left">10:25</td> <td style="text-align:left">E2</td> <td style="text-align:left">0.51644111</td> <td style="text-align:left">18.13272762</td> <td style="text-align:left">18</td> </tr> <tr> <td style="text-align:left"></td> <td style="text-align:left">E3</td> <td style="text-align:left">0.12784008</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left"></td> <td style="text-align:left">E1</td> <td style="text-align:left">0.35143453</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> <tr> <td style="text-align:left">10:30</td> <td style="text-align:left">E2</td> <td style="text-align:left">0.51858325</td> <td style="text-align:left">18.17128614</td> <td style="text-align:left">18</td> </tr> <tr> <td style="text-align:left"></td> <td style="text-align:left">E3</td> <td style="text-align:left">0.12998222</td> <td style="text-align:left">—</td> <td style="text-align:left">—</td> </tr> </tbody> </table> <ul> <li>以上的基于马尔科夫的模型预测和实际值的趋势图如下图所示：</li> </ul> <p><img src="/image2/MarkovSZ_1.2.5.png" alt="Markov预测结果和实际结果对比"></p> <p>图像在线生成：<a href="http://charts.udpwork.com/" target="_blank" rel="noopener">推荐下在线绘图做表的网站</a></p> <blockquote> <p>预测结果表明在马尔可夫链理论下的预测会受到时间长短的影响， 在短时间内的统计， 预测结果与实际值间的误差较为明显， 当统计量足够多时， 预测的趋势会更加符合实际情况。</p> </blockquote> <ul> <li><a href="https://blog.csdn.net/zhujialiang18/article/details/80745878" target="_blank" rel="noopener">C-K方程( Chapman- Kolmogorov方程)-马尔可夫链定义如下:</a></li> </ul> <p><img src="/image2/markovC_K_part1.png" alt="C-K方程"></p> <p><img src="/image2/markovC_K_part2.png" alt="C-K方程"></p> <p><img src="/image2/markovC_K_part3.png" alt="C-K方程"></p> <h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><p>[1]刘哲华.基于马尔可夫链的公交停靠站乘客数预测[J].黑龙江交通科技,2018,41(11):155-157.</p> <h2 id="二、最佳经营策略应用"><a href="#二、最佳经营策略应用" class="headerlink" title="二、最佳经营策略应用"></a>二、最佳经营策略应用</h2><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> 马尔科夫模型实战 </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网页设计基础笔记</title>
      <link href="//webdessignnotes/"/>
      <url>//webdessignnotes/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><center> Porter Pan </center> <h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul> <li>网页效果图设计，可以Fireworks,也可以Photoshop以及其他的平面设计软件</li> <li>根据网页效果图进行切图<blockquote> <p>为什么要切图：提高网站下载速率，规律：能用CSS效果表现出来的就少用图像，也是为了提高下载速率</p> </blockquote> </li> </ul> <a id="more"></a><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 安利 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简单的方法，获取在线付费设计log的方法</title>
      <link href="//freelog/"/>
      <url>//freelog/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><center> Porter Pan </center> <h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>有时人穷则需要志坚，花别人返工心情的时间，做别人不愿做的尝试。</p> <ul> <li>今天的目标对象是他：<a href="https://www.logosc.cn" target="_blank" rel="noopener">Log设计网</a></li> </ul> <blockquote> <p>不是我不支持他，而是因为，太穷，没那么多钱钱，用到啥买啥，所以，看能省钱的地方就省了吧。</p> </blockquote> <blockquote> <p>本文档是教如何免费获取99元套餐的log设计资源。</p> </blockquote> <a id="more"></a> <h3 id="点击进入Log官网的个人中心"><a href="#点击进入Log官网的个人中心" class="headerlink" title="点击进入Log官网的个人中心"></a>点击进入<a href="https://www.logosc.cn/edit" target="_blank" rel="noopener">Log官网</a>的个人中心</h3><ul> <li>选择你目前编辑的Log</li> <li>点击页面的分享</li> <li>在浏览页面中鼠标右键，进入inspect界面</li> <li>点击Source</li> <li>查看源码</li> <li>搜索关键字“jpg”</li> <li>复制图片链接，下载，好了，这就是你自己的Log了</li> </ul> <p>以上步骤结束，不贴图了，贴图影响不好了</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 安利 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git中忽略提交项</title>
      <link href="//gitIgnore/"/>
      <url>//gitIgnore/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h1><p>本文记录了git的忽略提交的git规则配置，及一些举例。</p> <p><a href="https://www.cnblogs.com/kevingrace/p/5690241.html" target="_blank" rel="noopener">参考博客资料</a></p> <a id="more"></a> <h3 id="在Git项目中定义-gitignore文件"><a href="#在Git项目中定义-gitignore文件" class="headerlink" title="在Git项目中定义.gitignore文件"></a>在Git项目中定义.gitignore文件</h3><p>对于经常使用Git的朋友来说，.gitignore配置一定不会陌生。这种方式通过在项目的某个文件夹下定义.gitignore文件，在该文件中定义相应的忽略规则，来管理当前文件夹下的文件的Git提交行为。.gitignore 文件是可以提交到公有仓库中，这就为该项目下的所有开发者都共享一套定义好的忽略规则。在.gitingore 文件中，遵循相应的语法，在每一行指定一个忽略规则。如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*.log</span><br><span class="line">*.temp</span><br><span class="line">/vendor</span><br></pre></td></tr></table></figure> <h3 id="在Git项目的设置中指定排除文件"><a href="#在Git项目的设置中指定排除文件" class="headerlink" title="在Git项目的设置中指定排除文件"></a>在Git项目的设置中指定排除文件</h3><p>这种方式只是临时指定该项目的行为，需要编辑当前项目下的 .git/info/exclude文件，然后将需要忽略提交的文件写入其中。需要注意的是，这种方式指定的忽略文件的根目录是项目根目录。</p> <h3 id="定义Git全局的-gitignore-文件"><a href="#定义Git全局的-gitignore-文件" class="headerlink" title="定义Git全局的 .gitignore 文件"></a>定义Git全局的 .gitignore 文件</h3><p>除了可以在项目中定义 .gitignore 文件外，还可以设置全局的git .gitignore文件来管理所有Git项目的行为。这种方式在不同的项目开发者之间是不共享的，是属于项目之上Git应用级别的行为。这种方式也需要创建相应的 .gitignore 文件，可以放在任意位置。然后在使用以下命令配置Git：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># git config --global core.excludesfile ~/.gitignore</span><br></pre></td></tr></table></figure> <p>首先要强调一点，这个文件的完整文件名就是”.gitignore”，注意最前面有个“.”。一般来说每个Git项目中都需要一个“.gitignore”文件，这个文件的作用就是告诉Git哪些文件不需要添加到版本管理中。实际项目中，很多文件都是不需要版本管理的，比如Python的.pyc文件和一些包含密码的配置文件等等。这个文件的内容是一些规则，Git会根据这些规则来判断是否将文件添加到版本控制中。</p> <h3 id="Git忽略文件的原则"><a href="#Git忽略文件的原则" class="headerlink" title="Git忽略文件的原则"></a>Git忽略文件的原则</h3><ul> <li>忽略操作系统自动生成的文件，比如缩略图等；</li> <li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；</li> <li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li> </ul> <h3 id="gitignore文件的使用方法"><a href="#gitignore文件的使用方法" class="headerlink" title=".gitignore文件的使用方法"></a>.gitignore文件的使用方法</h3><ul> <li>首先，在你的工作区新建一个名称为.gitignore的文件。</li> <li>然后，把要忽略的文件名填进去，Git就会自动忽略这些文件。<blockquote> <p>不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。</p> </blockquote> </li> </ul> <blockquote> <p>有时对于git项目下的某些文件，我们不需要纳入版本控制，比如日志文件或者IDE的配置文件，此时可以在项目的根目录下建立一个隐藏文件</p> </blockquote> <blockquote> <p>.gitignore（linux下以.开头的文件都是隐藏文件），然后在.gitignore中写入需要忽略的文件。</p> </blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kevin ~]<span class="comment"># cat .gitignore</span></span><br><span class="line">*.xml</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">*.apk</span><br></pre></td></tr></table></figure> <p>.gitignore注释用’#’, *表示匹配0个或多个任意字符，所以上面的模式就是要忽略所有的xml文件,log文件和apk文件。</p> <p>.gitignore配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为版本管理带来很大的便利。</p> <h3 id="gitignore忽略规则的优先级"><a href="#gitignore忽略规则的优先级" class="headerlink" title=".gitignore忽略规则的优先级"></a>.gitignore忽略规则的优先级</h3><p>在 .gitingore 文件中，每一行指定一个忽略规则，Git检查忽略规则的时候有多个来源，它的优先级如下（由高到低）：</p> <p>1）从命令行中读取可用的忽略规则</p> <p>2）当前目录定义的规则</p> <p>3）父级目录定义的规则，依次递推</p> <p>4）$GIT_DIR/info/exclude 文件中定义的规则</p> <p>5）core.excludesfile中定义的全局规则</p> <h3 id="gitignore忽略规则的匹配语法"><a href="#gitignore忽略规则的匹配语法" class="headerlink" title=".gitignore忽略规则的匹配语法"></a>.gitignore忽略规则的匹配语法</h3><p>在 .gitignore 文件中，每一行的忽略规则的语法如下：<br>1）空格不匹配任意文件，可作为分隔符，可用反斜杠转义<br>2）以“＃”开头的行都会被 Git 忽略。即#开头的文件标识注释，可以使用反斜杠进行转义。<br>3）可以使用标准的glob模式匹配。所谓的glob模式是指shell所使用的简化了的正则表达式。<br>4）以斜杠”/“开头表示目录；”/“结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件；”/“开始的模式匹配项目跟目录；如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录。<br>5）以星号”*”通配多个字符，即匹配多个任意字符；使用两个星号”<strong>“ 表示匹配任意中间目录，比如`a/</strong>/z`可以匹配 a/z, a/b/z 或 a/b/c/z等。<br>6）以问号”?”通配单个字符，即匹配一个任意字符；<br>7）以方括号”[]”包含单个字符的匹配列表，即匹配任何一个列在方括号中的字符。比如[abc]表示要么匹配一个a，要么匹配一个b，要么匹配一个c；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配。比如[0-9]表示匹配所有0到9的数字，[a-z]表示匹配任意的小写字母）。<br>8）以叹号”!”表示不忽略(跟踪)匹配到的文件或目录，即要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。需要特别注意的是：如果文件的父目录已经被前面的规则排除掉了，那么对这个文件用”!”规则是不起作用的。也就是说”!”开头的模式表示否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用”!”也不会再次被包含。可以使用反斜杠进行转义。</p> <p>需要谨记：git对于.ignore配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</p> <h3 id="gitignore忽略规则简单说明"><a href="#gitignore忽略规则简单说明" class="headerlink" title=".gitignore忽略规则简单说明"></a>.gitignore忽略规则简单说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示此为注释,将被Git忽略</span></span><br><span class="line">*.a 表示忽略所有 .a 结尾的文件</span><br><span class="line">!lib.a 表示但lib.a除外</span><br><span class="line">/TODO 表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span><br><span class="line">build/ 表示忽略 build/目录下的所有文件，过滤整个build文件夹；</span><br><span class="line">doc/*.txt 表示会忽略doc/notes.txt但不包括 doc/server/arch.txt</span><br><span class="line"> </span><br><span class="line">bin/: 表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件</span><br><span class="line">/bin: 表示忽略根目录下的bin文件</span><br><span class="line">/*.c: 表示忽略cat.c，不忽略 build/cat.c</span><br><span class="line">debug/*.obj: 表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj</span><br><span class="line">**/foo: 表示忽略/foo,a/foo,a/b/foo等</span><br><span class="line">a/**/b: 表示忽略a/b, a/x/b,a/x/y/b等</span><br><span class="line">!/bin/run.sh 表示不忽略bin目录下的run.sh文件</span><br><span class="line">*.<span class="built_in">log</span>: 表示忽略所有 .<span class="built_in">log</span> 文件</span><br><span class="line">config.php: 表示忽略当前路径的 config.php 文件</span><br><span class="line"> </span><br><span class="line">/mtk/ 表示过滤整个文件夹</span><br><span class="line">*.zip 表示过滤所有.zip文件</span><br><span class="line">/mtk/do.c 表示过滤某个具体文件</span><br><span class="line"> </span><br><span class="line">被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。</span><br><span class="line"> </span><br><span class="line">需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下：</span><br><span class="line">!*.zip</span><br><span class="line">!/mtk/one.txt</span><br><span class="line"> </span><br><span class="line">唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？</span><br><span class="line">想象一个场景：假如我们只需要管理/mtk/目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么.gitignore规则应写为：：</span><br><span class="line">/mtk/*</span><br><span class="line">!/mtk/one.txt</span><br><span class="line"> </span><br><span class="line">假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！</span><br><span class="line">注意上面的/mtk/*不能写为/mtk/，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！</span><br><span class="line"> </span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line">还有一些规则如下：</span><br><span class="line">fd1/*</span><br><span class="line">说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；</span><br><span class="line"> </span><br><span class="line">/fd1/*</span><br><span class="line">说明：忽略根目录下的 /fd1/ 目录的全部内容；</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line">!.gitignore</span><br><span class="line">!/fw/ </span><br><span class="line">/fw/*</span><br><span class="line">!/fw/bin/</span><br><span class="line">!/fw/sf/</span><br><span class="line">说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。</span><br></pre></td></tr></table></figure> <ul> <li>温馨提示：<blockquote> <p>如果你不慎在创建.gitignore文件之前就push了项目，那么即使你在.gitignore文件中写入新的过滤规则，这些规则也不会起作用，Git仍然会对所有文件进行版本管理。简单来说出现这种问题的原因就是Git已经开始管理这些文件了，所以你无法再通过过滤规则过滤它们。所以大家一定要养成在项目开始就创建.gitignore文件的习惯，否则一单push，处理起来会非常麻烦。</p> </blockquote> </li> </ul> <h3 id="gitignore忽略规则常用示例"><a href="#gitignore忽略规则常用示例" class="headerlink" title=".gitignore忽略规则常用示例"></a>.gitignore忽略规则常用示例</h3><p>1）示例</p> <blockquote> <p>比如你的项目是java项目，.java文件编译后会生成.class文件，这些文件多数情况下是不想被传到仓库中的文件。这时候你可以直接适用github的<a href="https://github.com/github/gitignore/blob/master/Java.gitignore" target="_blank" rel="noopener">.gitignore文件模板</a>将这些忽略文件信息复制到你的.gitignore文件中去：</p> </blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Compiled class file</span></span><br><span class="line">*.class</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Log file</span></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># BlueJ files</span></span><br><span class="line">*.ctxt</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Mobile Tools for Java (J2ME)</span></span><br><span class="line">.mtj.tmp/</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Package Files #</span></span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"> </span><br><span class="line"><span class="comment"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span></span><br><span class="line">hs_err_pid*</span><br></pre></td></tr></table></figure> <p>可以看到github为我们提供了最流行的.gitignore文件配置。保存.ignore文件后我们查看下git status，检查下是否还有我们不需要的文件会被添加到git中去：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"> </span><br><span class="line">Initial commit</span><br><span class="line"> </span><br><span class="line">Changes to be committed:</span><br><span class="line"> (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"> </span><br><span class="line"> new file: .gitignore</span><br><span class="line"> new file: HelloWorld.java</span><br><span class="line"> </span><br><span class="line">Untracked files:</span><br><span class="line"> (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"> </span><br><span class="line"> Config.ini</span><br></pre></td></tr></table></figure></p> <p>比如我的项目目录下有一个Config.ini文件，这个是个本地配置文件我不希望上传到git中去，我们可以在gitignore文件中添加这样的配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Config.ini</span><br></pre></td></tr></table></figure></p> <p>或者你想忽略所有的.ini文件你可以这样写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.ini</span><br></pre></td></tr></table></figure></p> <p>如果有些文件已经被你忽略了，当你使用git add时是无法添加的，比如我忽略了*.class，现在我想把HelloWorld.class添加到git中去：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add HelloWorld.class</span><br><span class="line">The following paths are ignored by one of your .gitignore files:</span><br><span class="line">HelloWorld.class</span><br><span class="line">Use -f <span class="keyword">if</span> you really want to add them.</span><br></pre></td></tr></table></figure></p> <p>git会提示我们这个文件已经被我们忽略了，需要加上-f参数才能强制添加到git中去：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"> </span><br><span class="line">Initial commit</span><br><span class="line"> </span><br><span class="line">Changes to be committed:</span><br><span class="line"> (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"> </span><br><span class="line"> new file: .gitignore</span><br><span class="line"> new file: HelloWorld.class</span><br><span class="line"> new file: HelloWorld.java</span><br></pre></td></tr></table></figure></p> <p>这样就能强制添加到缓存中去了。如果我们意外的将想要忽略的文件添加到缓存中去了，我们可以使用rm命令将其从中移除：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git rm HelloWorld.class --cached</span><br><span class="line">rm <span class="string">'HelloWorld.class'</span></span><br></pre></td></tr></table></figure></p> <p>如果你已经把不想上传的文件上传到了git仓库，那么你必须先从远程仓库删了它，我们可以从远程仓库直接删除然后pull代码到本地仓库这些文件就会本删除，或者从本地删除这些文件并且在.gitignore文件中添加这些你想忽略的文件，然后再push到远程仓库。</p> <p>2）示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">下面是曾经线上使用过的一个gerrit里项目代码的.gitignore的配置（在项目中添加.gitignore过滤文件，在git push到gerrit里即可）</span><br><span class="line">[wangshibo@gerrit-server hq_ios]$ cat .gitignore</span><br><span class="line"><span class="comment">#Built application files</span></span><br><span class="line">*.apk</span><br><span class="line">*.ap_</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Files for the Dalvik VM</span></span><br><span class="line">*.dex</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Java class files</span></span><br><span class="line">*.class</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Generated files</span></span><br><span class="line">*/bin/</span><br><span class="line">*/gen/</span><br><span class="line">*/out/</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Gradle files</span></span><br><span class="line">.gradle/</span><br><span class="line">build/</span><br><span class="line">*/build/</span><br><span class="line">gradlew</span><br><span class="line">gradlew.bat</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Local configuration file (sdk path, etc)</span></span><br><span class="line">local.properties</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Proguard folder generated by Eclipse</span></span><br><span class="line">proguard/</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Log Files</span></span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Android Studio Navigation editor temp files</span></span><br><span class="line">.navigation/</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Android Studio captures folder</span></span><br><span class="line">captures/</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Intellij</span></span><br><span class="line">*.iml</span><br><span class="line">*/*.iml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Keystore files</span></span><br><span class="line"><span class="comment">#*.jks</span></span><br><span class="line"><span class="comment">#gradle wrapper</span></span><br><span class="line">gradle/</span><br><span class="line"> </span><br><span class="line"><span class="comment">#some local files</span></span><br><span class="line">*/.settings/</span><br><span class="line">*/.DS_Store</span><br><span class="line">.DS_Store</span><br><span class="line">*/.idea/</span><br><span class="line">.idea/</span><br><span class="line">gradlew</span><br><span class="line">gradlew.bat</span><br><span class="line">unused.txt</span><br></pre></td></tr></table></figure></p> <p>3）示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[wangshibo@gerrit-server hq_ios$ cat .gitignore</span><br><span class="line"><span class="comment"># Lines that start with '#' are comments.</span></span><br><span class="line"><span class="comment"># IntelliJ IDEA Project files</span></span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line">*.iws</span><br><span class="line">out</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Eclipse Project files</span></span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings/</span><br><span class="line"> </span><br><span class="line">bin/</span><br><span class="line">gen/</span><br><span class="line">local.properties</span><br><span class="line"> </span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line"> </span><br><span class="line">*.bak</span><br><span class="line">*.tem</span><br><span class="line">*.temp</span><br><span class="line"><span class="comment">#.swp</span></span><br><span class="line">*.*~</span><br><span class="line">~*.*</span><br></pre></td></tr></table></figure></p> <h3 id="gitignor忽略规则查看"><a href="#gitignor忽略规则查看" class="headerlink" title=".gitignor忽略规则查看"></a>.gitignor忽略规则查看</h3><p>如果你发下.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git check-ignore -v HelloWorld.class</span><br><span class="line">.gitignore:1:*.class HelloWorld.class</span><br></pre></td></tr></table></figure></p> <p>可以看到HelloWorld.class匹配到了我们的第一条*.class的忽略规则所以文件被忽略了。</p> <blockquote> <p>简单来说，要实现过滤掉Git里不想上传的文件，如上介绍三种方法能达到这种目的，只不过适用情景不一样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">============第一种方法===========</span><br><span class="line">针对单一工程排除文件，这种方式会让这个工程的所有修改者在克隆代码的同时，也能克隆到过滤规则，而不用自己再写一份，</span><br><span class="line">这就能保证所有修改者应用的都是同一份规则，而不是张三自己有一套过滤规则，李四又使用另一套过滤规则，个人比较喜欢这个。</span><br><span class="line"> </span><br><span class="line">配置步骤如下：</span><br><span class="line">在工程根目录下建立.gitignore文件，将要排除的文件或目录 写到.gitignore这个文件中，其中有两种写入方法：</span><br><span class="line"> </span><br><span class="line">a)使用命令行增加排除文件</span><br><span class="line">排除以.class结尾的文件 <span class="built_in">echo</span> <span class="string">"*.class"</span> &gt;.gitignore (&gt;&gt; 是在文件尾增加,&gt; 是删除已经存在的内容再增加)，之后会在当前目录下</span><br><span class="line">生成一个.gitignore的文件。排除bin目录下的文件 <span class="built_in">echo</span> <span class="string">"bin/"</span> &gt;.gitignore</span><br><span class="line"> </span><br><span class="line">b)最方便的办法是，用记事本打开，增加需要排除的文件或目录，一行增加一个，例如：</span><br><span class="line">*.class</span><br><span class="line">*.apk</span><br><span class="line">bin/</span><br><span class="line">gen/</span><br><span class="line">.settings/</span><br><span class="line">proguard/</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">===========第二种方法===========</span><br><span class="line">全局设置排除文件，这会在全局起作用，只要是Git管理的工程，在提交时都会自动排除不在控制范围内的文件或目录。这种方法对开发者来说，</span><br><span class="line">比较省事，只要一次全局配置，不用每次建立工程都要配置一遍过滤规则。但是这不保证其他的开发者在克隆你的代码后，他们那边的规则跟你</span><br><span class="line">的是一样的，这就带来了代码提交过程中的各种冲突问题。</span><br><span class="line">配置步骤如下：</span><br><span class="line">a）像方法（1）一样，也需要建立一个.gitignore文件，把要排除的文件写进去。</span><br><span class="line">b）但在这里，我们不规定一定要把.gitnore文件放到某个工程下面，而是任何地方，比如我们这里放到了Git默认的Home路径下，比如：/home/wangshibo/hqsb_ios</span><br><span class="line">c）使用命令方式可以配置全局排除文件:</span><br><span class="line"> <span class="comment"># git config --global core.excludesfile ~/.gitignore</span></span><br><span class="line"> 你会发现在~/.gitconfig文件中会出现excludesfile = /home/wangshibo/hqsb_ios/.gitignore。</span><br><span class="line"> 说明Git把文件过滤规则应用到了Global的规则中。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">===========第三种方法===========</span><br><span class="line">单个工程设置排除文件，在工程目录下找到.git/info/exclude，把要排除的文件写进去：</span><br><span class="line">*.class</span><br><span class="line">*.apk</span><br><span class="line">bin/</span><br><span class="line">gen/</span><br><span class="line">.settings/</span><br><span class="line">proguard/</span><br><span class="line"> </span><br><span class="line">这种方法就不提倡了，只能针对单一工程配置，而且还不能将过滤规则同步到其他开发者，跟方法一和方法二比较起来没有一点优势。</span><br></pre></td></tr></table></figure></p> </blockquote> <h3 id="Git忽略规则-gitignore配置）不生效原因和解决"><a href="#Git忽略规则-gitignore配置）不生效原因和解决" class="headerlink" title="Git忽略规则(.gitignore配置）不生效原因和解决"></a>Git忽略规则(.gitignore配置）不生效原因和解决</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">第一种方法:</span><br><span class="line">.gitignore中已经标明忽略的文件目录下的文件，git push的时候还会出现在push的目录中，或者用git status查看状态，想要忽略的文件还是显示被追踪状态。</span><br><span class="line">原因是因为在git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的，</span><br><span class="line">这时候我们就应该先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了。</span><br><span class="line"> </span><br><span class="line">解决方法: git清除本地缓存（改变成未track状态），然后再提交:</span><br><span class="line">[root@kevin ~]<span class="comment"># git rm -r --cached .</span></span><br><span class="line">[root@kevin ~]<span class="comment"># git add .</span></span><br><span class="line">[root@kevin ~]<span class="comment"># git commit -m 'update .gitignore'</span></span><br><span class="line">[root@kevin ~]<span class="comment"># git push -u origin master</span></span><br><span class="line"> </span><br><span class="line">需要特别注意的是：</span><br><span class="line">1）.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</span><br><span class="line">2）想要.gitignore起作用，必须要在这些文件不在暂存区中才可以，.gitignore文件只是忽略没有被staged(cached)文件，</span><br><span class="line"> 对于已经被staged文件，加入ignore文件时一定要先从staged移除，才可以忽略。</span><br><span class="line"> </span><br><span class="line">第二种方法:（推荐）</span><br><span class="line">在每个<span class="built_in">clone</span>下来的仓库中手动设置不要检查特定文件的更改情况。</span><br><span class="line">[root@kevin ~]<span class="comment"># git update-index --assume-unchanged PATH //在PATH处输入要忽略的文件</span></span><br></pre></td></tr></table></figure> <h3 id="在使用-gitignore文件后如何删除远程仓库中以前上传的此类文件而保留本地文件"><a href="#在使用-gitignore文件后如何删除远程仓库中以前上传的此类文件而保留本地文件" class="headerlink" title="在使用.gitignore文件后如何删除远程仓库中以前上传的此类文件而保留本地文件"></a>在使用.gitignore文件后如何删除远程仓库中以前上传的此类文件而保留本地文件</h3><p>在使用git和github的时候，之前没有写.gitignore文件，就上传了一些没有必要的文件，在添加了.gitignore文件后，就想删除远程仓库中的文件却想保存本地的文件。这时候不可以直接使用”git rm directory”，这样会删除本地仓库的文件。可以使用”git rm -r –cached directory”来删除缓冲，然后进行”commit”和”push”，这样会发现远程仓库中的不必要文件就被删除了，以后可以直接使用”git add -A”来添加修改的内容，上传的文件就会受到.gitignore文件的内容约束。</p> <blockquote> <p>额外说明：git库所在的文件夹中的文件大致有4种状态</p> </blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Untracked:</span><br><span class="line">未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</span><br><span class="line"> </span><br><span class="line">Unmodify:</span><br><span class="line">文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改,</span><br><span class="line">而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</span><br><span class="line"> </span><br><span class="line">Modified:</span><br><span class="line">文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态,</span><br><span class="line">使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改</span><br><span class="line"> </span><br><span class="line">Staged:</span><br><span class="line">暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态.</span><br><span class="line">执行git reset HEAD filename取消暂存, 文件状态为Modified</span><br><span class="line"> </span><br><span class="line">Git 状态 untracked 和 not staged的区别</span><br><span class="line">- [x] 1）untrack 表示是新文件，没有被add过，是为跟踪的意思。</span><br><span class="line">- [ ] 2）not staged 表示add过的文件，即跟踪文件，再次修改没有add，就是没有暂存的意思</span><br></pre></td></tr></table></figure> <blockquote> <p>文献参考来源：<a href="https://www.cnblogs.com/kevingrace/p/5690241.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/5690241.html</a></p> </blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gitignore </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.3 matplotlib函数</title>
      <link href="//matplotlibF/"/>
      <url>//matplotlibF/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本节主要是学习matplotlib的函数调用，主要是基础的学习路线，包括简单的实例笔记等。</p> <!-- TOC --> <ul> <li><a href="#摘要">摘要</a><ul> <li><a href="#interactive模式特点">interactive模式特点：</a><ul> <li><a href="#pltion">plt.ion()</a></li> <li><a href="#pltioff">plt.ioff()</a></li> </ul> </li> <li><a href="#常用函数">常用函数</a><ul> <li><a href="#pltfigure">plt.figure()</a><ul> <li><a href="#parameters">Parameters:</a></li> <li><a href="#returns">Returns:</a></li> </ul> </li> <li><a href="#pltplot">plt.plot()</a></li> </ul> </li> </ul> </li> </ul> <!-- /TOC --> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h2 id="interactive模式特点："><a href="#interactive模式特点：" class="headerlink" title="interactive模式特点："></a>interactive模式特点：</h2><h3 id="plt-ion"><a href="#plt-ion" class="headerlink" title="plt.ion()"></a>plt.ion()</h3><h3 id="plt-ioff"><a href="#plt-ioff" class="headerlink" title="plt.ioff()"></a>plt.ioff()</h3><p>开启interactive模式，用plt.ion()，放在绘图之前，关闭该模式用plt.ioff()；</p> <p>python可视化库matplotlib有两种显示模式：</p> <ul> <li>阻塞（block）模式</li> <li>交互（interactive）模式</li> </ul> <p>在Python Consol命令行中，默认是交互模式。而在python脚本中，matplotlib默认是阻塞模式。</p> <p>在交互模式下, plt.plot(x)或plt.imshow(x)是直接出图像，不需要plt.show()<br>如果在脚本中使用ion()命令开启了交互模式，没有使用ioff()关闭的话，则图像会一闪而过，并不会常留。要想防止这种情况，需要在plt.show()之前加上ioff()命令。</p> <p>在阻塞模式下, 打开一个窗口以后必须关掉才能打开下一个新的窗口。这种情况下，默认是不能像Matlab一样同时开很多窗口进行对比的。<br>plt.plot(x)或plt.imshow(x)是直接出图像，需要plt.show()后才能显示图像</p> <p>下面这个例子讲的是如何像matlab一样同时打开多个窗口显示图片或线条进行比较，同时也是在脚本中开启交互模式后图像一闪而过的解决办法：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.ion() <span class="comment"># 打开交互模式</span></span><br><span class="line"><span class="comment"># 同时打开两个窗口显示图片</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(i1)</span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(i2)</span><br><span class="line"><span class="comment"># 显示前关掉交互模式</span></span><br><span class="line">plt.ioff()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> <hr> <h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="plt-figure"><a href="#plt-figure" class="headerlink" title="plt.figure()"></a>plt.figure()</h3><h4 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters:"></a>Parameters:</h4><ul> <li>num : integer or string, optional, default: None</li> </ul> <p>If not provided, a new figure will be created, and the figure number will be incremented. The figure objects holds this number in a number attribute. If num is provided, and a figure with this id already exists, make it active, and returns a reference to it. If this figure does not exists, create it and returns it. If num is a string, the window title will be set to this figure’s num.</p> <ul> <li>figsize : (float, float), optional, default: None</li> </ul> <p>width, height in inches. If not provided, defaults to rcParams[“figure.figsize”] = [6.4, 4.8].</p> <ul> <li>dpi : integer, optional, default: None</li> </ul> <p>resolution of the figure. If not provided, defaults to rcParams[“figure.dpi”] = 100.</p> <ul> <li>facecolor :</li> </ul> <p>the background color. If not provided, defaults to rcParams[“figure.facecolor”] = ‘w’.</p> <ul> <li>edgecolor :</li> </ul> <p>the border color. If not provided, defaults to rcParams[“figure.edgecolor”] = ‘w’.</p> <ul> <li>frameon : bool, optional, default: True</li> </ul> <p>If False, suppress drawing the figure frame.</p> <ul> <li>FigureClass : subclass of Figure</li> </ul> <p>Optionally use a custom Figure instance.</p> <ul> <li>clear : bool, optional, default: False</li> </ul> <p>If True and the figure already exists, then it is cleared.</p> <h4 id="Returns"><a href="#Returns" class="headerlink" title="Returns:"></a>Returns:</h4><ul> <li>figure : Figure</li> </ul> <p>The Figure instance returned will also be passed to new_figure_manager in the backends, which allows to hook custom Figure classes into the pyplot interface. Additional kwargs will be passed to the Figure init function.</p> <h3 id="plt-plot"><a href="#plt-plot" class="headerlink" title="plt.plot()"></a>plt.plot()</h3><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> matplotlib </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> matplotlib </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>值得收藏的网站</title>
      <link href="//usefullwebsite/"/>
      <url>//usefullwebsite/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><center> Porter Pan </center> <h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文主要是收集比较好用的网站。</p> <blockquote> <p>包括学术，电影，音乐，下载资源，和用的网站</p> </blockquote> <a id="more"></a> <center><br><img src="https://i.loli.net/2018/12/09/5c0cd76364ef9.png" alt="站点连接二维码"><br></center> <p>1、 <a href="http://search.chongbuluo.com/" target="_blank" rel="noopener">虫部落搜索</a></p> <p><a href="https://imgchr.com/i/FG9dPO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/09/FG9dPO.md.png" alt="FG9dPO.md.png"></a></p> <hr> <p>2、 <a href="http://scholar.chongbuluo.com/" target="_blank" rel="noopener">虫部落学术</a></p> <p><img src="https://s1.ax1x.com/2018/12/09/FG9tVx.png" alt="FG9tVx.png"></p> <hr> <p>3、 <a href="http://image.chongbuluo.com/" target="_blank" rel="noopener">虫部落设计搜索</a></p> <p><img src="https://s1.ax1x.com/2018/12/09/FG9QGF.png" alt="FG9QGF.png"></p> <hr> <p>4、 <a href="http://www.latexstudio.net/" target="_blank" rel="noopener">latexstudio排版学习</a></p> <hr> <p>5、 短网链生成</p> <ul> <li><a href="http://dwz.wailian.work/" target="_blank" rel="noopener">wailian</a></li> </ul> <p><img src="https://s1.ax1x.com/2018/12/09/FGPgC8.png" alt="FGPgC8.png"></p> <ul> <li><a href="http://suo.im/" target="_blank" rel="noopener">suo</a></li> </ul> <p><img src="https://s1.ax1x.com/2018/12/09/FGPRgg.png" alt="FGPRgg.png"></p> <hr> <p>6、 <a href="http://tool.hezibuluo.com/?&amp;rand=af1eb07e2eb8d08b029d8e2d2a809a75" target="_blank" rel="noopener">盒子部落便民工具系列</a></p> <p><img src="https://s1.ax1x.com/2018/12/09/FGP5bn.png" alt="FGP5bn.png"></p> <hr> <p>7、 艺术字+ 二维码设计</p> <blockquote> <p><a href="http://www.akuziti.com/yw/" target="_blank" rel="noopener">艺术字设计</a></p> </blockquote> <blockquote> <p><a href="http://www.xmesm.cn/" target="_blank" rel="noopener">个性二维码</a></p> </blockquote> <p>最终效果：</p> <p><img src="https://s1.ax1x.com/2018/12/09/FGFYlD.png" alt="FGFYlD.png"></p> <hr> <p>8、 图床</p> <blockquote> <p><a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a></p> </blockquote> <blockquote> <p><a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS图床</a>，生成后每次i.loli.net后缀的名字，更多可以参见<a href="https://www.jianshu.com/p/718173c339ee" target="_blank" rel="noopener">百度搜索</a>。 </p> </blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 安利 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>STM32串口通信配置（USART1+USART2+USART3+UART4）</title>
      <link href="//stm32chuankou/"/>
      <url>//stm32chuankou/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h1><p>本文是通过分享几个通用的串口函数，实现对STM32芯片的多个串口操作和多种收发数据方式，实现串口通信的功能，本文的各个驱动代码经测试都可以直接使用，本人写的这部分代码开源 (。<em>^_^</em>。)</p> <a id="more"></a> <h2 id="一、串口一的配置"><a href="#一、串口一的配置" class="headerlink" title="一、串口一的配置"></a>一、串口一的配置</h2><ul> <li>（初始化+中断配置+中断接收函数）</li> </ul> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*===============================================================================</span></span><br><span class="line"><span class="comment">Copyright:</span></span><br><span class="line"><span class="comment">Version:</span></span><br><span class="line"><span class="comment">Author: </span></span><br><span class="line"><span class="comment">Date: 2017/11/3</span></span><br><span class="line"><span class="comment">Description:</span></span><br><span class="line"><span class="comment"> 配置独立看门狗初始化函数，在主函数中运行IWDG_ReloadCounter进行喂狗主函数必须在4s内进行一次喂狗不然系统会复位；</span></span><br><span class="line"><span class="comment"> 函数功能是将接收固定长度的字符串，并将接收后的字符串通过串口发送出去</span></span><br><span class="line"><span class="comment">revise Description:</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_usart.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_iwdg.h"</span></span></span><br><span class="line"></span><br><span class="line">u8 USART1_RX_BUF[<span class="number">21</span>]; </span><br><span class="line">u8 USART1_RX_CNT=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IWDG_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Usart1_Init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//GPIO端口设置</span></span><br><span class="line"> GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"> USART_InitTypeDef USART_InitStructure;</span><br><span class="line"> NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line"> </span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOC, ENABLE);<span class="comment">//使能USART1,GPIOA,C时钟</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//USART1_TX GPIOA.9</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//PA.9</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; <span class="comment">//复用推挽输出</span></span><br><span class="line"> GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIOA.9</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//USART1_RX GPIOA.10初始化</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;<span class="comment">//PA10</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;<span class="comment">//浮空输入</span></span><br><span class="line"> GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<span class="comment">//初始化GPIOA.10 </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//Usart1 NVIC 配置</span></span><br><span class="line"> NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级 0-3;</span></span><br><span class="line"> </span><br><span class="line"> NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;</span><br><span class="line"> NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">3</span> ;<span class="comment">//抢占优先级3</span></span><br><span class="line"> NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>; <span class="comment">//子优先级3</span></span><br><span class="line"> NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//IRQ通道使能</span></span><br><span class="line"> NVIC_Init(&amp;NVIC_InitStructure); <span class="comment">//根据指定的参数初始化VIC寄存器</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//USART 初始化设置</span></span><br><span class="line"></span><br><span class="line"> USART_InitStructure.USART_BaudRate = bound;<span class="comment">//串口波特率</span></span><br><span class="line"> USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//字长为8位数据格式</span></span><br><span class="line"> USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//一个停止位</span></span><br><span class="line"> USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">//无奇偶校验位</span></span><br><span class="line"> USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line"> USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; <span class="comment">//收发模式</span></span><br><span class="line"></span><br><span class="line"> USART_Init(USART1, &amp;USART_InitStructure); <span class="comment">//初始化串口1</span></span><br><span class="line"> USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);<span class="comment">//开启串口接受中断</span></span><br><span class="line"> USART_Cmd(USART1, ENABLE); <span class="comment">//使能串口1 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* USART1发送len个字节.</span></span><br><span class="line"><span class="comment">* buf:发送区首地址</span></span><br><span class="line"><span class="comment">* len:发送的字节数(为了和本代码的接收匹配,这里建议不要超过64个字节)</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_Send_Data</span><span class="params">(u8 *buf,u16 len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> u16 t;</span><br><span class="line"> GPIO_SetBits(GPIOC,GPIO_Pin_9);</span><br><span class="line"><span class="comment">// RS485_TX_EN=1; //设置为发送模式</span></span><br><span class="line"> <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++) <span class="comment">//循环发送数据</span></span><br><span class="line"> &#123; </span><br><span class="line"> <span class="keyword">while</span>(USART_GetFlagStatus(USART1,USART_FLAG_TC)==RESET); <span class="comment">//循环发送,直到发送完毕 </span></span><br><span class="line"> USART_SendData(USART1,buf[t]); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">while</span>(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET); </span><br><span class="line"> GPIO_ResetBits(GPIOC,GPIO_Pin_9);</span><br><span class="line"><span class="comment">// RS485_TX_EN=0; //设置为接收模式 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> Usart1_Init(<span class="number">9600</span>);<span class="comment">//串口1波特率设置为9600</span></span><br><span class="line"> IWDG_Configuration();</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> IWDG_ReloadCounter();<span class="comment">//4s内必须喂狗不然复位</span></span><br><span class="line"> <span class="keyword">if</span>(USART1_RX_CNT==<span class="number">21</span>)<span class="comment">//数据接收完成</span></span><br><span class="line"> &#123;</span><br><span class="line"> USART1_RX_CNT=<span class="number">0</span>;<span class="comment">//指针复位</span></span><br><span class="line"> <span class="comment">//将接收到的数据发送出去</span></span><br><span class="line"> USART1_Send_Data(USART1_RX_BUF,<span class="number">21</span>);<span class="comment">//通过串口1将接收到的固定长度字符发送出去 </span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 接收指定长度的字符串</span></span><br><span class="line"><span class="comment">* 比如接收固定大小为21个字节的字符串</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART1_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//串口1中断服务程序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> u8 Res;</span><br><span class="line"> <span class="keyword">if</span>(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) </span><br><span class="line"> &#123;</span><br><span class="line"> Res =USART_ReceiveData(USART1); <span class="comment">//读取接收到的数据 </span></span><br><span class="line"> <span class="keyword">if</span>(USART1_RX_CNT&lt;<span class="number">21</span>)<span class="comment">//对于接收指定长度的字符串</span></span><br><span class="line"> &#123;</span><br><span class="line"> USART1_RX_BUF[USART1_RX_CNT]=Res; <span class="comment">//记录接收到的值 </span></span><br><span class="line"> USART1_RX_CNT++; <span class="comment">//接收数据增加1 </span></span><br><span class="line"> &#125; </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//溢出-如果发生溢出需要先读SR,再读DR寄存器则可清除不断入中断的问题</span></span><br><span class="line"> <span class="keyword">if</span>(USART_GetFlagStatus(USART1,USART_FLAG_ORE) == SET)</span><br><span class="line"> &#123;</span><br><span class="line"> USART_ReceiveData(USART1);</span><br><span class="line"> USART_ClearFlag(USART1,USART_FLAG_ORE);</span><br><span class="line"> &#125;</span><br><span class="line"> USART_ClearFlag(UART1,USART_IT_RXNE); <span class="comment">//一定要清除接收中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*===============================================================================</span></span><br><span class="line"><span class="comment">Copyright:</span></span><br><span class="line"><span class="comment">Version:</span></span><br><span class="line"><span class="comment">Author: </span></span><br><span class="line"><span class="comment">Date: 2017/11/3</span></span><br><span class="line"><span class="comment">Description:配置独立看门狗初始化函数，在主函数中运行IWDG_ReloadCounter进行喂狗</span></span><br><span class="line"><span class="comment"> 主函数必须在4s内进行一次喂狗不然系统会复位</span></span><br><span class="line"><span class="comment">revise Description:</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IWDG_Configuration</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">/* 写入0x5555,用于允许狗狗寄存器写入功能 */</span></span><br><span class="line"> IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable); </span><br><span class="line"> <span class="comment">/* 狗狗时钟分频,40K/256=156HZ(6.4ms)*/</span> </span><br><span class="line"> IWDG_SetPrescaler(IWDG_Prescaler_256); <span class="comment">/* 喂狗时间 5s/6.4MS=781 .注意不能大于0xfff*/</span> </span><br><span class="line"> IWDG_SetReload(<span class="number">781</span>);<span class="comment">//781（5s时间）</span></span><br><span class="line"> IWDG_SetReload(<span class="number">3125</span>);<span class="comment">//781（20s时间）</span></span><br><span class="line"> IWDG_Enable();<span class="comment">//启用定时器</span></span><br><span class="line"> IWDG_ReloadCounter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <h2 id="二、串口二的配置"><a href="#二、串口二的配置" class="headerlink" title="二、串口二的配置"></a>二、串口二的配置</h2><ul> <li>（初始化+中断配置+中断接收函数）</li> </ul> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*===============================================================================</span></span><br><span class="line"><span class="comment">Copyright:</span></span><br><span class="line"><span class="comment">Version:</span></span><br><span class="line"><span class="comment">Author: </span></span><br><span class="line"><span class="comment">Date: 2017/11/3</span></span><br><span class="line"><span class="comment">Description:</span></span><br><span class="line"><span class="comment"> 函数功能是将接收固定长度的字符串，并将接收后的字符串通过串口发送出去</span></span><br><span class="line"><span class="comment">revise Description:</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_usart.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_iwdg.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u8 USART2_RX_BUF[<span class="number">250</span>]; </span><br><span class="line">u8 USART2_RX_CNT=<span class="number">0</span>;</span><br><span class="line">u16 USART2_RX_STA=<span class="number">0</span>; <span class="comment">//接收状态标记 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Usart2_Init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"> USART_InitTypeDef USART_InitStructure;</span><br><span class="line"> NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line"> <span class="comment">//|RCC_APB2Periph_AFIO</span></span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<span class="comment">//使能GPIOA时钟</span></span><br><span class="line"> RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);<span class="comment">//使能USART2时钟</span></span><br><span class="line"></span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; <span class="comment">//PA2</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; <span class="comment">//复用推挽</span></span><br><span class="line"> GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;<span class="comment">//PA3</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; <span class="comment">//浮空输入</span></span><br><span class="line"> GPIO_Init(GPIOA, &amp;GPIO_InitStructure); </span><br><span class="line"></span><br><span class="line"> RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2,ENABLE);<span class="comment">//复位串口2</span></span><br><span class="line"> RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2,DISABLE);<span class="comment">//停止复位</span></span><br><span class="line"></span><br><span class="line"> NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); <span class="comment">//设置NVIC中断分组2:2位抢占优先级，2位响应优先级 0-3;</span></span><br><span class="line"> NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn; <span class="comment">//使能串口2中断</span></span><br><span class="line"> NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">3</span>; <span class="comment">//先占优先级2级</span></span><br><span class="line"> NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">3</span>; <span class="comment">//从优先级2级</span></span><br><span class="line"> NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; <span class="comment">//使能外部中断通道</span></span><br><span class="line"> NVIC_Init(&amp;NVIC_InitStructure); <span class="comment">//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器</span></span><br><span class="line"></span><br><span class="line"> USART_InitStructure.USART_BaudRate = bound;<span class="comment">//波特率设置</span></span><br><span class="line"> USART_InitStructure.USART_WordLength = USART_WordLength_8b;<span class="comment">//8位数据长度</span></span><br><span class="line"> USART_InitStructure.USART_StopBits = USART_StopBits_1;<span class="comment">//一个停止位</span></span><br><span class="line"> USART_InitStructure.USART_Parity = USART_Parity_No;<span class="comment">///奇偶校验位</span></span><br><span class="line"> USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;<span class="comment">//无硬件数据流控制</span></span><br><span class="line"> USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<span class="comment">//收发模式</span></span><br><span class="line"></span><br><span class="line"> USART_Init(USART2, &amp;USART_InitStructure); ; <span class="comment">//初始化串口</span></span><br><span class="line"> USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);<span class="comment">//开启中断</span></span><br><span class="line"> USART_Cmd(USART2, ENABLE); <span class="comment">//使能串口 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* USART2发送len个字节.</span></span><br><span class="line"><span class="comment">* buf:发送区首地址</span></span><br><span class="line"><span class="comment">* len:发送的字节数(为了和本代码的接收匹配,这里建议不要超过64个字节)</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART2_Send_Data</span><span class="params">(u8 *buf,u16 len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> u16 t;</span><br><span class="line"> <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++) <span class="comment">//循环发送数据</span></span><br><span class="line"> &#123; </span><br><span class="line"> <span class="keyword">while</span>(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); </span><br><span class="line"> USART_SendData(USART2,buf[t]);</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">while</span>(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 这也是一个接收函数，可以用，也可以用下面main函数的方法调用</span></span><br><span class="line"><span class="comment">* USART2查询接收到的数据</span></span><br><span class="line"><span class="comment">* buf:接收缓存首地址</span></span><br><span class="line"><span class="comment">* len:读到的数据长度</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART2_Receive_Data</span><span class="params">(u8 *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> u8 rxlen=USART2_RX_CNT;</span><br><span class="line"> u8 i=<span class="number">0</span>;</span><br><span class="line"> delay_ms(<span class="number">10</span>); <span class="comment">//等待10ms,连续超过10ms没有接收到一个数据,则认为接收结束</span></span><br><span class="line"> <span class="keyword">while</span>(rxlen!=USART2_RX_CNT)</span><br><span class="line"> &#123;</span><br><span class="line"> rxlen=USART2_RX_CNT;</span><br><span class="line"> delay_ms(<span class="number">10</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(USART2_RX_CNT);i++)</span><br><span class="line"> &#123;</span><br><span class="line"> buf[i] = USART2_RX_BUF[i]; </span><br><span class="line"> USART2_RX_BUF[i] = <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> USART2_RX_CNT=<span class="number">0</span>; <span class="comment">//清零</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> Usart2_Init(<span class="number">9600</span>);<span class="comment">//串口1波特率设置为9600</span></span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(USART2_RX_STA)<span class="comment">//数据接收完成</span></span><br><span class="line"> &#123;</span><br><span class="line"> USART2_RX_STA=<span class="number">0</span>; </span><br><span class="line"> <span class="comment">//将接收到的数据发送出去</span></span><br><span class="line"> USART2_Send_Data(USART2_RX_BUF,USART2_RX_CNT);<span class="comment">//通过串口1将接收到的固定长度字符发送出去 </span></span><br><span class="line"> USART2_RX_CNT=<span class="number">0</span>;<span class="comment">//指针复位</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART2_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> u8 res; </span><br><span class="line"> <span class="keyword">if</span>(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) <span class="comment">//接收到数据</span></span><br><span class="line"> &#123; </span><br><span class="line"> res =USART_ReceiveData(USART2); <span class="comment">//读取接收到的数据 </span></span><br><span class="line"> <span class="keyword">if</span>(USART2_RX_STA==<span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> USART2_RX_BUF[USART2_RX_CNT] = res; <span class="comment">//记录接收到的值 </span></span><br><span class="line"> <span class="comment">//当数据结尾收到0xA0和0xA1代表数据接收完成，是一串完整的数据</span></span><br><span class="line"> <span class="keyword">if</span>(USART2_RX_BUF[USART2_RX_CNT<span class="number">-1</span>]==<span class="number">0xA0</span>&amp;&amp;USART2_RX_BUF[USART2_RX_CNT]==<span class="number">0xA1</span>)</span><br><span class="line"> USART2_RX_STA=<span class="number">1</span>;<span class="comment">//表示接收数据结束</span></span><br><span class="line"> USART2_RX_CNT++; <span class="comment">//接收数据增加1 </span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="comment">//溢出-如果发生溢出需要先读SR,再读DR寄存器则可清除不断入中断的问题</span></span><br><span class="line"> <span class="keyword">if</span>(USART_GetFlagStatus(USART2,USART_FLAG_ORE) == SET)</span><br><span class="line"> &#123;</span><br><span class="line"> USART_ReceiveData(USART2);</span><br><span class="line"> USART_ClearFlag(USART2,USART_FLAG_ORE);</span><br><span class="line"> &#125;</span><br><span class="line"> USART_ClearFlag(UART2,USART_IT_RXNE); <span class="comment">//一定要清除接收中断 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <h2 id="三、串口三的配置"><a href="#三、串口三的配置" class="headerlink" title="三、串口三的配置"></a>三、串口三的配置</h2><ul> <li>（初始化+中断配置+中断接收函数）</li> </ul> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*===============================================================================</span></span><br><span class="line"><span class="comment">Copyright:</span></span><br><span class="line"><span class="comment">Version:</span></span><br><span class="line"><span class="comment">Author: </span></span><br><span class="line"><span class="comment">Date: 2017/11/3</span></span><br><span class="line"><span class="comment">Description:</span></span><br><span class="line"><span class="comment"> 函数功能是将接收固定长度的字符串，并将接收后的字符串通过串口发送出去</span></span><br><span class="line"><span class="comment"> 通过滴答定时器方式获取数据</span></span><br><span class="line"><span class="comment">revise Description:</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_usart.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USART3_TIMEOUT_Setting 800 <span class="comment">//(ms)</span></span></span><br><span class="line"></span><br><span class="line">u8 USART3_RX_BUF[<span class="number">250</span>]; </span><br><span class="line">u16 USART3_RX_CNT=<span class="number">0</span>;</span><br><span class="line">u16 USART3_RX_TIMEOUT=<span class="number">0</span>; <span class="comment">//接收状态标记 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Timer1CountInitial</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART3_Init</span><span class="params">(u32 baud)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> USART_InitTypeDef USART_InitStructure; </span><br><span class="line"> NVIC_InitTypeDef NVIC_InitStructure; </span><br><span class="line"> GPIO_InitTypeDef GPIO_InitStructure; <span class="comment">//声明一个结构体变量，用来初始化GPIO </span></span><br><span class="line"> <span class="comment">//使能串口的RCC时钟 </span></span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB , ENABLE); <span class="comment">//使能UART3所在GPIOB的时钟 </span></span><br><span class="line"> RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE); </span><br><span class="line"></span><br><span class="line"> <span class="comment">//串口使用的GPIO口配置 </span></span><br><span class="line"> <span class="comment">// Configure USART3 Rx (PB.11) as input floating </span></span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11; </span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; </span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure); </span><br><span class="line"></span><br><span class="line"> <span class="comment">// Configure USART3 Tx (PB.10) as alternate function push-pull </span></span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; </span><br><span class="line"> GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; </span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; </span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure); </span><br><span class="line"></span><br><span class="line"> <span class="comment">//配置串口 </span></span><br><span class="line"> USART_InitStructure.USART_BaudRate = baud; </span><br><span class="line"> USART_InitStructure.USART_WordLength = USART_WordLength_8b; </span><br><span class="line"> USART_InitStructure.USART_StopBits = USART_StopBits_1; </span><br><span class="line"> USART_InitStructure.USART_Parity = USART_Parity_No; </span><br><span class="line"> USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; </span><br><span class="line"> USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// Configure USART3 </span></span><br><span class="line"> USART_Init(USART3, &amp;USART_InitStructure);<span class="comment">//配置串口3 </span></span><br><span class="line"> <span class="comment">// Enable USART3 Receive interrupts 使能串口接收中断 </span></span><br><span class="line"> USART_ITConfig(USART3, USART_IT_RXNE, ENABLE); </span><br><span class="line"> <span class="comment">// Enable the USART3 </span></span><br><span class="line"> USART_Cmd(USART3, ENABLE);<span class="comment">//使能串口3 </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//串口中断配置 </span></span><br><span class="line"> <span class="comment">//Configure the NVIC Preemption Priority Bits </span></span><br><span class="line"> NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); </span><br><span class="line"></span><br><span class="line"> <span class="comment">// Enable the USART3 Interrupt </span></span><br><span class="line"> NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn; </span><br><span class="line"> NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">3</span> ;<span class="comment">//抢占优先级3</span></span><br><span class="line"> NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">2</span>; <span class="comment">//子优先级3</span></span><br><span class="line"> NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; </span><br><span class="line"> NVIC_Init(&amp;NVIC_InitStructure); </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART3_Sned_Char</span><span class="params">(u8 temp)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> USART_SendData(USART3,(u8)temp); </span><br><span class="line"> <span class="keyword">while</span>(USART_GetFlagStatus(USART3,USART_FLAG_TXE)==RESET); </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART3_Sned_Char_Buff</span><span class="params">(u8 buf[],u32 len)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> u32 i; </span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++) </span><br><span class="line"> USART3_Sned_Char(buf[i]); </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> Timer1CountInitial();</span><br><span class="line"> Usart3_Init(<span class="number">9600</span>);<span class="comment">//串口1波特率设置为9600</span></span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(USART3_RX_TIMEOUT==USART3_TIMEOUT_Setting)</span><br><span class="line"> &#123; </span><br><span class="line"> USART3_RX_TIMEOUT=<span class="number">0</span>;</span><br><span class="line"> USART3_Sned_Char_Buff(USART3_RX_BUF,USART3_RX_CNT);<span class="comment">//将接收到的数据发送出去</span></span><br><span class="line"> USART3_RX_CNT=<span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART3_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//串口3中断服务程序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> u8 Res;</span><br><span class="line"> <span class="keyword">if</span>(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET) </span><br><span class="line"> &#123; </span><br><span class="line"> USART3_RX_TIMEOUT=<span class="number">0</span>;</span><br><span class="line"> USART3_RX_BUF[USART3_RX_CNT++] = USART_ReceiveData(USART3); <span class="comment">//读取接收到的数据 </span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//溢出-如果发生溢出需要先读SR,再读DR寄存器则可清除不断入中断的问题</span></span><br><span class="line"> <span class="keyword">if</span>(USART_GetFlagStatus(USART3,USART_FLAG_ORE) == SET)</span><br><span class="line"> &#123;</span><br><span class="line"> USART_ReceiveData(USART3);</span><br><span class="line"> USART_ClearFlag(USART3,USART_FLAG_ORE);</span><br><span class="line"> &#125;</span><br><span class="line"> USART_ClearITPendingBit(USART3, USART_IT_RXNE);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//放到主函数的初始化中初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Timer1CountInitial</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//定时=36000/72000x2=0.001s=1ms;</span></span><br><span class="line"> TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;</span><br><span class="line"> <span class="comment">///////////////////////////////////////////////////////////////</span></span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);</span><br><span class="line"> </span><br><span class="line"> TIM_TimeBaseStructure.TIM_Period = <span class="number">100</span><span class="number">-1</span>;<span class="comment">//自动重装值（此时改为10ms）</span></span><br><span class="line"> TIM_TimeBaseStructure.TIM_Prescaler = <span class="number">7200</span><span class="number">-1</span>;<span class="comment">//时钟预分频</span></span><br><span class="line"> TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;<span class="comment">//向上计数</span></span><br><span class="line"> TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; <span class="comment">//时钟分频1</span></span><br><span class="line"> TIM_TimeBaseStructure.TIM_RepetitionCounter = <span class="number">0</span>; </span><br><span class="line"> TIM_TimeBaseInit(TIM1,&amp;TIM_TimeBaseStructure);</span><br><span class="line"> </span><br><span class="line"> TIM_ClearFlag(TIM1,TIM_FLAG_Update);</span><br><span class="line"> TIM_ITConfig(TIM1,TIM_IT_Update,ENABLE); </span><br><span class="line"> TIM_Cmd(TIM1, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TIM1_UP_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> <span class="comment">//TIM_TimeBaseStructure.TIM_Period = 100-1;//自动重装值（此时改为10ms）</span></span><br><span class="line"> <span class="keyword">if</span> (TIM_GetITStatus(TIM1, TIM_IT_Update) != RESET)</span><br><span class="line"> &#123; </span><br><span class="line"> <span class="keyword">if</span>(USART3_RX_TIMEOUT&lt;USART3_TIMEOUT_Setting)</span><br><span class="line"> USART3_RX_TIMEOUT++; </span><br><span class="line"> &#125;</span><br><span class="line"> TIM_ClearITPendingBit(TIM1,TIM_IT_Update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <h2 id="四、串口四的配置"><a href="#四、串口四的配置" class="headerlink" title="四、串口四的配置"></a>四、串口四的配置</h2><ul> <li>（初始化+中断配置+中断接收函数）</li> </ul> <blockquote> <p> 注意串口四的中断优先级没有贴出来，和前面的三个一样的配置，为了不占用过多的篇幅就不贴中断优先级配置了</p> </blockquote> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*===============================================================================</span></span><br><span class="line"><span class="comment">Copyright:</span></span><br><span class="line"><span class="comment">Version:</span></span><br><span class="line"><span class="comment">Author: </span></span><br><span class="line"><span class="comment">Date: 2017/11/3</span></span><br><span class="line"><span class="comment">Description:</span></span><br><span class="line"><span class="comment"> 函数功能是将接收固定长度的字符串，并将接收后的字符串通过串口发送出去</span></span><br><span class="line"><span class="comment"> 通过滴答定时器方式获取数据</span></span><br><span class="line"><span class="comment">revise Description:</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x_usart.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USART4_TIMEOUT_Setting 800 <span class="comment">//(ms)</span></span></span><br><span class="line"></span><br><span class="line">u8 USART4_RX_BUF[<span class="number">250</span>]; </span><br><span class="line">u16 USART4_RX_CNT=<span class="number">0</span>;</span><br><span class="line">u16 USART2_RX_STA=<span class="number">0</span>; <span class="comment">//接收状态标记</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Systick_delay_init</span><span class="params">(u8 SYSCLK)</span></span>;</span><br><span class="line"><span class="function">u8 <span class="title">virtual_delay</span><span class="params">(u32 num,u8 unit)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用异步收发器UART4</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART4_Init</span><span class="params">(u32 bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> USART_InitTypeDef USART_InitStructure;</span><br><span class="line"> GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//used for USART3 full remap</span></span><br><span class="line"> <span class="comment">//GPIO_PinRemapConfig(GPIO_FullRemap_USART3, ENABLE);</span></span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);</span><br><span class="line"> RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);<span class="comment">//for UART4</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//Configure RS485_TX_EN PIN</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = RS485_TX_EN_PIN; <span class="comment">//PC9端口配置</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; <span class="comment">//推挽输出</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"> GPIO_Init(RS485_TX_EN_PORT, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"> RS485_TX_EN=<span class="number">0</span>; <span class="comment">//设置485默认为接收模式</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Configure USART Tx as alternate function push-pull */</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;</span><br><span class="line"> GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line"> GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Configure USART Rx as input floating */</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;</span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</span><br><span class="line"> GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> USART_InitStructure.USART_BaudRate = bound;</span><br><span class="line"> USART_InitStructure.USART_WordLength = USART_WordLength_8b;</span><br><span class="line"> USART_InitStructure.USART_StopBits = USART_StopBits_1;</span><br><span class="line"> USART_InitStructure.USART_Parity = USART_Parity_No ;</span><br><span class="line"> USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;</span><br><span class="line"> USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;</span><br><span class="line"></span><br><span class="line"> USART_Init(UART4, &amp;USART_InitStructure);</span><br><span class="line"> <span class="comment">//USART_Init(USART3, &amp;USART_InitStructure);</span></span><br><span class="line"> <span class="comment">/* Enable the USART */</span></span><br><span class="line"> USART_Cmd(UART4, ENABLE);</span><br><span class="line"> USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);<span class="comment">//开启串口接受中断</span></span><br><span class="line"> USART_ClearFlag(UART4,USART_FLAG_TC); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//USART1查询接收到的数据</span></span><br><span class="line"><span class="comment">//buf:接收缓存首地址</span></span><br><span class="line"><span class="comment">//len:读到的数据长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART4_Receive_Data</span><span class="params">(u8 *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> u8 rxlen=<span class="number">21</span>;</span><br><span class="line"> u8 i=<span class="number">0</span>;</span><br><span class="line"> delay_ms(<span class="number">10</span>); <span class="comment">//等待10ms,连续超过10ms没有接收到一个数据,则认为接收结束</span></span><br><span class="line"> </span><br><span class="line"> RS485_RX_FLAG = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">if</span>((UART4_RX_BUF[<span class="number">0</span>]==<span class="number">0x01</span>)&amp;&amp;(UART4_RX_BUF[<span class="number">1</span>]==<span class="number">0x03</span>))</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;rxlen;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> buf[i]=UART4_RX_BUF[i]; </span><br><span class="line"> UART4_RX_BUF[i] = <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br><span class="line"> RS485_RX_FLAG = <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> UART4_RX_CNT=<span class="number">0</span>; <span class="comment">//清零</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//USART1发送len个字节.</span></span><br><span class="line"><span class="comment">//buf:发送区首地址</span></span><br><span class="line"><span class="comment">//len:发送的字节数(为了和本代码的接收匹配,这里建议不要超过64个字节)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART4_Send_Data</span><span class="params">(u8 *buf,u16 len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> u16 t;</span><br><span class="line"> RS485_TX_EN=<span class="number">1</span>; <span class="comment">//设置为发送模式</span></span><br><span class="line"> <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++) <span class="comment">//循环发送数据</span></span><br><span class="line"> &#123; </span><br><span class="line"> <span class="keyword">while</span>(USART_GetFlagStatus(UART4,USART_FLAG_TC)==RESET); <span class="comment">//循环发送,直到发送完毕 </span></span><br><span class="line"> USART_SendData(UART4,buf[t]); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">while</span>(USART_GetFlagStatus(UART4, USART_FLAG_TC) == RESET); </span><br><span class="line"> RS485_TX_EN=<span class="number">0</span>; <span class="comment">//设置为接收模式 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> Systick_delay_init(<span class="number">72</span>);</span><br><span class="line"> Usart4_Init(<span class="number">9600</span>);<span class="comment">//串口1波特率设置为9600</span></span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(USART2_RX_STA)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(virtual_delay(USART4_TIMEOUT_Setting,MS))<span class="comment">//超过800ms空闲则可以读取数据</span></span><br><span class="line"> &#123;</span><br><span class="line"> UART4_Send_Data(UART4_RX_BUF,UART4_RX_CNT);</span><br><span class="line"> USART2_RX_STA=<span class="number">0</span>;</span><br><span class="line"> UART4_RX_CNT=<span class="number">0</span>; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UART4_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//UART4 Receive Interrupt </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> u8 Res;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span>(USART_GetITStatus(UART4, USART_IT_RXNE) != RESET) <span class="comment">//接收中断(接收到的数据必须是0x0d 0x0a结尾)</span></span><br><span class="line"> &#123; </span><br><span class="line"> Res =USART_ReceiveData(UART4);<span class="comment">//(USART1-&gt;DR); //读取接收到的数据 </span></span><br><span class="line"> UART4_RX_BUF[UART4_RX_CNT&amp;<span class="number">0XFF</span>]=Res; <span class="comment">//回传的数据存入数组,0X3F限制为64个数值</span></span><br><span class="line"> UART4_RX_CNT++;</span><br><span class="line"> USART2_RX_STA=<span class="number">1</span>; </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span>( USART_GetITStatus(UART4, USART_IT_TC) == SET )</span><br><span class="line"> &#123;</span><br><span class="line"> USART_ClearFlag(UART4, USART_FLAG_TC);</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="comment">//溢出-如果发生溢出需要先读SR,再读DR寄存器则可清除不断入中断的问题</span></span><br><span class="line"> <span class="keyword">if</span>(USART_GetFlagStatus(UART4,USART_FLAG_ORE) == SET)</span><br><span class="line"> &#123;</span><br><span class="line"> USART_ReceiveData(UART4);</span><br><span class="line"> USART_ClearFlag(UART4,USART_FLAG_ORE);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// USART_ITConfig(UART4, USART_IT_RXNE, DISABLE);//临时关闭接收中断</span></span><br><span class="line"> USART_ClearFlag(UART4,USART_IT_RXNE); <span class="comment">//一定要清除接收中断</span></span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化延迟函数</span></span><br><span class="line"><span class="comment">//SYSTICK的时钟固定为HCLK时钟的1/8</span></span><br><span class="line"><span class="comment">//SYSCLK:系统时钟</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Systick_delay_init</span><span class="params">(u8 SYSCLK)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> SysTick-&gt;CTRL&amp;=<span class="number">0xfffffffb</span>;<span class="comment">//bit2清空,选择外部时钟 HCLK/8</span></span><br><span class="line"><span class="comment">// SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); //选择外部时钟 HCLK/8</span></span><br><span class="line"> fac_us=SYSCLK/<span class="number">8</span>; </span><br><span class="line"> fac_ms=(u16)fac_us*<span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*===============================================================================</span></span><br><span class="line"><span class="comment">Author:peter pan</span></span><br><span class="line"><span class="comment">Date: </span></span><br><span class="line"><span class="comment">Description: 查询式分时或叫做轮询式（近似延时）。本函数是用于执行高效率场合的查询延时，但是一个for or while 循环中只能用一次。</span></span><br><span class="line"><span class="comment">revise Description: </span></span><br><span class="line"><span class="comment">@ num : //分时查询的周期计数值 </span></span><br><span class="line"><span class="comment">@ unit : //分时查询的周期单位 </span></span><br><span class="line"><span class="comment"> @@ParaValue ： </span></span><br><span class="line"><span class="comment"> MS //周期单位为MS毫秒级</span></span><br><span class="line"><span class="comment"> US //周期单位为US微秒级</span></span><br><span class="line"><span class="comment">@ virtual_delay_status : //静态变量</span></span><br><span class="line"><span class="comment"> @@ParaValue ： </span></span><br><span class="line"><span class="comment"> SET //SYSTICK正在占用中，请勿用</span></span><br><span class="line"><span class="comment"> RESET //SYSTICK空闲，可以使用</span></span><br><span class="line"><span class="comment">@ReValue :</span></span><br><span class="line"><span class="comment"> with zero mean Time non-arrive ,one representative Time arrived ,you can do task;</span></span><br><span class="line"><span class="comment">##example if(virtual_delay(1000,MS)) LedFlash(); //1000ms LED闪烁一下</span></span><br><span class="line"><span class="comment">===============================================================================*/</span></span><br><span class="line"><span class="function">u8 <span class="title">virtual_delay</span><span class="params">(u32 num,u8 unit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> u32 temp; </span><br><span class="line"> <span class="keyword">if</span>(virtual_delay_status==RESET) <span class="comment">// SYSTICK空闲，可以使用</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(unit==MS)</span><br><span class="line"> &#123;</span><br><span class="line"> SysTick-&gt;LOAD=(u32)num*Delay_SYSCLK*<span class="number">125</span>;<span class="comment">//时间加载(SysTick-&gt;LOAD为24bit)</span></span><br><span class="line"> SysTick-&gt;VAL =<span class="number">0x00</span>; <span class="comment">//清空计数器</span></span><br><span class="line"> SysTick-&gt;CTRL=<span class="number">0x01</span> ; <span class="comment">//开始倒数 </span></span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(unit==US) </span><br><span class="line"> &#123;</span><br><span class="line"> SysTick-&gt;LOAD=num*Delay_SYSCLK/<span class="number">8</span>; <span class="comment">//时间加载 </span></span><br><span class="line"> SysTick-&gt;VAL=<span class="number">0x00</span>; <span class="comment">//清空计数器</span></span><br><span class="line"> SysTick-&gt;CTRL=<span class="number">0x01</span> ; <span class="comment">//开始倒数 </span></span><br><span class="line"> &#125;</span><br><span class="line"> virtual_delay_status=SET;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line"> &#123; <span class="comment">//virtual_delay_status==SET SYSTICK被占用</span></span><br><span class="line"> </span><br><span class="line"> temp=SysTick-&gt;CTRL;</span><br><span class="line"> <span class="keyword">if</span>(!(temp&amp;<span class="number">0x01</span>&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>))))<span class="comment">//等待时间到达 </span></span><br><span class="line"> &#123;</span><br><span class="line"> SysTick-&gt;CTRL=<span class="number">0x00</span>; <span class="comment">//关闭计数器</span></span><br><span class="line"> SysTick-&gt;VAL =<span class="number">0X00</span>; <span class="comment">//清空计数器 </span></span><br><span class="line"> virtual_delay_status=RESET; </span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>附上<a href="本文地址：https://www.cnblogs.com/pertor/p/9488446.html">本人这篇博客地址</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>STM32复位及通过函数判断是何种条件出发的复位</title>
      <link href="//stm32fuwei/"/>
      <url>//stm32fuwei/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>STM32F10xxx支持三种复位形式，分别为系统复位、上电复位和备份区域复位。本文将通过实际的代码来解释各种情况下，软、硬件导致芯片复位的判别和怎样采取措施。</p> <a id="more"></a> <h2 id="一、系统复位"><a href="#一、系统复位" class="headerlink" title="一、系统复位"></a>一、系统复位</h2><h4 id="系统复位将复位所有寄存器至它们的复位状态。-当发生以下任一事件时，产生一个系统复位："><a href="#系统复位将复位所有寄存器至它们的复位状态。-当发生以下任一事件时，产生一个系统复位：" class="headerlink" title="系统复位将复位所有寄存器至它们的复位状态。 当发生以下任一事件时，产生一个系统复位："></a>系统复位将复位所有寄存器至它们的复位状态。 当发生以下任一事件时，产生一个系统复位：</h4><ul> <li><ol> <li>NRST引脚上的低电平(外部复位) 2. 窗口看门狗计数终止(WWDG复位)</li> </ol> </li> <li><ol start="3"> <li>独立看门狗计数终止(IWDG复位)</li> </ol> </li> <li><ol start="4"> <li>软件复位(SW复位)</li> </ol> </li> <li><ol start="5"> <li>低功耗管理复位 可通过查看RCC_CSR控制状态寄存器中的复位状态标志位识别复位事件来源。<br>软件复位通过将Cortex™-M3中断应用和复位控制寄存器中的SYSRESETREQ位置’1’，可实现软件复位。请参考Cortex™-M3技术参考手册获得进一步信息。</li> </ol> </li> </ul> <h3 id="1-1-低功耗管理复位在以下两种情况下可产生低功耗管理复位："><a href="#1-1-低功耗管理复位在以下两种情况下可产生低功耗管理复位：" class="headerlink" title="1.1 低功耗管理复位在以下两种情况下可产生低功耗管理复位："></a>1.1 低功耗管理复位在以下两种情况下可产生低功耗管理复位：</h3><ul> <li><ol> <li>在进入待机模式时产生低功耗管理复位： 通过将用户选择字节中的nRST_STDBY位置’1’将使能该复位。这时，即使执行了进入待机模式的过程，系统将被复位而不是进入待机模式。</li> </ol> </li> <li><ol start="2"> <li>在进入停止模式时产生低功耗管理复位： 通过将用户选择字节中的nRST_STOP位置’1’将使能该复位。这时，即使执行了进入停机模式的过程，系统将被复位而不是进入停机模式。<br>关于用户选择字节的进一步信息，请参考STM32F10xxx闪存编程手册。</li> </ol> </li> </ul> <h2 id="电源复位"><a href="#电源复位" class="headerlink" title="电源复位"></a>电源复位</h2><h4 id="电源复位当以下事件中之一发生时，产生电源复位："><a href="#电源复位当以下事件中之一发生时，产生电源复位：" class="headerlink" title="电源复位当以下事件中之一发生时，产生电源复位："></a>电源复位当以下事件中之一发生时，产生电源复位：</h4><ul> <li><ol> <li>上电/掉电复位(POR/PDR复位)</li> </ol> </li> <li><ol start="2"> <li>从待机模式中返回 图4) 电源复位将复位除了备份区域外的所有寄存器。<br>(见图中复位源将最终作用于RESET引脚，并在复位过程中保持低电平。复位入口矢量被固定在地址0x0000_0004。</li> </ol> </li> </ul> <p>芯片内部的复位信号会在NRST引脚上输出，脉冲发生器保证每一个(外部或内部)复位源都能有至少20μs的脉冲延时；当NRST引脚被拉低产生外部复位时，它将产生复位脉冲。</p> <p><img src="https://s1.ax1x.com/2018/11/11/iqofJS.png" alt="iqofJS.png"></p> <h2 id="三、备份域复位"><a href="#三、备份域复位" class="headerlink" title="三、备份域复位"></a>三、备份域复位</h2><blockquote> <p>备份区域拥有两个专门的复位，它们只影响备份区域(见图4)。 当以下事件中之一发生时，产生备份区域复位。</p> </blockquote> <ul> <li><ol> <li>软件复位，备份区域复位可由设置备份域控制寄存器 (RCC_BDCR)(见6.3.9节)中的BDRST位产生。</li> </ol> </li> <li><ol start="2"> <li>在VDD和VBAT两者掉电的前提下，VDD或VBAT上电将引发备份区域复位。</li> </ol> </li> </ul> <h2 id="四、复位的标志位"><a href="#四、复位的标志位" class="headerlink" title="四、复位的标志位"></a>四、复位的标志位</h2><p><a href="https://imgchr.com/i/iqohRg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/11/iqohRg.md.png" alt="iqohRg.md.png"></a></p> <h2 id="五、复位标志位检索-判断什么原因导致的复位"><a href="#五、复位标志位检索-判断什么原因导致的复位" class="headerlink" title="五、复位标志位检索/判断什么原因导致的复位"></a>五、复位标志位检索/判断什么原因导致的复位</h2><p>标志位判断的代码由官方库中给定代码如下：</p> <blockquote> <p>FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)；//FlagStatus 分为SET和RESET两种；</p> </blockquote> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Checks whether the specified RCC flag is set or not.</span></span><br><span class="line"><span class="comment"> * @param RCC_FLAG: specifies the flag to check.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * For @b STM32_Connectivity_line_devices, this parameter can be one of the</span></span><br><span class="line"><span class="comment"> * following values:</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_HSERDY: HSE oscillator clock ready</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_PLLRDY: PLL clock ready</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_PLL2RDY: PLL2 clock ready </span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_PLL3RDY: PLL3 clock ready </span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_LSERDY: LSE oscillator clock ready</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_PINRST: Pin reset</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_PORRST: POR/PDR reset</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_SFTRST: Software reset</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_IWDGRST: Independent Watchdog reset</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_WWDGRST: Window Watchdog reset</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_LPWRRST: Low Power reset</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * For @b other_STM32_devices, this parameter can be one of the following values: </span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_HSERDY: HSE oscillator clock ready</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_PLLRDY: PLL clock ready</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_LSERDY: LSE oscillator clock ready</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_PINRST: Pin reset</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_PORRST: POR/PDR reset</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_SFTRST: Software reset</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_IWDGRST: Independent Watchdog reset</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_WWDGRST: Window Watchdog reset</span></span><br><span class="line"><span class="comment"> * @arg RCC_FLAG_LPWRRST: Low Power reset</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @retval The new state of RCC_FLAG (SET or RESET).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">FlagStatus <span class="title">RCC_GetFlagStatus</span><span class="params">(<span class="keyword">uint8_t</span> RCC_FLAG)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">uint32_t</span> tmp = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">uint32_t</span> statusreg = <span class="number">0</span>;</span><br><span class="line"> FlagStatus bitstatus = RESET;</span><br><span class="line"> <span class="comment">/* Check the parameters */</span></span><br><span class="line"> assert_param(IS_RCC_FLAG(RCC_FLAG));</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Get the RCC register index */</span></span><br><span class="line"> tmp = RCC_FLAG &gt;&gt; <span class="number">5</span>;</span><br><span class="line"> <span class="keyword">if</span> (tmp == <span class="number">1</span>) <span class="comment">/* The flag to check is in CR register */</span></span><br><span class="line"> &#123;</span><br><span class="line"> statusreg = RCC-&gt;CR;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (tmp == <span class="number">2</span>) <span class="comment">/* The flag to check is in BDCR register */</span></span><br><span class="line"> &#123;</span><br><span class="line"> statusreg = RCC-&gt;BDCR;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="comment">/* The flag to check is in CSR register */</span></span><br><span class="line"> &#123;</span><br><span class="line"> statusreg = RCC-&gt;CSR;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Get the flag position */</span></span><br><span class="line"> tmp = RCC_FLAG &amp; FLAG_Mask;</span><br><span class="line"> <span class="keyword">if</span> ((statusreg &amp; ((<span class="keyword">uint32_t</span>)<span class="number">1</span> &lt;&lt; tmp)) != (<span class="keyword">uint32_t</span>)RESET)</span><br><span class="line"> &#123;</span><br><span class="line"> bitstatus = SET;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> bitstatus = RESET;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* Return the flag status */</span></span><br><span class="line"> <span class="keyword">return</span> bitstatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>当然判断完后，我们需要将复位类型的标志置位以防后期出现重复多次判断</p> <blockquote> <p>void RCC_ClearFlag(void)；//清除复位执行函数</p> </blockquote> <p>代码原型如下:</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Clears the RCC reset flags.</span></span><br><span class="line"><span class="comment"> * @note The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,</span></span><br><span class="line"><span class="comment"> * RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST</span></span><br><span class="line"><span class="comment"> * @param None</span></span><br><span class="line"><span class="comment"> * @retval None</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RCC_ClearFlag</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">/* Set RMVF bit to clear the reset flags */</span></span><br><span class="line"> RCC-&gt;CSR |= CSR_RMVF_Set;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">* 在使用时，只需要执行如下语句即可：</span><br><span class="line"></span><br><span class="line">```C</span><br><span class="line"><span class="keyword">if</span>(RCC_GetFlagStatus(RCC_FLAG_PORRST) != RESET)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//这是上电复位</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (RCC_GetFlagStatus(RCC_FLAG_PINRST) != RESET)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//这是外部RST管脚复位</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (RCC_GetFlagStatus(RCC_FLAG_SFTRST)!= RESET)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">//这是外部RST管脚复位</span></span><br><span class="line"> &#125; </span><br><span class="line"> RCC_ClearFlag();<span class="comment">//清除RCC中复位标志</span></span><br></pre></td></tr></table></figure> <h2 id="六、STM32软件复位方法"><a href="#六、STM32软件复位方法" class="headerlink" title="六、STM32软件复位方法"></a>六、STM32软件复位方法</h2><p>在Cortex-M3权威指南中有这么一句话这里有一个要注意的问题：从SYSRESETREQ 被置为有效，到复位发生器执行复位命令，往往会有一个延时。在此延时期间，处理器仍然可以响应中断请求。但我们的本意往往是要让此次执行到此为止，不要再做任何其它事情了。所以，最好在发出复位请求前，先把FAULTMASK 置位。所以最好在将FAULTMASK 置位才万无一失。</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mcuRestart</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> __set_FAULTMASK(<span class="number">1</span>); <span class="comment">//关闭所有中断</span></span><br><span class="line"> NVIC_SystemReset(); <span class="comment">//复位</span></span><br><span class="line">｝</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python之tkinter入坑Pack</title>
      <link href="//tkinternote/"/>
      <url>//tkinternote/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>python 中写GUI界面还是有很多方法的，下面我就说说这个tkinter吧，感觉刚上手不久，感觉不好用的样子，可能是我自己的原因导致的用不顺手。这篇主要写tkinter的pack（）方法。</p> <a id="more"></a> <h3 id="tkinter-的pack-可以设置的属性"><a href="#tkinter-的pack-可以设置的属性" class="headerlink" title="tkinter 的pack()可以设置的属性"></a>tkinter 的pack()可以设置的属性</h3><ul> <li>我从官网帮助手册中看到的是这样</li> </ul> <blockquote> <p>pack_configure(self, cnf={}, **kw)Pack a widget in the parent widget. Use as options:</p> </blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">after=widget - pack it after you have packed widget</span><br><span class="line">anchor=NSEW (<span class="keyword">or</span> subset) - position widget according to</span><br><span class="line"> given direction</span><br><span class="line">before=widget - pack it before you will pack widget</span><br><span class="line">expand=bool - expand widget <span class="keyword">if</span> parent size grows</span><br><span class="line">fill=NONE <span class="keyword">or</span> X <span class="keyword">or</span> Y <span class="keyword">or</span> BOTH - fill widget <span class="keyword">if</span> widget grows</span><br><span class="line"><span class="keyword">in</span>=master - use master to contain this widget</span><br><span class="line">in_=master - see <span class="string">'in'</span> option description</span><br><span class="line">ipadx=amount - add internal padding <span class="keyword">in</span> x direction</span><br><span class="line">ipady=amount - add internal padding <span class="keyword">in</span> y direction</span><br><span class="line">padx=amount - add padding <span class="keyword">in</span> x direction</span><br><span class="line">pady=amount - add padding <span class="keyword">in</span> y direction</span><br><span class="line">side=TOP <span class="keyword">or</span> BOTTOM <span class="keyword">or</span> LEFT <span class="keyword">or</span> RIGHT - where to add this widget.</span><br></pre></td></tr></table></figure> <ul> <li>上面的部分中文意思是说</li> </ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">anchor=NSEW,表示设置我们要加的当前部件的位置</span><br><span class="line">side=TOP <span class="keyword">or</span> BOTTOM <span class="keyword">or</span> LEFT <span class="keyword">or</span> RIGHT 表示在父类容器的什么地方家我们的部件</span><br></pre></td></tr></table></figure> <p><img src="https://s1.ax1x.com/2018/11/11/iqo2If.png" alt="iqo2If.png"></p> <ul> <li>上面的界面代码如下</li> </ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="comment"># 导入TK的符号常亮</span></span><br><span class="line"><span class="keyword">from</span> tkinter.constants <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendStr</span><span class="params">()</span>:</span></span><br><span class="line"> print(<span class="string">'Data Send Ok!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化TK类，主窗口必须为.TK(),而其他子窗口为.Toplevel()</span></span><br><span class="line">top = tkinter.Tk()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置窗口的尺寸大小</span></span><br><span class="line">top.wm_geometry(<span class="string">'320x480+1000+100'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不允许 改变 窗口的宽和高</span></span><br><span class="line">top.wm_resizable(<span class="keyword">False</span>,<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置窗口标题</span></span><br><span class="line">top.title(<span class="string">'TCP Server'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置label标签</span></span><br><span class="line">L1 = tkinter.Label(top, text=<span class="string">'TCP Sever;\n20108/09/15'</span>,</span><br><span class="line"> width=<span class="number">15</span>, justify=LEFT, relief=RIDGE, background=<span class="string">'#6699ff'</span>, )\</span><br><span class="line"> .pack_configure(anchor=S, side=TOP, ipady=<span class="number">2</span>, pady=<span class="number">2</span>, fill=NONE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置容器</span></span><br><span class="line">frame1 = tkinter.Frame(top,height=<span class="number">80</span>,width=<span class="number">60</span>,relief=RIDGE, bg=<span class="string">'#ff3399'</span>,bd=<span class="number">5</span>,borderwidth=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 设置填充和布局</span></span><br><span class="line">frame1.pack(fill=NONE,ipady=<span class="number">2</span>,expand=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加接收区文字标签</span></span><br><span class="line">L2 = tkinter.Label(frame1,text=<span class="string">'接\n收\n区'</span>,width=<span class="number">2</span>, justify=LEFT, font=(<span class="string">"宋体"</span>, <span class="number">12</span>, <span class="string">"bold"</span>),)\</span><br><span class="line"> .pack(padx=<span class="number">2</span>,pady=<span class="number">40</span>,side=LEFT,anchor=N)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加接收区的文本框</span></span><br><span class="line">txt1 = tkinter.Text(frame1,width = <span class="number">40</span>, height = <span class="number">10</span>).pack(padx=<span class="number">2</span>,pady=<span class="number">10</span>,side=RIGHT,anchor=N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">frame2 = tkinter.Frame(top, relief=RIDGE,bg=<span class="string">'#3366ff'</span>)</span><br><span class="line">frame2.pack(fill=X, padx=<span class="number">2</span>,pady=<span class="number">10</span>,side=TOP)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加一个复选框，一个按键</span></span><br><span class="line">chk_text = <span class="string">'Hex Display'</span></span><br><span class="line">int_if_choise = tkinter.IntVar()</span><br><span class="line">chk1 = tkinter.Checkbutton(frame2,text=chk_text,font=(<span class="string">'黑体'</span>,<span class="number">12</span>),variable=int_if_choise,onvalue=<span class="string">'OK'</span>,offvalue=<span class="string">'NO'</span>)</span><br><span class="line">chk1.pack(fill=NONE,side=LEFT,padx=<span class="number">2</span>,pady=<span class="number">10</span>)</span><br><span class="line">print(<span class="string">'shuchu:'</span>,int_if_choise)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置容器</span></span><br><span class="line">frame3 = tkinter.Frame(top,height=<span class="number">120</span>,width=<span class="number">60</span>,relief=RIDGE, bg=<span class="string">'#ff3399'</span>,bd=<span class="number">5</span>,borderwidth=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 设置填充和布局</span></span><br><span class="line">frame3.pack(fill=X,ipady=<span class="number">2</span>,expand=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字符串变量</span></span><br><span class="line">ServerReceiveVar = tkinter.StringVar(top,<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">L3 = tkinter.Label(frame3, text=<span class="string">'Cache&amp;Input:'</span>,font=(<span class="string">'黑体'</span>,<span class="number">12</span>))</span><br><span class="line">L3.pack(fill=NONE, expand=NO, side=TOP, anchor=W, padx=<span class="number">2</span>,pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">txt2 = tkinter.Text(frame3, height = <span class="number">2</span>, width = <span class="number">30</span>).pack(padx=<span class="number">2</span>, pady=<span class="number">2</span>, ipady=<span class="number">4</span>, side=LEFT, anchor=N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">button1 = tkinter.Button(frame3,text=<span class="string">'Send Str'</span>, command=sendStr).pack(side=TOP, anchor=W, padx=<span class="number">2</span>, pady=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># IP 列表</span></span><br><span class="line">button2 = tkinter.Button(frame3,text=<span class="string">"Exit"</span>,command=top.destroy).pack(side=TOP, anchor=N, padx=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">top.mainloop()</span><br></pre></td></tr></table></figure> <p><img src="https://s1.ax1x.com/2018/11/11/iqoWi8.png" alt="iqoWi8.png"></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">root = Tk()</span><br><span class="line"></span><br><span class="line">w = Label(root, text=<span class="string">"red"</span>, bg=<span class="string">"red"</span>, fg=<span class="string">"white"</span>)</span><br><span class="line">w.pack(padx=<span class="number">5</span>, pady=<span class="number">10</span>, side=LEFT)</span><br><span class="line">w = Label(root, text=<span class="string">"green"</span>, bg=<span class="string">"green"</span>, fg=<span class="string">"black"</span>)</span><br><span class="line">w.pack(padx=<span class="number">5</span>, pady=<span class="number">20</span>, side=LEFT)</span><br><span class="line">w = Label(root, text=<span class="string">"blue"</span>, bg=<span class="string">"blue"</span>, fg=<span class="string">"white"</span>)</span><br><span class="line">w.pack(padx=<span class="number">5</span>, pady=<span class="number">20</span>, side=LEFT)</span><br><span class="line"></span><br><span class="line">mainloop()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>故事1：老者病危，不思乡</title>
      <link href="//tooold/"/>
      <url>//tooold/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --># 摘要 关于我的信息没什么可说的，但是这部分是博主平时无聊记录的部分内容。 - [x] Edit By Porter, 积水成渊,蛟龙生焉。 <a id="more"></a> # 老者病危不思乡 * &emsp;&emsp;omega：好久没回家了，不回家看看，找小伙伴叙叙？ * &emsp;&emsp;小豌豆：ememem，不回，今年公司忙，还有其他事，脱不了身。 ------- > 你内心是这样的：以我目前的现状，没成功，没事业，更没兑象，这个标准三霉啊，就这标准屌丝样，我还赶回去吗，多丢人啊，想想那个邻家的小妹，谁来着，已经年薪估计得半掰弯以上了吧. &emsp;&emsp;你呢，自己还穷得吃土，回去乡里香歪的，又得叽叽歪歪，“你看，傻二蛋回来了”恩恩，出去这么多年，穿着品味好接土气啊”,"衣服还有如今潮流的洞洞眼，裤脚布料还是专门有岁月漂洗后留下的流梭子"，"鞋子上专门漏了个大脚拇指，像极了电视里的流浪汉装饰"，"就差顶着个脸，没挨家挨户要饭吃了，不过也是，这年代城市里垃圾桶的剩余实物残渣很丰富，养活一个人还是可以的涩“ - [x] &emsp;&emsp;小豌豆点评：瓜皮知道了吧，我不会去，并不是我忙啊，是没脸回去。 .... 故事独白时刻： &emsp;&emsp;话说若干年后，你事业有成了，准备风光回老家看看曾经一直没脸回去见下的老人。 &emsp;&emsp;这天你回到小时候居住的镇上，也是你想给证明的那个他生活的镇上。几经波折你才了解到这些年因为长时间没回家，你直想给他证明什么的那个他，已经不在了。 &emsp;&emsp;你看周边并没有一个熟悉的面孔，这时你极力冷静，试图问问这曾经你想证明给他看的那个他的邻居，问为什么他走了的消息都没人通知你，然而，这个你所谓的那个他的邻居并不是他的邻居，这个你所谓他的他邻居，并不认识你所想证明给他看的他，这个所谓的邻居只是因为做生意，刚在这里租下的门面，这里早年的房屋早已大变样，那个曾经你想证明给他看的他的房子早已被这高楼所替代，说实话你来这里问事，你也只能大概记得是这个位置。物是人非，你最终几经打听才从几位镇上的老人那知道了你所挂念着的他，早年已经离开，具体埋葬的地方也是无人能想起。当时离世时也没啥人去，你听到这心头一整揪心的痛，你压抑心中的痛苦回到那个他曾经住过的想在被高楼替换掉的楼房前，你想着曾经那个他给你的好，想到某些不甘心，又想到因为自己碍于面子，迟迟不见老人，想着想着，实在压抑不住内心的痛苦，压抑不住的流着眼泪，静静地坐着，此时你才后悔，曾经的你太过于意他人的眼光，做着强撑这无畏的面子，做了多么荒唐的决定。 &emsp;&emsp;正是因为你曾经放不下的面子，你所思念，你所至高崇敬的人已经。。。。对的都已经物是人非了，也是此时，你才尝试着放下面子，你开始哭泣，大神的哭泣，仿佛你置身于辽阔的草原，你不能注释到你身边围上来，看你莫名其妙的一群人，无视所有的存在，你任由你的鼻涕因为痛哭呛入你的肺腑，然后你无视周围的一切，你不再像曾经那样有鼻涕会文雅的擦掉，这时，因感肺腑的鼻涕躺入，你不得已，一声响亮的咳嗽声，鼻涕开始从你的嘴里躺出，似如绵绵的胶水涟漪，一丝丝垂下，却不曾断开，你此刻只能弯腰垂头俯面大地，最终形成口中鼻涕和地面相粘络络不绝，丝丝相连。你此刻已经不在乎任何的颜面，你只顾悲伤逆流成河，只顾让鼻涕，口水和眼泪来释放自己的痛，也只顾让这不绝的泪花，不断流的口水夹杂涕沫与大地来场永久的牵链不断，让悲伤逆流成和。此时你不再管周围视你莫名其妙的路人，不管一群上来或者是安慰，或者是嘲笑你，或者是假装安慰你，或者是严肃指责你太窝囊。。。。 &emsp;&emsp;这一切周边因你而产生的异象你都不再关心，你只是泪水和口水鼻涕不止地往外涌，只顾宣泄自己的痛。。。。。好长时间你终于发泄的差不多，恍然醒来，定神一看，似乎异常的围观人群早已失因为失去等待的耐心而离去，此时也已快天黑，黄昏晓。 &emsp;&emsp;你此刻只能从你周遭的近似围绕你的圆弧垃圾或者碎屑痕迹了解到，曾经你的周遭是有过很多人的逗留，你也发现你面前也多了几个铜板放在不知哪来的碗里，当然你也不确信这是人家为你的募捐，当然经过多个年头你一直不愿回家，并一直在拼搏的你看来这些募捐还是那么可笑，你只知道你并不需要。此时的黄昏胜似美景风清扬，你此刻终于明白，你一直很在乎的东西也是你自己一手造就了悲惨的结局，你想到这，无心似有心的望天长笑了三声，然后踉跄着绕着曾经你为了向他证明的他曾经生活了一辈子孤苦而终的城市彳亍着，直到夜半三更你都不愿离去。 &emsp;&emsp;直到关心你的爱人和孩子，寻找你也晚上，也正是在这寻找到深夜的此刻才找到你，你的爱人看了一眼你满脸的早已干了的尘土和涕泪痕迹，似乎欲言又止，只能默默地看着你一脸悲伤的样，几个人扶着你一拐一踉跄地将你扶上早已为你准备好的1000万FI小跑车上，此时，你却意识到忘掉了什么，坚持要从曾经你所爱的这两跑车上下来，因为，你不想忘记曾经你想证明给他看的他，此刻你决定只要人还在这座城市里，你就要自己走着，想多感受一下，你想证明的他存曾经存在过的气息，虽然你明白他早已不再。 &emsp;&emsp;夜晚深沉，似乎半夜的夜景比黄昏更加沉重，一路上你的专车司机也慢慢开着车，在你后面跟着，似乎害怕因你的以想不开，丢了这份为世界500强企业老总开车的诱人待遇岗位。你的爱人和孩子一人一遍搀扶着你，像是扶着一位身受重创的病着，但是都不敢说话，只是都静静的走着，关心你的人似乎都不愿打破这沉寂的夜晚，想跟清晰的听你心跳，听你呼吸声，确认你还有生命的气息。。。。。苍茫夜空，静静的一群人，，，，，，，，静静的离去。（无聊的人编写无聊的故事，只为证明，时光不待，莫自找多愁善感，做自己想做的事，不要被面子腰斩了青春。） &emsp;&emsp;..........未完，不待续。<!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>C++ MFC 界面实现套接字（socket) 通信</title>
      <link href="//cplusMFC/"/>
      <url>//cplusMFC/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><ul> <li>Socket 套接字的概念</li> <li>Socket 函数功能</li> <li>MFC 介绍</li> <li>TCP 变成步骤</li> <li>TCP 上位机实现</li> </ul> <a id="more"></a> <h2 id="Socket-套接字的概念"><a href="#Socket-套接字的概念" class="headerlink" title="Socket 套接字的概念"></a>Socket 套接字的概念</h2><p>引用<a href="https://baike.baidu.com/item/socket/281150?fr=aladdin" target="_blank" rel="noopener">百度百科的一句话</a>：网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。</p> <ul> <li>一段形象的比喻：</li> </ul> <blockquote> <p>建立网络通信连接至少要一对端口号(socket)。socket本质是编程接口(API)，对TCP/IP的封装，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口；HTTP是轿车，提供了封装或者显示数据的具体形式；Socket是发动机，提供了网络通信的能力。</p> </blockquote> <hr> <p>Socket的英文原义是“孔”或“插座”。在Internet上的主机一般运行了多个服务软件，同时提供几种服务。每种服务都打开一个Socket，并绑定到一个端口上，不同的端口对应于不同的服务。Socket正如其英文原义那样，像一个多孔插座。一台主机犹如布满各种插座的房间，每个插座有一个编号，有的插座提供220伏交流电， 有的提供110伏交流电，有的则提供有线电视节目。 客户软件将插头插到不同编号的插座，就可以得到不同的服务。</p> <p><a href="http://www.supersocket.net/" target="_blank" rel="noopener">SuperSocke,可扩展的 Socket 服务器框架</a></p> <p><a href="https://github.com/socketio/socket.io" target="_blank" rel="noopener">socket.io github 网页</a>或者<a href="http://socket.io" target="_blank" rel="noopener">官网</a></p> <h2 id="Socket-函数功能"><a href="#Socket-函数功能" class="headerlink" title="Socket 函数功能"></a>Socket 函数功能</h2><p>具体函数如下：</p> <ul> <li><p>socket()函数</p> </li> <li><p>bind()函数</p> </li> <li><p>connect()函数</p> </li> <li><p>listen()函数</p> </li> <li><p>accept()函数</p> </li> <li><p>send()和recv()函数</p> </li> <li><p>sendto()和recvfrom()函数</p> </li> <li><p>close()和shutdown()函数</p> </li> <li><p>getpeername()函数</p> </li> <li><p>gethostname()函数</p> </li> </ul> <hr> <h3 id="socket-函数"><a href="#socket-函数" class="headerlink" title="socket() 函数"></a>socket() 函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domine,<span class="keyword">int</span> type,<span class="keyword">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure> <ul> <li>参数(int domin)：</li> </ul> <blockquote> <p>函数参数，即协议域，又称为协议族。协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET(IPV4)、AF_INET6(IPV6)、AF_LOCAL（或称AF_UNIX，Unix域socket）、AF_ROUTE等等。通常情况下我们使用AF_INET。</p> </blockquote> <blockquote> <p>AF_INET的定义是：#define AF_INET 2，所以这里的参数都是int型的</p> </blockquote> <ul> <li>参数(int type)：</li> </ul> <blockquote> <p>:是套接口类型，主要SOCK_STREAM(建立TCP连接)、SOCK_DGRAM（建立UDP）、SOCK_RAW；<br>SOCK_STREAM(建立TCP连接)：提供面向连接的可靠的数据传输服务。数据被看作是字节流，无长度限制。例如FTP协议就采用这种。<br>SOCK_DGRAM（建立UDP）：提供无连接的数据传输服务，不保证可靠性。</p> </blockquote> <blockquote> <p>SOCK_RAW：该接口允许对较低层次协议，如IP，ICMP直接访问。</p> </blockquote> <ul> <li>参数(int protocole)：</li> </ul> <blockquote> <p>指定协议。常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议。通常情况系设为0。</p> </blockquote> <blockquote> <p><strong>注意</strong>：并不是上面的type和protocol可以随意组合的，如SOCK_STREAM不可以跟IPPROTO_UDP组合。当protocol为0时，会自动选择type类型对应的默认协议。</p> </blockquote> <ul> <li>函数返回值(int):</li> </ul> <blockquote> <p>成功：返回套接字描述符（套接字的索引）</p> </blockquote> <blockquote> <p>失败：返回-1</p> </blockquote> <h3 id="bind-函数"><a href="#bind-函数" class="headerlink" title="bind() 函数"></a>bind() 函数</h3><p>一旦你有一个套接字，你可能要将套接字和机器上的一定的端口关联 起来。(如果你想用listen()来侦听一定端口的数据，这是必要一步–MUD 告 诉你说用命令 “telnet x.y.z 6969”。)如果你只想用 connect()，那么这个步 骤没有必要。但是无论如何，请继续读下去。</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *my_addr, <span class="keyword">int</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure> <ul> <li>参数(int sockfd)：</li> </ul> <blockquote> <p>sockfd 是调用 socket 返回的文件描述符。</p> </blockquote> <ul> <li>参数(struct sockaddr *my_addr)：</li> </ul> <blockquote> <p>my_addr 是指向数据结构 struct sockaddr 的指针，它保存你的地址(即端口和 IP 地址) 信息。</p> </blockquote> <ul> <li>参数(int addrlen)：</li> </ul> <blockquote> <p>addrlen 设置为 sizeof(struct sockaddr)。</p> </blockquote> <h3 id="connect-函数"><a href="#connect-函数" class="headerlink" title="connect()函数"></a>connect()函数</h3><p>现在我们假设你是个 telnet 程序。你的用户命令你得到套接字的文件 描述符。你听从命令调用了socket()。下一步，你的用户告诉你通过端口 23(标准 telnet 端口)连接到”132.241.5.10”。你该怎么做呢? 幸运的是，你正在阅读 connect()–如何连接到远程主机这一章。你可 不想让你的用户失望。</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *serv_addr, <span class="keyword">int</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure> <ul> <li>参数(int sockfd)：</li> </ul> <blockquote> <p>sockfd 是系统调用 socket() 返回的套接字文件描述符。</p> </blockquote> <ul> <li>参数(struct sockaddr *serv_addr)：</li> </ul> <blockquote> <p>serv_addr 是 保存着目的地端口和 IP 地址的数据结构 struct sockaddr。</p> </blockquote> <ul> <li>参数(int addrlen)：</li> </ul> <blockquote> <p>addrlen 设置 为 sizeof(struct sockaddr)。</p> </blockquote> <h3 id="listen-函数"><a href="#listen-函数" class="headerlink" title="listen()函数"></a>listen()函数</h3><p>是换换内容得时候了。假如你不希望与远程的一个地址相连，或者说， 仅仅是将它踢开，那你就需要等待接入请求并且用各种方法处理它们。处 理过程分两步：首先，你听–listen()，然后，你接受–accept() (请看下面的 内容)。</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure> <ul> <li>参数(int sockfd)：</li> </ul> <blockquote> <p>sockfd 是调用 socket() 返回的套接字文件描述符。</p> </blockquote> <ul> <li>参数(int backlog)：</li> </ul> <p>backlog 是在进入 队列中允许的连接数目。</p> <h3 id="accept-函数"><a href="#accept-函数" class="headerlink" title="accept()函数"></a>accept()函数</h3><h3 id="send-和recv-函数"><a href="#send-和recv-函数" class="headerlink" title="send()和recv()函数"></a>send()和recv()函数</h3><h3 id="sendto-和recvfrom-函数"><a href="#sendto-和recvfrom-函数" class="headerlink" title="sendto()和recvfrom()函数"></a>sendto()和recvfrom()函数</h3><h3 id="close-和shutdown-函数"><a href="#close-和shutdown-函数" class="headerlink" title="close()和shutdown()函数"></a>close()和shutdown()函数</h3><h3 id="getpeername-函数"><a href="#getpeername-函数" class="headerlink" title="getpeername()函数"></a>getpeername()函数</h3><h3 id="gethostname-函数"><a href="#gethostname-函数" class="headerlink" title="gethostname()函数"></a>gethostname()函数</h3><p>本节参考了<a href="https://www.cnblogs.com/kefeiGame/p/7246942.html" target="_blank" rel="noopener">博文</a></p> <h2 id="MFC-介绍"><a href="#MFC-介绍" class="headerlink" title="MFC 介绍"></a>MFC 介绍</h2><h2 id="TCP-上位机实现"><a href="#TCP-上位机实现" class="headerlink" title="TCP 上位机实现"></a>TCP 上位机实现</h2><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Socket </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第三章 深度学习框架学习</title>
      <link href="//DLindex/"/>
      <url>//DLindex/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>Welcome to <a href="http://index.porterpan.top/" target="_blank" rel="noopener">My site IODT</a>! This is your very first visit. Check <a href="https://porter.gitbook.io/deep-learning-series/" target="_blank" rel="noopener">home page of book</a> for more info. If you get any problems when reading, you can find the answer in <a href="https://www.google.com" target="_blank" rel="noopener">google</a> or you can contact me on <img src="/image1/twitter.ico" alt="Twitter">:<a href="https://twitter.com/zf_pertor?lang=en" target="_blank" rel="noopener">by @zf_pertor</a>.</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Conf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vultr+freenom实现主机域名的绑定</title>
      <link href="//vultrFreenom/"/>
      <url>//vultrFreenom/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="vultr-freenom实现主机域名的绑定"><a href="#vultr-freenom实现主机域名的绑定" class="headerlink" title=" vultr+freenom实现主机域名的绑定 "></a><center> vultr+freenom实现主机域名的绑定 <center></center></center></h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文将通过实例进行演示，给大家介绍如何用免费的域名，绑定我们的云主机，只需要登录Freenom注册个账号就可以免费申请免备案域名了，心动请先不要忙行动，点击阅读更多，先看看本文的免费域名申请绑定主机的方法吧。</p> <a id="more"></a> <h2 id="1、注册freenom域名"><a href="#1、注册freenom域名" class="headerlink" title="1、注册freenom域名"></a>1、注册freenom域名</h2><ul> <li>进入 <strong><a href="https://my.freenom.com/clientarea.php" target="_blank" rel="noopener">freenom</a></strong> 网站,在界面的菜单中选择“Servers”–&gt;”Register a New Domains”，如下图所示:</li> </ul> <p><img src="https://s1.ax1x.com/2018/11/07/iTb50P.png" alt="进入My Domains菜单"></p> <blockquote> <p>可能在此之前需要先注册一个账号，具体网站的账号怎么注册，自己摸索下，并不复杂，这里我们只讲怎么注册域名并解析到你的主机。</p> </blockquote> <ul> <li>接下来在“My Domains”页面上的输入框中输入你想注册的免费域名，并搜索下是否已经被注册了，输入框在如下图中的红框所示，例如我输入：smriti</li> </ul> <p><img src="https://s1.ax1x.com/2018/11/07/iTbITf.png" alt="红框中输入你想要的域名"></p> <p>搜索结果显示，好几个是免费的，我们只需要选择一个就行，如下截图所示：</p> <p><img src="https://s1.ax1x.com/2018/11/07/iTbHfg.png" alt="搜索到的理想域名"></p> <ul> <li>随便选择一个，“Get it now” 即可比如我选择TK域名，然后进入我的购物车，选择免费12个月，如下图：</li> </ul> <p><img src="https://s1.ax1x.com/2018/11/07/iTqpkT.png" alt="选择免费使用12个月"></p> <ul> <li>接下来在USE DNS处选择自己需要解析到的主机IP地址上，也就是把你的云服务器的主机地址填到下图的红框中，Hostname<br>不要动，保持默认（ 一个是yourdot.tk,另一个是<a href="http://www.yourdot.tk" target="_blank" rel="noopener">www.yourdot.tk</a> ），如下图：</li> </ul> <p><img src="https://s1.ax1x.com/2018/11/07/iTqZ0x.png" alt="指定解析到的IP地址"></p> <ul> <li>接下来点击“COntinue”即可。</li> </ul> <hr> <p>注意如果你现在没有主机IP，你可以先不填，后期再填写，后期填写只需要进入“My Domains” 选择你注册的域名，点击右边的“Manage Domain”，然后选择第四个菜单，”Manage Freenom DNS”,然后添加域名解析到主机，如下图所示：</p> <p><img src="https://s1.ax1x.com/2018/11/07/iTLmKs.png" alt="绑定到主机IP"></p> <ul> <li><p>接下来就是等待，因为域名解析，不会一下子就解析成功的所以你需要等5-30分钟不等，如果一个小时后还是解析不成功，可能就是你的主机IP填写错误</p> </li> <li><p>重要的事情再说一遍，就是以上域名解析填写完成后，还需要进行等待，一般5-30分钟。5分钟内访问该网站可能提示解析错误，所以要等待啊。</p> </li> <li><p>有的需要主机上面也要填写DNS绑定域名,比如阿里云主机,但是我这是国外的主机和国外的免费域名，好像不要要云主机上面操作，直接在域名服务商网页上绑定主机IP就成功访问了。 </p> </li> </ul> <h2 id="2、主机注册"><a href="#2、主机注册" class="headerlink" title="2、主机注册"></a>2、主机注册</h2><blockquote> <p>推荐好用的还便宜的云主机：<a href="vultr.com">vultr</a> 、 和 <a href="https://bwg.net/" target="_blank" rel="noopener">搬瓦工</a> </p> </blockquote> <ul> <li>加入你已经购买了云虚拟主机，点击进入主机管理，如下图所示：</li> </ul> <p><img src="https://s1.ax1x.com/2018/11/07/iTLTzQ.png" alt="云主机设置"></p> <ul> <li>添加主机域名绑定</li> </ul> <p><img src="https://s1.ax1x.com/2018/11/07/iTLjoV.png" alt="主机中绑定域名"></p> <ul> <li>最后一步，主机中绑定域名，如下图：</li> </ul> <p><img src="https://s1.ax1x.com/2018/11/07/iTOKQH.png" alt="主机中绑定域名"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决Chrome67版本以后不能离线安装插件的情况</title>
      <link href="//installplugbychrome/"/>
      <url>//installplugbychrome/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><center> Porter Pan </center> <h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>通过本文安装方法可以快速，解决Chrome67版本以后不能离线安装插件的情况。</p> <p><img src="https://i.loli.net/2018/10/22/5bcde5483136e.png" alt="离线插件安装失败"></p> <a id="more"></a> <blockquote> <p>一般情况下，我们如果使用的Chrome版本为67以后的版本，安装离线插件会出现如下图信息</p> </blockquote> <p><img src="https://i.loli.net/2018/10/22/5bcde5483136e.png" alt="离线插件安装失败"></p> <blockquote> <p>但是这样我们就真的没法安装离线插件了吗？特别是对想安装翻墙的插件 <strong><em>Proxy SwitchyOmega</em></strong> 的同学来说是一件噩梦。这篇文章讲会告诉读者，这个问题是可以解决的</p> </blockquote> <h2 id="解决方法如下："><a href="#解决方法如下：" class="headerlink" title="解决方法如下："></a>解决方法如下：</h2><ul> <li>首代开终端输入以下代码<blockquote> <blockquote> <p>/opt/google/chrome/google-chrome –enable-easy-off-store-extension-install</p> </blockquote> </blockquote> </li> </ul> <blockquote> <blockquote> <p>将会打开google Chrome 浏览器，然后进入浏览器的扩展插件工具界面，如下图所示：</p> </blockquote> </blockquote> <p><img src="https://i.loli.net/2018/10/22/5bcde7297750e.png" alt="扩展程序界面"></p> <ul> <li>此时请再次将离线下载的插件拖进去，看看是不是能够安装了。</li> </ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="//hexoHello/"/>
      <url>//hexoHello/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><center> Porter Pan </center> <h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p> <a id="more"></a> <hr> <h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure> <p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p> <h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure> <p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p> <h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure> <p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p> <h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure> <p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.1 PyTorch 学习</title>
      <link href="//pytorchNotes/"/>
      <url>//pytorchNotes/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本节主要是学习PyTorch相关的学习，主要是基础的学习路线，包括简单的实例笔记等。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>帮助文档见<a href="https://pytorch.org/tutorials/" target="_blank" rel="noopener">PyTorch官网</a></p> <h2 id="一、张量-tensor-和变量-Variable"><a href="#一、张量-tensor-和变量-Variable" class="headerlink" title="一、张量(tensor)和变量(Variable)"></a>一、张量(tensor)和变量(Variable)</h2><p>PyTorch的官方介绍是一个拥有强力GPU加速的张量和动态构建网络的库，其主要构建是张量，所以可以把PyTorch当做Numpy来用，Pytorch的很多操作好比Numpy都是类似的，但是其能够在GPU上运行，所以有着比Numpy快很多倍的速度。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">numpy_tensor = np.random.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">pytorch_tensor1 = torch.Tensor(numpy_tensor)</span><br><span class="line">pytorch_tensor2 = torch.from_numpy(numpy_tensor)</span><br><span class="line"></span><br><span class="line">print(pytorch_tensor1)</span><br><span class="line">print(pytorch_tensor2)</span><br></pre></td></tr></table></figure> <p>输出结果：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pytorch_tensor1:</span><br><span class="line"></span><br><span class="line">tensor([[ <span class="number">1.3511</span>, <span class="number">0.2016</span>, <span class="number">-0.9728</span>, <span class="number">0.7997</span>],</span><br><span class="line"> [<span class="number">-1.0706</span>, <span class="number">-0.0768</span>, <span class="number">-1.3627</span>, <span class="number">-0.8809</span>],</span><br><span class="line"> [<span class="number">-0.6040</span>, <span class="number">-0.0030</span>, <span class="number">0.4871</span>, <span class="number">0.6634</span>]])</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pytorch_tensor2:</span><br><span class="line"></span><br><span class="line">tensor([[ <span class="number">1.3511</span>, <span class="number">0.2016</span>, <span class="number">-0.9728</span>, <span class="number">0.7997</span>],</span><br><span class="line"> [<span class="number">-1.0706</span>, <span class="number">-0.0768</span>, <span class="number">-1.3627</span>, <span class="number">-0.8809</span>],</span><br><span class="line"> [<span class="number">-0.6040</span>, <span class="number">-0.0030</span>, <span class="number">0.4871</span>, <span class="number">0.6634</span>]], dtype=torch.float64)</span><br></pre></td></tr></table></figure> <p>使用以上两种方法进行转换的时候，会直接将Numpy ndarray的数据类型转换为对应的Pytorch Tensor数据类型,同时我们也可以使用下面的方法将pytorch tensor转换为numpy ndarray</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">numpy_tensor = np.random.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">pytorch_tensor1 = torch.Tensor(numpy_tensor)</span><br><span class="line">pytorch_tensor2 = torch.from_numpy(numpy_tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果pytorch tensor在cpu上</span></span><br><span class="line">numpy_array1 = pytorch_tensor1.numpy()</span><br><span class="line">numpy_array2 = pytorch_tensor2.cpu().numpy()</span><br><span class="line"></span><br><span class="line">print(numpy_array1)</span><br><span class="line">print(numpy_array2)</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">numpy_array1:</span><br><span class="line"></span><br><span class="line">[[ <span class="number">0.9646071</span> <span class="number">1.0680387</span> <span class="number">-1.4145772</span> <span class="number">-1.1733457</span> ]</span><br><span class="line"> [ <span class="number">0.14683424</span> <span class="number">0.15183815</span> <span class="number">0.3256755</span> <span class="number">2.5129247</span> ]</span><br><span class="line"> [<span class="number">-1.0027096</span> <span class="number">0.02551154</span> <span class="number">-0.60790646</span> <span class="number">-0.22400694</span>]]</span><br><span class="line"></span><br><span class="line"> numpy_array2:</span><br><span class="line"></span><br><span class="line">[[<span class="number">-2.09633392</span> <span class="number">-2.08986247</span> <span class="number">0.02169762</span> <span class="number">0.15833546</span>]</span><br><span class="line"> [ <span class="number">1.24929483</span> <span class="number">-1.3953018</span> <span class="number">1.03153148</span> <span class="number">-0.06309232</span>]</span><br><span class="line"> [ <span class="number">0.24348084</span> <span class="number">-1.42512446</span> <span class="number">1.45863934</span> <span class="number">0.92882537</span>]]</span><br></pre></td></tr></table></figure> <p>需要注意GPU上的Tensor不能直接转换为Numpy ndarray，需要使用.cpu()先将GPU上的Tensor转到CPU上 PyTorch Tensor 使用GPU加速可以使用下面两种方法将Tensor放到GPU上.</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方式是定义cuda数据类型</span></span><br><span class="line">dtype = torch.cuda.FloatTensor</span><br><span class="line">gpu_tensor = torch.randn(<span class="number">10</span>,<span class="number">20</span>).type(dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方式更简单，推荐使用</span></span><br><span class="line">gpu_tensor = torch.randn(<span class="number">10</span>,<span class="number">20</span>).cuda(<span class="number">0</span>) <span class="comment"># 将tensor放到第一个GPU上</span></span><br><span class="line">gpu_tensor = torch.randn(<span class="number">10</span>,<span class="number">20</span>).cuda(<span class="number">1</span>) <span class="comment"># 将tensor放到第二个GPU上</span></span><br></pre></td></tr></table></figure> <ul> <li><p>使用第一种方式将tensor放到GPU上的时候会将数据类型转换成定义的类型。</p> </li> <li><p>而使用第二种方式能够直接将tensor放到GPU上，类型跟之前保持一致。</p> </li> </ul> <blockquote> <p>推荐在定义tensor的时候就明确数据类型，然后直接使用第二种方法将tensor放到GPU上</p> </blockquote> <p>我的测试代码：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">numpy_tensor = np.random.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">pytorch_tensor1 = torch.Tensor(numpy_tensor)</span><br><span class="line">pytorch_tensor2 = torch.from_numpy(numpy_tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果pytorch tensor在cpu上</span></span><br><span class="line">numpy_array1 = pytorch_tensor1.numpy()</span><br><span class="line">numpy_array2 = pytorch_tensor2.cpu().numpy()</span><br><span class="line"></span><br><span class="line">print(numpy_array1)</span><br><span class="line">print(numpy_array2)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"输出数据模式1："</span>)</span><br><span class="line"><span class="comment"># 第一种方式是定义cuda数据类型</span></span><br><span class="line">dtype = torch.cuda.FloatTensor</span><br><span class="line">gpu_tensor1 = torch.randn(<span class="number">3</span>,<span class="number">4</span>).type(dtype)</span><br><span class="line"></span><br><span class="line">print(gpu_tensor1)</span><br><span class="line"></span><br><span class="line">gpu_tensor2 = torch.randn(<span class="number">3</span>,<span class="number">4</span>).cuda(<span class="number">0</span>) <span class="comment"># 将tensor放到第一个GPU上</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"输出数据模式2："</span>)</span><br><span class="line">print(gpu_tensor2)</span><br></pre></td></tr></table></figure> <h2 id="二、Torch的数据类型"><a href="#二、Torch的数据类型" class="headerlink" title="二、Torch的数据类型"></a>二、Torch的数据类型</h2><p>2.1 torch.Tensor</p> <p>torch.Tensor是一种包含单一数据类型元素的多维矩阵。</p> <p>Torch定义了<a href="https://pytorch-cn.readthedocs.io/zh/latest/package_references/Tensor/" target="_blank" rel="noopener">七种CPU tensor类型和八种GPU tensor类型</a>：</p> <table> <thead> <tr> <th>Data tyoe</th> <th>CPU tensor</th> <th>GPU tensor</th> </tr> </thead> <tbody> <tr> <td>32-bit floating point</td> <td>torch.FloatTensor</td> <td>torch.cuda.FloatTensor</td> </tr> <tr> <td>64-bit floating point</td> <td>torch.DoubleTensor</td> <td>torch.cuda.DoubleTensor</td> </tr> <tr> <td>16-bit floating point</td> <td>N/A</td> <td>torch.cuda.HalfTensor</td> </tr> <tr> <td>8-bit integer (unsigned)</td> <td>torch.ByteTensor</td> <td>torch.cuda.ByteTensor</td> </tr> <tr> <td>8-bit integer (signed)</td> <td>torch.CharTensor</td> <td>torch.cuda.CharTensor</td> </tr> <tr> <td>16-bit integer (signed)</td> <td>torch.ShortTensor</td> <td>torch.cuda.ShortTensor</td> </tr> <tr> <td>32-bit integer (signed)</td> <td>torch.IntTensor</td> <td>torch.cuda.IntTensor</td> </tr> <tr> <td>64-bit integer (signed)</td> <td>torch.LongTensor</td> <td>torch.cuda.LongTensor</td> </tr> </tbody> </table> <p>torch.Tensor是默认的tensor类型（torch.FlaotTensor）的简称。</p> <p>一个张量tensor可以从Python的list或序列构建：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.FloatTensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">[torch.FloatTensor of size <span class="number">2</span>x3]</span><br></pre></td></tr></table></figure> <p>一个空张量tensor可以通过规定其大小来构建：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.IntTensor(<span class="number">2</span>, <span class="number">4</span>).zero_()</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">[torch.IntTensor of size <span class="number">2</span>x4]</span><br></pre></td></tr></table></figure> <h2 id="三、-Torch-的多种数学操作"><a href="#三、-Torch-的多种数学操作" class="headerlink" title="三、 Torch 的多种数学操作"></a>三、 Torch 的多种数学操作</h2><h3 id="3-1-Torch"><a href="#3-1-Torch" class="headerlink" title="3.1 Torch"></a>3.1 Torch</h3><p>包<a href="https://pytorch-cn.readthedocs.io/zh/latest/package_references/torch/" target="_blank" rel="noopener">torch</a>包含了多维张量的数据结构以及基于其上的多种数学操作。另外，它也提供了多种工具，其中一些可以更有效地对张量和任意类型进行序列化。</p> <p>它有CUDA 的对应实现，可以在NVIDIA GPU上进行张量运算(计算能力&gt;=2.0)。</p> <h3 id="3-2-张量-Tensors"><a href="#3-2-张量-Tensors" class="headerlink" title="3.2 张量 Tensors"></a>3.2 张量 Tensors</h3><h4 id="3-2-1-torch-is-tensor-source"><a href="#3-2-1-torch-is-tensor-source" class="headerlink" title="3.2.1 torch.is_tensor[source]"></a>3.2.1 torch.is_tensor[source]</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.is_tensor(obj)</span><br></pre></td></tr></table></figure> <p>如果obj 是一个pytorch张量，则返回True</p> <blockquote> <p>参数： obj (Object) – 判断对象</p> </blockquote> <h4 id="3-2-2-torch-is-storage"><a href="#3-2-2-torch-is-storage" class="headerlink" title="3.2.2 torch.is_storage"></a>3.2.2 torch.is_storage</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.is_storage(obj)</span><br></pre></td></tr></table></figure> <p>如何obj 是一个pytorch storage对象，则返回True</p> <blockquote> <p>参数： input (Object) – 判断对象</p> </blockquote> <h4 id="3-2-3-torch-set-default-tensor-type-source"><a href="#3-2-3-torch-set-default-tensor-type-source" class="headerlink" title="3.2.3 torch.set_default_tensor_type[source]"></a>3.2.3 torch.set_default_tensor_type[source]</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.set_default_tensor_type(t)</span><br></pre></td></tr></table></figure> <h4 id="3-2-4-torch-numel"><a href="#3-2-4-torch-numel" class="headerlink" title="3.2.4 torch.numel"></a>3.2.4 torch.numel</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.numel(input)-&gt;int</span><br></pre></td></tr></table></figure> <p>返回input 张量中的元素个数</p> <p>例子:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = torch.randn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.numel(a)</span><br><span class="line"><span class="number">120</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = torch.zeros(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.numel(a)</span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure> <h4 id="3-2-5-torch-set-printoptions-source"><a href="#3-2-5-torch-set-printoptions-source" class="headerlink" title="3.2.5 torch.set_printoptions[source]"></a>3.2.5 torch.set_printoptions[source]</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.set_printoptions(precision=<span class="keyword">None</span>, threshold=<span class="keyword">None</span>, edgeitems=<span class="keyword">None</span>, linewidth=<span class="keyword">None</span>, profile=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure> <p>设置打印选项。 完全参考自 Numpy。</p> <h5 id="参数"><a href="#参数" class="headerlink" title="参数:"></a>参数:</h5><ul> <li>precision – 浮点数输出的精度位数 (默认为8 )</li> <li>threshold – 阈值，触发汇总显示而不是完全显示(repr)的数组元素的总数 （默认为1000）</li> <li>edgeitems – 汇总显示中，每维（轴）两端显示的项数（默认值为3）</li> <li>linewidth – 用于插入行间隔的每行字符数（默认为80）。Thresholded matricies will ignore this parameter.</li> <li>profile – pretty打印的完全默认值。 可以覆盖上述所有选项 (默认为short, full)</li> </ul> <h3 id="3-3-创建操作-Creation-Ops"><a href="#3-3-创建操作-Creation-Ops" class="headerlink" title="3.3 创建操作 Creation Ops"></a>3.3 创建操作 Creation Ops</h3><h4 id="3-3-1-torch-eye"><a href="#3-3-1-torch-eye" class="headerlink" title="3.3.1 torch.eye"></a>3.3.1 torch.eye</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.eye(n, m=<span class="keyword">None</span>, out=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure> <p>返回一个2维张量，对角线位置全1，其它位置全0</p> <h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数:"></a>参数:</h5><ul> <li>n (int ) – 行数</li> <li>m (int, optional) – 列数.如果为None,则默认为n</li> <li>out (Tensor, optinal) - Output tensor</li> </ul> <p>返回值: 对角线位置全1，其它位置全0的2维张量</p> <p>返回值类型: Tensor</p> <p>例子:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.eye(<span class="number">3</span>)</span><br><span class="line"> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">[torch.FloatTensor of size <span class="number">3</span>x3]</span><br></pre></td></tr></table></figure> <p>更多<a href="https://pytorch-cn.readthedocs.io/zh/latest/package_references/torch/" target="_blank" rel="noopener">参考Pytorch 文档</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="//helloindex/"/>
      <url>//helloindex/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p> 基于这章节的想法和具体需要完成的任务如下：</p> <ul> <li>首先是基于深度学习的歌曲分类</li> <li>基于深度学习的目标检测</li> <li>基于深度学习的手写字计算速度改进</li> <li>基于深度学习的人脸识别等例子实现<br>界面设计</li> </ul> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <hr> <h1 id="优秀学者-资源"><a href="#优秀学者-资源" class="headerlink" title="优秀学者/资源"></a>优秀学者/资源</h1><h2 id="学者、教授"><a href="#学者、教授" class="headerlink" title="学者、教授"></a>学者、教授</h2><ul> <li><a href="https://www.uts.edu.au/staff/yida.xu" target="_blank" rel="noopener">徐志强副教授(Associate Professor Richard Xu)</a>,其 <strong><a href="https://github.com/roboticcam" target="_blank" rel="noopener">github主页</a></strong> an AI Professor in Machine Learning at UTS.</li> </ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第一篇博文</title>
      <link href="//thefirstarticle/"/>
      <url>//thefirstarticle/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><center> Porter Pan </center> <h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>欢迎来到我的博文主页，你可以进一步了解我，通过<a href="www.porterpan.tk">聚水渊主页</a> <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> !和我的<a href="https://github.com/smri" target="_blank" rel="noopener">github</a></p> <a id="more"></a> <h3 id="写作目的"><a href="#写作目的" class="headerlink" title="写作目的"></a>写作目的</h3><ul> <li>为了更好的学习</li> <li>每天总结</li> <li>看到自己每天的进步</li> </ul> <blockquote> <p>遇见最优秀的自己，下面是我的其他博客地址</p> </blockquote> <p><a href="https://www.cnblogs.com/pertor/" target="_blank" rel="noopener">我的博客园</a></p> <p><a href="https:---" target="_blank" rel="noopener">我的CSDN</a></p> <p><a href="https://weibo.com/26mod=personinfo&amp;is_all=1" target="_blank" rel="noopener">新浪博客</a></p> <p><a href="http://blog.163.tipertor/" target="_blank" rel="noopener">网易博客</a></p> <h4 id="说说我之前的英文名和现在的英文名"><a href="#说说我之前的英文名和现在的英文名" class="headerlink" title="说说我之前的英文名和现在的英文名"></a>说说我之前的英文名和现在的英文名</h4><p>之前我的firstname 是pertor 现在是porter，不是一个人 ？<br>不，是一个人的，因为pertor是西班牙的名字，porter是英文名字。都是一个人。</p> <hr> <h5 id="我的网易云"><a href="#我的网易云" class="headerlink" title="我的网易云"></a>我的网易云</h5><p>最后我贴下<a href="...">我的网易笔记</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.4 numpy函数</title>
      <link href="//numpyFunc/"/>
      <url>//numpyFunc/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本节主要是学习numpy的函数调用，主要是基础的学习路线，包括简单的实例笔记等。</p> <!-- TOC --> <ul> <li><a href="#摘要">摘要</a><pre><code>- [np.random.rand()函数](#nprandomrand函数) - [语法：](#语法) - [np.random.randn()函数](#nprandomrandn函数) - [语法：](#语法-1) - [np.random.randint()函数](#nprandomrandint函数) - [语法：](#语法-2) </code></pre><ul> <li><a href="#np堆叠数组">np堆叠数组</a><ul> <li><a href="#numpyvstacktup">numpy.vstack(tup)</a><ul> <li><a href="#语法-3">语法：</a></li> </ul> </li> <li><a href="#numpystack">numpy.stack()</a></li> </ul> </li> </ul> </li> </ul> <!-- /TOC --> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h3 id="np-random-rand-函数"><a href="#np-random-rand-函数" class="headerlink" title="np.random.rand()函数"></a>np.random.rand()函数</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><ul> <li>np.random.rand(d0,d1,d2……dn)</li> </ul> <blockquote> <p>注：使用方法与np.random.randn()函数相同 </p> </blockquote> <ul> <li>返回值：</li> </ul> <p>通过本函数可以返回一个或一组服从“0~1”均匀分布的随机样本值。随机样本取值范围是[0,1)，不包括1。 </p> <p><img src="/numpyFunc/np.random.rand_1.png" alt="random.rand"></p> <h3 id="np-random-randn-函数"><a href="#np-random-randn-函数" class="headerlink" title="np.random.randn()函数"></a>np.random.randn()函数</h3><h4 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h4><ul> <li>np.random.randn(d0,d1,d2……dn) </li> </ul> <p>1) 当函数括号内没有参数时，则返回一个浮点数； </p> <p>2) 当函数括号内有一个参数时，则返回秩为1的数组，不能表示向量和矩阵； </p> <p>3) 当函数括号内有两个及以上参数时，则返回对应维度的数组，能表示向量或矩阵； </p> <p>4) np.random.standard_normal（）函数与np.random.randn()类似，但是np.random.standard_normal（）<br>的输入参数为元组（tuple）. </p> <p>5) np.random.randn()的输入通常为整数，但是如果为浮点数，则会自动直接截断转换为整数。</p> <ul> <li>返回值：</li> </ul> <p>通过本函数可以返回一个或一组服从标准正态分布的随机样本值。</p> <ul> <li>特点：</li> </ul> <p>标准正态分布是以0为均值、以1为标准差的正态分布，记为N($\mu, \sigma$)～（0，1）。对应的正态分布曲线如下所示，即 </p> <p><img src="/numpyFunc/np.random.randn_1.jpg" alt="均数为0时"></p> <p>更为具体的示意图如下</p> <p><img src="/numpyFunc/np.random.randn_2.jpg" alt="均值和标准差"></p> <p>代码输出效果如下</p> <p><img src="/numpyFunc/np.random.randn_3.png" alt="均值和标准差"></p> <h3 id="np-random-randint-函数"><a href="#np-random-randint-函数" class="headerlink" title="np.random.randint()函数"></a>np.random.randint()函数</h3><h4 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h4><ul> <li><p>numpy.random.randint(low, high=None, size=None, dtype=’l’) </p> </li> <li><p>输入： </p> </li> </ul> <p>low—–为最小值 </p> <p>high—-为最大值 </p> <p>size—–为数组维度大小 </p> <p>dtype—为数据类型，默认的数据类型是np.int。 </p> <ul> <li>返回值： </li> </ul> <p>返回随机整数或整型数组，范围区间为[low,high），包含low，不包含high； </p> <p>high没有填写时，默认生成随机数的范围是[0，low）</p> <p><img src="/numpyFunc/np.random.randint_1.png" alt="np.random.randint"></p> <hr> <h2 id="np堆叠数组"><a href="#np堆叠数组" class="headerlink" title="np堆叠数组"></a>np堆叠数组</h2><ul> <li>stack()，hstack()，vstack()函数</li> </ul> <h3 id="numpy-vstack-tup"><a href="#numpy-vstack-tup" class="headerlink" title="numpy.vstack(tup)"></a>numpy.vstack(tup)</h3><h4 id="语法：-3"><a href="#语法：-3" class="headerlink" title="语法："></a>语法：</h4><p>np.vstack((a,b))</p> <ul> <li>Parameters:</li> </ul> <p>tup : sequence of ndarrays</p> <p>The arrays must have the same shape along all but the first axis. 1-D arrays must have the same length.</p> <ul> <li>Returns: </li> </ul> <p>stacked : ndarray</p> <p>The array formed by stacking the given arrays, will be at least 2-D.</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.array([[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.array([[<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.vstack((a,b))</span><br><span class="line">array([[<span class="number">1</span>],</span><br><span class="line"> [<span class="number">2</span>],</span><br><span class="line"> [<span class="number">3</span>],</span><br><span class="line"> [<span class="number">2</span>],</span><br><span class="line"> [<span class="number">3</span>],</span><br><span class="line"> [<span class="number">4</span>]])</span><br></pre></td></tr></table></figure> <h3 id="numpy-stack"><a href="#numpy-stack" class="headerlink" title="numpy.stack()"></a>numpy.stack()</h3><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu 中安装sublime_text3</title>
      <link href="//sublime_text3/"/>
      <url>//sublime_text3/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h1 id="Porter-Pan"><a href="#Porter-Pan" class="headerlink" title="Porter Pan"></a><center>Porter Pan</center></h1><h3 id="Enter-“Alt-m”-will-show-Markdown-Preview"><a href="#Enter-“Alt-m”-will-show-Markdown-Preview" class="headerlink" title="Enter “Alt+m” will show Markdown Preview"></a><center>Enter “Alt+m” will show Markdown Preview</center></h3><blockquote> <ul> <li>安装</li> <li>输入注册码</li> <li>汉化</li> <li>安装插件</li> <li>中文输入bug修复</li> </ul> </blockquote> <a id="more"></a> <h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><p>&emsp;&emsp;建议和我一样初学的直接安装，不要直接下载官方的离线包解压了，不然还得自己配置什么dash中显示，什么的环境配置乱七八糟的</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、 wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -</span><br><span class="line">2、 sudo apt-get install apt-transport-https</span><br><span class="line">3、 echo &quot;deb https://download.sublimetext.com/ apt/stable/&quot; | sudo tee /etc/apt/sources.list.d/sublime-text.list</span><br><span class="line">4、 sudo apt-get update</span><br><span class="line">5、 sudo apt-get install sublime-text</span><br></pre></td></tr></table></figure> <h2 id="1-2-输入注册码"><a href="#1-2-输入注册码" class="headerlink" title="1.2 输入注册码"></a>1.2 输入注册码</h2><p>&emsp;&emsp;在输入注册码之前先更改hosts，ubuntu中hosts位于： vim /etc/hosts或者gedit /etc/hosts<br>,然后加入如下两行</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、 127.0.0.1 www.sublimetext.com</span><br><span class="line">2、 127.0.0.1 license.sublimehq.com</span><br></pre></td></tr></table></figure> <p>&emsp;&emsp;然后保存，此时dash中输入sublime，找到我们安装的软件，打开后在界面菜单中选择help–&gt;enter license，然后输入如下注册码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----- BEGIN LICENSE -----</span><br><span class="line">sgbteam</span><br><span class="line">Single User License</span><br><span class="line">EA7E-1153259</span><br><span class="line">8891CBB9 F1513E4F 1A3405C1 A865D53F</span><br><span class="line">115F202E 7B91AB2D 0D2A40ED 352B269B</span><br><span class="line">76E84F0B CD69BFC7 59F2DFEF E267328F</span><br><span class="line">215652A3 E88F9D8F 4C38E3BA 5B2DAAE4</span><br><span class="line">969624E7 DC9CD4D5 717FB40C 1B9738CF</span><br><span class="line">20B3C4F1 E917B5B3 87C38D9C ACCE7DD8</span><br><span class="line">5F7EF854 86B9743C FADC04AA FB0DA5C0</span><br><span class="line">F913BE58 42FEA319 F954EFDD AE881E0B</span><br><span class="line">------ END LICENSE ------</span><br></pre></td></tr></table></figure></p> <p>点击确定，然后就可以 enjoy it!</p> <p> 在这还没结束，下面开始<strong>汉化</strong></p> <h1 id="1-3-汉化"><a href="#1-3-汉化" class="headerlink" title="1.3 汉化"></a>1.3 汉化</h1><p> &emsp;&emsp;打开软件，直接按下“shift+ctrl+p”在弹出的框内输入<strong>ip</strong>,然后点击”package control：install pakage”,出来后输入”Chinese​Localizations”来安装<strong>Chinese​Localizations</strong>插件，然后重启，至此汉化结束。</p> <h1 id="1-4-安装markdown插件"><a href="#1-4-安装markdown插件" class="headerlink" title="1.4 安装markdown插件"></a>1.4 安装markdown插件</h1><p> &emsp;&emsp;在软件界面输入“shift+ctrl+p”,然后输入“ip”，然后选择，packageinstall ，然后输入“Markdown Editing“ + ”MarkdownLivePreview”,分别安装上，然后新建md文件，在编辑界面输入“alt+m”,则进入markdown preview实时显示模式。</p> <h1 id="1-5-解决Markdown不能输入汉字的问题"><a href="#1-5-解决Markdown不能输入汉字的问题" class="headerlink" title="1.5 解决Markdown不能输入汉字的问题"></a>1.5 解决Markdown不能输入汉字的问题</h1><p>打开终端：</p> <p>在终端中输入以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/lyfeyaj/sublime-text-imfix.git</span><br><span class="line">cd sublime-text-imfix &amp;&amp; ./sublime-imfix</span><br></pre></td></tr></table></figure></p> <p>或者直接进入github的这个<a href="https://github.com/lyfeyaj/sublime-text-imfix.git" target="_blank" rel="noopener">仓库</a>：直接下载这个zip包，然后解压，然后在终端中cd到这个解压后的文件夹路径中，最后是在终端中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sublime-imfix</span><br></pre></td></tr></table></figure></p> <p>此时重启sublimetext3 然后就可以进行汉字的输入了。</p> <h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://blog.csdn.net/qq_41590417/article/details/80461075" target="_blank" rel="noopener">https://blog.csdn.net/qq_41590417/article/details/80461075</a></p> <p><a href="https://blog.csdn.net/woaidouya123/article/details/81476551" target="_blank" rel="noopener">https://blog.csdn.net/woaidouya123/article/details/81476551</a></p> <p><a href="https://www.cnblogs.com/james-lee/p/6847906.html" target="_blank" rel="noopener">https://www.cnblogs.com/james-lee/p/6847906.html</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> sublime-text </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 每次写好后deploy博客</title>
      <link href="//hexoDeploy/"/>
      <url>//hexoDeploy/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><center> Porter Pan </center> <h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>github page 结合Hexo-Yelee或者Next主题,搭建个人博客主页，是很不错的一个选择，个人使用情况，感觉Yelee界面布局啥的还是很不错的。</p> <p>这篇文章中我将介绍每次我们写好的md博文怎么部署到github page 上去。</p> <hr> <p>本文主要使用的命令行如下：</p> <ul> <li>1、直接部署到网站</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure> <a id="more"></a> <p>也可以本地部署，查看浏览效果</p> <ul> <li>2、部署到本地，查看浏览效果</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure> <h2 id="我们每次写好的博文如何正确推送至github"><a href="#我们每次写好的博文如何正确推送至github" class="headerlink" title="我们每次写好的博文如何正确推送至github"></a>我们每次写好的博文如何正确推送至github</h2><p>每次我们写好了博文后，需要上传至我们的github空间中,只需要每次将我们写好的博文放到文件路径：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Github\smritipertor.github.io\source\_posts</span><br></pre></td></tr></table></figure></p> <p>如果之前没有安装过<br><strong> hexo-deployer-git </strong><br>的话，先执行：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure> <p>然后执行如下命令操作：</p> <ul> <li>首先在你之前建好的博文路径：比如我的是</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line">hexo s //(或者:hexo server)</span><br><span class="line"></span><br><span class="line">hexo deploy //(或者:hexo d)</span><br></pre></td></tr></table></figure> <h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul> <li>一般我们在站点根目录中的“_config.yml”中的文件中设定我们hexo d，的部署文件到那个ID和分支中，设置内容如下：</li> <li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> type: git </span><br><span class="line"> repository: https://github.com/smritipertor/smritipertor.github.io.git</span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure> </li> </ul> <blockquote> <p>以上内容表示，不管我们当前工作在那个分区，只要站点根目录中的“_config.yml”中branch 分区设置好，直接</p> </blockquote> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure> <blockquote> <p>就可以发布了。</p> </blockquote> <p>如果你执行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate -d</span><br></pre></td></tr></table></figure></p> <h2 id="常见错误及解决办法"><a href="#常见错误及解决办法" class="headerlink" title="常见错误及解决办法"></a>常见错误及解决办法</h2><h3 id="第一种，部署出错"><a href="#第一种，部署出错" class="headerlink" title="第一种，部署出错"></a>第一种，部署出错</h3><p>出现错误提示，如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: in unpopulated submodule '.deploy_git' FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html Error: fatal: in unpopulated submodule '.deploy_git' at ChildProcess.&lt;anonymous&gt; (D:\GitWebsite\smritipertor.github.io\node_modules\hexo-util\lib\spawn.js:37:17) at ChildProcess.emit (events.js:182:13) at ChildProcess.cp.emit (D:\GitWebsite\smritipertor.github.io\node_modules\cross-spawn\lib\enoent.js:40:29) at maybeClose (internal/child_process.js:962:16) at Process.ChildProcess._handle.onexit (internal/child_process.js:251:5)</span><br></pre></td></tr></table></figure></p> <p>则你可以直接执行以下命令即可：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .deploy_git</span><br><span class="line">hexo generate -d</span><br></pre></td></tr></table></figure> <p>即，删除地电脑本地的.deploy_git文件夹（可能是你上个版本是另一台电脑），然后再生成、部署即可。</p> <h3 id="至此你的网站上就有了网站数据"><a href="#至此你的网站上就有了网站数据" class="headerlink" title="至此你的网站上就有了网站数据"></a>至此你的网站上就有了网站数据</h3><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blogs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搜索技巧</title>
      <link href="//searchskill/"/>
      <url>//searchskill/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本篇文章笔记总结来自网络和书本，引用部分都有来源，内容主要介绍百度搜索技巧和google的搜索技巧。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h1 id="关于搜索技巧"><a href="#关于搜索技巧" class="headerlink" title=" 关于搜索技巧 "></a><center> <font color="#3366ff">关于搜索技巧 </font></center></h1><div style="text-align: right"><br> &copy;date:2017年9月1日<br></div> <h2 id="1-百度搜索技巧"><a href="#1-百度搜索技巧" class="headerlink" title="1 百度搜索技巧"></a>1 百度搜索技巧</h2><h3 id="1-1-高级搜索语法"><a href="#1-1-高级搜索语法" class="headerlink" title="1.1 高级搜索语法"></a><font color="#ff5050">1.1 高级搜索语法</font></h3><p></p> <ul> <li>1.1 英文短语搜索（” ”）</li> </ul> <blockquote> <font color="#0000ff">引号中的关键词将作为一个整体在搜索结果中出现。双引号中的词语（比如”like this”）<br></font> </blockquote> <p><a href="https://imgchr.com/i/iqTJSg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/11/iqTJSg.md.png" alt="iqTJSg.md.png"></a></p> <hr> <p><a href="https://imgchr.com/i/iqTamn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/11/iqTamn.md.png" alt="iqTamn.md.png"></a></p> <ul> <li>1.2 指定网域</li> </ul> <blockquote> <font color="#0000ff">有一些词后面加上冒号对Google有特殊的含义。其中有一个词是“site:”。要在某个特定的域或站点中进行搜索，可以在Google搜索框“site xxxx.com”。<br></font> </blockquote> <blockquote> <p>例如，要在Google 站点上查找新闻，可以输入：新闻site:<a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a></p> </blockquote> <p><a href="https://imgchr.com/i/iqTBkV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/11/iqTBkV.md.png" alt="iqTBkV.md.png"></a></p> <hr> <p><img src="https://s1.ax1x.com/2018/11/11/iqTDYT.png" alt="iqTDYT.png"></p> <ul> <li>1.3 查找特定文件</li> </ul> <blockquote> <p><font color="#0000ff">Google已经可以支持13种非HTML文件的搜索:PDF文件、Microsoft Office (doc, ppt, xls, rtf）、Shockwave Flash (swf)PostScript(ps)和其它类型文档。</font></p> </blockquote> <blockquote> <p>新的文档类型只要与用户的搜索相关，就会自动显示在搜索结果中。例如，如果您只想查找PDF或Flash 文件，而不要一般网页，只需搜索 <strong>“关键词filetype:pdf”</strong> 或 <strong>“关键词filetype:swf”</strong> 就可以了。<br></p> </blockquote> <p><img src="https://s1.ax1x.com/2018/11/11/iqTrfU.png" alt="iqTrfU.png"></p> <p><img src="https://s1.ax1x.com/2018/11/11/iqT6l4.png" alt="iqT6l4.png"></p> <ul> <li>1.4 按链接搜索</li> </ul> <blockquote> <p><font color="0x0000ff">例如，“link:<a href="http://www.google.com”将找出所有指向Google主页的网页。不能将link:搜索与普通关键词搜索结合使用。" target="_blank" rel="noopener">www.google.com”将找出所有指向Google主页的网页。不能将link:搜索与普通关键词搜索结合使用。</a></font></p> </blockquote> <p><img src="https://s1.ax1x.com/2018/11/11/iqTc6J.png" alt="iqTc6J.png"></p> <p><a href="https://imgchr.com/i/iqTgX9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/11/iqTgX9.md.png" alt="iqTgX9.md.png"></a></p> <ul> <li>1.5 限定关键词只在标题中</li> </ul> <p>&emsp;&emsp;例如“allintitle：中国苹果”表示“中国”和“苹果”都必须出现在标题中“intitle：中国苹果”表示“中国”必须出现在标题中，“苹果”可以出现在网页的任意位置，可以是标题也可以不是。。</p> <p><img src="https://s1.ax1x.com/2018/11/11/iqTW01.png" alt="iqTW01.png"></p> <p><img src="https://s1.ax1x.com/2018/11/11/iqTfTx.png" alt="iqTfTx.png"></p> <ul> <li>1.6 限定关键词只在URL中</li> </ul> <p>&emsp;&emsp;例如 <strong>“allinURL：koko com”</strong> 表示 <strong>“koko”</strong> 和 <strong>“com“</strong> 都必须出现在URL中 <strong>“inURL：koko com”</strong> 表示 <strong>“koko”</strong> 必须出现在URL中， <strong>“com”</strong> 可以出现在网页的任意位置，可以是URL也可以不是。。</p> <ul> <li>1.7 Info用来显示与某链接相关的一系列搜索<br>提供cache、link、related和完全包含该链接的网页的功能。</li> </ul> <ul> <li>1.8 Related</li> </ul> <p>&emsp;&emsp;用来搜索结构内容方面相似的网页<br>例:搜索所有与中文新浪网主页相似的页面(如网易首页，搜狐首页，中华网首页等)，“related:<a href="http://www.sina.com.cn”。" target="_blank" rel="noopener">www.sina.com.cn”。</a>.<br>9、Cache用来搜索GOOGLE服务器上某页面的缓存<br>这个功能同“网页快照”，通常用于查找某些已经被删除的死链接网页，相当于使用普通搜索结果页面中的“网页快照”功能。</p> <h2 id="二、百度（baidu）搜索高级语法"><a href="#二、百度（baidu）搜索高级语法" class="headerlink" title="二、百度（baidu）搜索高级语法"></a>二、百度（baidu）搜索高级语法</h2><h4 id="2-1-把搜索范围限定在网页标题中——intitle"><a href="#2-1-把搜索范围限定在网页标题中——intitle" class="headerlink" title="2.1 把搜索范围限定在网页标题中——intitle"></a>2.1 把搜索范围限定在网页标题中——intitle</h4><p>网页标题通常是对网页内容提纲挈领式的归纳。把查询内容范围限定在网页标题中，有时能获得良好的效果。使用的方式，是把查询内容中，特别关键的部分，用“intitle:”领起来。<br>例如，找林青霞的写真，就可以这样查询：写真intitle:林青霞注意，intitle:和后面的关键词之间，不要有空格。</p> <h4 id="2-2-把搜索范围限定在特定站点中——site"><a href="#2-2-把搜索范围限定在特定站点中——site" class="headerlink" title="2.2 把搜索范围限定在特定站点中——site"></a>2.2 把搜索范围限定在特定站点中——site</h4><p>有时候，您如果知道某个站点中有自己需要找的东西，就可以把搜索范围限定在这个站点中，提高查询效率。使用的方式，是在查询内容的后面，加上“site:站点域名”。<br>例如，天空网下载软件不错，就可以这样查询：msn site:skycn.com 注意，“site:”后面跟的站点域名，不要带“http://”；另外site:和站点名之间，不要带空格。</p> <h4 id="2-3-把搜索范围限定在url链接中——inurl"><a href="#2-3-把搜索范围限定在url链接中——inurl" class="headerlink" title="2.3 把搜索范围限定在url链接中——inurl"></a>2.3 把搜索范围限定在url链接中——inurl</h4><p>网页url中的某些信息，常常有某种有价值的含义。于是，您如果对搜索结果的url做某种限定，就可以获得良好的效果。实现的方式，是用“inurl:”，后跟需要在url中出现的关键词。<br>例如，找关于photoshop的使用技巧，可以这样查询：photoshop inurl:jiqiao 上面这个查询串中的“photoshop”，是可以出现在网页的任何位置，而“jiqiao”则必须出现在网页url中。<br>注意，inurl:语法和后面所跟的关键词，不要有空格。</p> <p><a href="https://imgchr.com/i/iqT4k6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/11/iqT4k6.md.png" alt="iqT4k6.md.png"></a></p> <h4 id="2-4-精确匹配——双引号和书名号"><a href="#2-4-精确匹配——双引号和书名号" class="headerlink" title="2.4 精确匹配——双引号和书名号"></a>2.4 精确匹配——双引号和书名号</h4><blockquote> <p><strong>双引号和书名号</strong><br>如果输入的查询词很长，百度在经过分析后，给出的搜索结果中的查询词，可能是拆分的。如果您对这种情况不满意，可以尝试让百度不拆分查询词。给查询词加上双引号，就可以达到这种效果。</p> </blockquote> <p>&emsp;&emsp;例如，搜索上海科技大学，如果不加双引号，搜索结果被拆分，效果不是很好，但加引号后，“上海科技大学”，获得的结果就全是符合要求的了。</p> <p>&emsp;&emsp;书名号是百度独有的一个特殊查询语法。在其他搜索引擎中，书名号会被忽略，而在百度，中文书名号是可被查询的。</p> <p>&emsp;&emsp;加上书名号的查询词，有两层特殊功能，一是书名号会出现在搜索结果中；二是被书名号扩起来的内容，不会被拆分。书名号在某些情况下特别有效果，例如，查名字很通俗和常用的那些电影或者小说。比如，查电影“手机”，如果不加书名号，很多情况下出来的是通讯工具——手机，而加上书名号后，《手机》结果就都是关于电影方面的了。</p> <h4 id="2-5-要求搜索结果中不含特定查询词"><a href="#2-5-要求搜索结果中不含特定查询词" class="headerlink" title="2.5 要求搜索结果中不含特定查询词"></a>2.5 要求搜索结果中不含特定查询词</h4><p>&emsp;&emsp;如果您发现搜索结果中，有某一类网页是您不希望看见的，而且，这些网页都包含特定的关键词，那么用减号语法，就可以去除所有这些含有特定关键词的网页。</p> <p>&emsp;&emsp;例如，搜神雕侠侣，希望是关于武侠小说方面的内容，却发现很多关于电视剧方面的网页。那么就可以这样查询：神雕侠侣-电视剧。</p> <ul> <li><font color="0xff0000">注意，前一个关键词，和减号之间必须有空格，否则，减号会被当成连字符处理，而失去减号语法功能。减号和后一个关键词之间，有无空格均可。<br></font> </li> </ul> <h4 id="2-6-专业文档搜索"><a href="#2-6-专业文档搜索" class="headerlink" title="2.6 专业文档搜索"></a>2.6 专业文档搜索</h4><p>&emsp;&emsp;很多有价值的资料，在互联网上并非是普通的网页，而是以Word、PowerPoint、PDF等格式存在。百度支持对Office文档（包括Word、 Excel、Powerpoint）、Adobe PDF文档、RTF文档进行了全文搜索。要搜索这类文档，很简单，在普通的查询词后面，加一个“filetype：”文档类型限定。“Filetype:”后可以跟以下文件格式：DOC、XLS、PPT、PDF、RTF、ALL。其中，ALL表示搜索所有这些文件类型。例如，查找张五常关于交易费用方面的经济学论文。“交易费用张五常filetype:doc”，点击结果标题，直接下载该文档，也可以点击标题后的“HTML版”快速查看该文档的网页格式内容。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>git 推送新的文章到github其他分支上</title>
      <link href="//gitpush/"/>
      <url>//gitpush/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="Porter-Pan"><a href="#Porter-Pan" class="headerlink" title=" Porter Pan "></a><center> Porter Pan </center></h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>每次编辑博文并通过命令部署网站到github page上时，我们想每天都能将改动后的博文备份到github的一个分支上，实现本地数据同步到云仓库中。</p> <ul> <li>实现本地博客云同步到github page其他分支上</li> <li>实现本地博客部署到github page上的master分支上</li> </ul> <p><img src="https://s1.ax1x.com/2018/11/10/iqZ6KJ.png" alt="我的博客网站"></p> <a id="more"></a> <h2 id="网站部署（建议隔段时间再部署到网站上，短时间内直接部署本地，本地浏览下就好"><a href="#网站部署（建议隔段时间再部署到网站上，短时间内直接部署本地，本地浏览下就好" class="headerlink" title="网站部署（建议隔段时间再部署到网站上，短时间内直接部署本地，本地浏览下就好"></a>网站部署（建议隔段时间再部署到网站上，短时间内直接部署本地，本地浏览下就好</h2><h3 id="部署到网上"><a href="#部署到网上" class="headerlink" title="部署到网上"></a>部署到网上</h3><ul> <li>直接部署到github page的master上</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 git <span class="built_in">clone</span> -b proworking &lt;我的github网站仓库:proworking&gt;</span><br><span class="line">2 git pull origin proworking <span class="comment">#从我的工作分支更新最新的博文和站点配置文件</span></span><br><span class="line">3 git checkout master <span class="comment">#将我们的本地切换到master分支</span></span><br><span class="line">4 <span class="comment">#此处开始加入你的博文.md到站点的：\source\_posts文件夹中</span></span><br><span class="line">5 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure> <h3 id="部署到本地"><a href="#部署到本地" class="headerlink" title="部署到本地"></a>部署到本地</h3><ul> <li>本地部署，本地浏览效果</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 git <span class="built_in">clone</span> -b proworking &lt;我的github网站仓库:proworking&gt;</span><br><span class="line">2 git checkout master <span class="comment">#将我们的本地切换到master分支</span></span><br><span class="line">3 <span class="comment">#此处开始加入你的博文.md到站点的：\source\_posts文件夹中</span></span><br><span class="line">4 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure> <blockquote> <p>实现从github上获取我仓库中的Proworking分支数据，病拉取到我的本地</p> </blockquote> <ul> <li>将本地的博文再重新push到我的云仓库（proworking)</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"添加了：file1.md\file2.md"</span></span><br><span class="line">git push origin HEAD:proworking <span class="comment">#一定要添加HEAD 不然会</span></span><br></pre></td></tr></table></figure> <hr> <h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><blockquote> <p>下面贴上我遇到的问题</p> </blockquote> <ul> <li>[1] 若果你直接输入命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push proworking</span><br></pre></td></tr></table></figure> </li> </ul> <p>可能会出现如下的不正常信息：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Pertor@Pertor-PC MINGW64 /d/Github/smritipertor.github.io (master)</span><br><span class="line">$ git push proworking</span><br><span class="line"></span><br><span class="line">fatal: <span class="string">'proworking'</span> does not appear to be a git repository</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure> <p>正确的解决办法是，命令中输入如下代码（加HEAD)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pertor@Pertor-PC MINGW64 /d/Github/smritipertor.github.io (master)</span><br><span class="line">$ git push origin HEAD:proworking</span><br></pre></td></tr></table></figure> <p>此时会输出正确的提示，具体提示信息如下：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Enumerating objects: 1498, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (1480/1480), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (1219/1219), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (1461/1461), 1.17 MiB | 390.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 1461 (delta 187), reused 1300 (delta 139)</span><br><span class="line">remote: Resolving deltas: 100% (187/187), completed with 10 <span class="built_in">local</span> objects.</span><br><span class="line">To https://github.com/smritipertor/smritipertor.github.io.git</span><br><span class="line"> 06b21dd..1ff56b7 HEAD -&gt; proworking</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu18 正确 安装ShadowSocket</title>
      <link href="//fanqiangss/"/>
      <url>//fanqiangss/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="ubuntu18-正确安装shadowsocket"><a href="#ubuntu18-正确安装shadowsocket" class="headerlink" title=" ubuntu18 正确安装shadowsocket "></a><center> ubuntu18 正确安装shadowsocket </center></h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>为达到能够自由访问全球学习资料，我可谓是绞尽脑汁莫寻方法，目前能做到的除了付费包月的vpn代理机构的，就只能是自己动手自己干的了，但是自己搞旺旺会出很多问题，本文结合晴子实践的经验，将所遇到的问题都一一列下并解决。</p> <p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1541859694666&amp;di=4157a8d46151dfea7b45b6b0e6277d61&amp;imgtype=0&amp;src=http%3A%2F%2Fwenwen.soso.com%2Fp%2F20120619%2F20120619102239-1814974902.jpg" alt="Socket5"></p> <a id="more"></a> <h2 id="1、正常的安装步骤（ubuntu16版本）"><a href="#1、正常的安装步骤（ubuntu16版本）" class="headerlink" title="1、正常的安装步骤（ubuntu16版本）"></a>1、正常的安装步骤（ubuntu16版本）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* Ctrl+Alt+T打开终端，输入以下命令安装好GUI界面shadowsocks-qt5</span><br><span class="line">* sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line">* sudo apt-get update</span><br><span class="line">* sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure> <ul> <li>但是Ubuntu18.04在安装shadowsocks-qt5时就会出现错误</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">仓库 “http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu bionic Release” 没有 Release 文件</span><br></pre></td></tr></table></figure> <h1 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h1><ul> <li>ppa:hzwhuang/ss-qt5 并没有18.04版本的源</li> </ul> <h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><h3 id="第一步、修改sources-list-d下文件名"><a href="#第一步、修改sources-list-d下文件名" class="headerlink" title="第一步、修改sources.list.d下文件名"></a>第一步、修改sources.list.d下文件名</h3><p>修改/etc/apt/sources.list.d/hzwhuang-ubuntu-ss-qt5-bionic.list文件，将bionic（18.04版本代号）改成xenial（16.04版本代号）</p> <h3 id="第二步、设置如下图"><a href="#第二步、设置如下图" class="headerlink" title="第二步、设置如下图"></a>第二步、设置如下图</h3><blockquote> <blockquote> <ul> <li>bash 中打开<br><strong>软件更新器</strong> —&gt; <strong>设置</strong> —&gt; <strong>其他软件</strong> –&gt;</li> </ul> </blockquote> </blockquote> <blockquote> <blockquote> <ul> <li>编辑：<a href="http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu" target="_blank" rel="noopener">http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu</a></li> </ul> </blockquote> </blockquote> <p><img src="https://i.loli.net/2018/10/22/5bcdcb28d4124.png" alt="编辑发行版"></p> <p><strong> 将发行版改为xenial </strong>,如上图所示。</p> <h2 id="然后再执行"><a href="#然后再执行" class="headerlink" title="然后再执行"></a>然后再执行</h2><ul> <li>sudo apt-get update</li> <li>sudo apt-get install shadowsocks-qt5 </li> </ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Socket5 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python Tkinter 界面实现套接字（socket) 通信</title>
      <link href="//pyqttkinter/"/>
      <url>//pyqttkinter/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><center> Porter Pan </center> <h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><a id="more"></a><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> GUI </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.8 深度学习环境搭建</title>
      <link href="//DLenviremment/"/>
      <url>//DLenviremment/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了1.8 深度学习环境搭建，安装CUDA，安装NVIDIA驱动，pytorch，caffe框架等等。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="深度学习环境搭建"><a href="#深度学习环境搭建" class="headerlink" title="深度学习环境搭建"></a>深度学习环境搭建</h1><h2 id="一、安装CUDA运算平台-NVIDIA驱动"><a href="#一、安装CUDA运算平台-NVIDIA驱动" class="headerlink" title="一、安装CUDA运算平台+NVIDIA驱动"></a>一、安装CUDA运算平台+NVIDIA驱动</h2><p>这些安装的方法很简单，官方网站有具体的安装过程，这里一步带过</p> <p><img src="/image1/CUDA_Instal.jpeg" alt="CUDA安装"></p> <p><img src="/image1/NVIDIA_Instal.jpeg" alt="NVIDIA_Instal.jpeg"></p> <h3 id="1-1-软件简介"><a href="#1-1-软件简介" class="headerlink" title="1.1 软件简介"></a>1.1 软件简介</h3><h3 id="1-2-安装步骤"><a href="#1-2-安装步骤" class="headerlink" title="1.2 安装步骤"></a>1.2 安装步骤</h3><h2 id="二、安装PyTorch"><a href="#二、安装PyTorch" class="headerlink" title="二、安装PyTorch"></a>二、安装PyTorch</h2><h3 id="2-1-环境简介"><a href="#2-1-环境简介" class="headerlink" title="2.1 环境简介"></a>2.1 环境简介</h3><p>CUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。CUDA™是一种由NVIDIA推出的通用并行计算架构，该架构使GPU能够解决复杂的计算问题。 它包含了CUDA指令集架构（ISA）以及GPU内部的并行计算引擎。 开发人员现在可以使用C语言来为CUDA™架构编写程序，C语言是应用最广泛的一种高级编程语言。所编写出的程序可以在支持CUDA™的处理器上以超高性能运行。CUDA3.0已经开始支持C++和FORTRAN。</p> <p>—-来自百度百科</p> <p>NVIDIA（纳斯达克股票代码：NVDA）是一家人工智能计算公司 。公司创立于 1993 年，总部位于美国加利福尼亚州圣克拉拉市。Jensen Huang (黄仁勋) 是创始人兼首席执行官。 </p> <p>Ultra：Nvidia的旗舰级产品，为本系列中的最强者。</p> <p>GTX：其性能介于GTS和Ultra之间。一般为Nvidia首发的高端产品。</p> <p>GTS：始终为Nvidia第三强的产品(GeForce 2 GTS与GeForce 8800GTS均可展示出来)，性能处于GTX之下，与GT相比有些模糊。</p> <p>GT：频率提升版本”GeForce Technology”的缩写，频率和管线都较LE GS SE XT有较大的提升</p> <p>GS：相比GT，渲染管线或者显存位宽的缩减，频率一般在GT之下，并且由于规格限制，性能在GT之下。</p> <p>LE:”Limit Edition”的缩写，表示限制版本，代表某一产系列中的入门级产品，主要是频率和规格均与标准版本相比有一定的下降。</p> <p>SE：在Nvidia卡中不常出现，与LE相似。</p> <p>XT:”Cost Down”表示降频率版本，将标准版的频率降低，部分产品削减了管线。</p> <p>由于我在笔记本上安装的，是NVIDIA GeForce 系列，所以不介绍其他的了。</p> <p>配有NVIDIA GeForce 系列GPU的台式电脑和笔记本电脑带给用户无法比拟的性能，明快的照片，高清晰的视频回放，和超真实效果的游戏。GeForce 系列的笔记本GPU还包括先进的耗电管理技术，这种技术可以在不过分耗费电池的前提下保证高性能。</p> <h3 id="2-2-安装方法"><a href="#2-2-安装方法" class="headerlink" title="2.2 安装方法"></a>2.2 安装方法</h3><p>CUDA安装方法:linux中打开终端按照下面代码这个过程走完就好了<br><a href="https://developer.nvidia.com/cuda-zone" target="_blank" rel="noopener">CUDA 平台网站</a></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Installation Instructions:</span><br><span class="line">`sudo dpkg -i cuda-repo-ubuntu1804-10-0-local-10.0.130-410.48_1.0-1_amd64.deb`</span><br><span class="line">`sudo apt-key add /var/cuda-repo-&lt;version&gt;/7fa2af80.pub`</span><br><span class="line">`sudo apt-get update`</span><br><span class="line">`sudo apt-get install cuda`</span><br></pre></td></tr></table></figure> <p><a href="https://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">NVIDIA驱动</a></p> <p>-[x] Ubuntu装好CUDA之后过段时间提示NVIDIA-SMI has failed because it couldn’t communicate with the NVIDIA driver.</p> <p>直接进入boot引导界面，选择关闭安全模式即可解决。</p> <h3 id="2-3-使用说明"><a href="#2-3-使用说明" class="headerlink" title="2.3 使用说明"></a>2.3 使用说明</h3><h2 id="三、-caffe框架安装"><a href="#三、-caffe框架安装" class="headerlink" title="三、 caffe框架安装"></a>三、 caffe框架安装</h2><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Conf </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.7 gitbook 插件等相关设置</title>
      <link href="//gitbookplugset/"/>
      <url>//gitbookplugset/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了1.7 gitbook 插件等相关设置，解决gitbook不支持latex公式等问题。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="gitbook-插件等相关配置"><a href="#gitbook-插件等相关配置" class="headerlink" title="gitbook 插件等相关配置"></a>gitbook 插件等相关配置</h1><h2 id="插件安装配置方法"><a href="#插件安装配置方法" class="headerlink" title="插件安装配置方法"></a>插件安装配置方法</h2><p>在你gitbook更目录中编辑book.json文件，文件配置好后，不会生效，需要先执行命令</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook install <span class="comment"># 安装命令</span></span><br></pre></td></tr></table></figure> <p>然后执行如下命令进行编译</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook build</span><br></pre></td></tr></table></figure> <h2 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h2><ul> <li>图和流程图(甘特图之类的)</li> </ul> <p><a href="https://plugins.gitbook.com/plugin/mermaid" target="_blank" rel="noopener">Mermaid 的 plugins地址</a>, <a href="https://github.com/knsv/mermaid" target="_blank" rel="noopener">Mermaid 的github地址</a></p> <p><img src="/image1/Plugins_Mermaid.png" alt="Mermaid"></p> <ul> <li>安装方法，在book.json加入以下内容，然后gitbook install</li> </ul> <p>{<br> “plugins”: [“mermaid”]<br>}</p> <p>graph TD;<br> A–&gt;B;<br> A–&gt;C;<br> B–&gt;D;<br> C–&gt;D;</p> <p>classDiagram<br>Class01 &lt;|– AveryLongClass : Cool<br>Class03 <em>– Class04<br>Class05 o– Class06<br>Class07 .. Class08<br>Class09 –&gt; C2 : Where am i?<br>Class09 –</em> C3<br>Class09 –|&gt; Class07<br>Class07 : equals()<br>Class07 : Object[] elementData<br>Class01 : size()<br>Class01 : int chimp<br>Class01 : int gorilla<br>Class08 <--> C2: Cool label</--></p> <ul> <li>具体使用<a href="https://github.com/knsv/mermaid" target="_blank" rel="noopener">帮助文档请移步github</a></li> </ul> <h3 id="KaTex"><a href="#KaTex" class="headerlink" title="KaTex"></a>KaTex</h3><p>为了支持数学公式, 我们可以使用KaTex和MathJax插件, 官网上说Katex速度要快于MathJax</p> <p><a href="https://plugins.gitbook.com/plugin/katex" target="_blank" rel="noopener">插件地址</a></p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"plugins": [</span><br><span class="line"> <span class="string">"katex"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure> <p>用法：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Inline math: $$\int_&#123;-\infty&#125;^\infty g(x) dx$$</span><br><span class="line"></span><br><span class="line">Block math:</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\int_&#123;-\infty&#125;^\infty g(x) dx</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">Or using the templating syntax:</span><br><span class="line"></span><br><span class="line">&#123;% math %&#125;\int_&#123;-\infty&#125;^\infty g(x) dx&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure> <h3 id="安装视屏播放插件"><a href="#安装视屏播放插件" class="headerlink" title="安装视屏播放插件"></a>安装视屏播放插件</h3><p><a href="https://plugins.gitbook.com/plugin/chinese-video" target="_blank" rel="noopener">chinese-video</a></p> <p>Install<br>Add the below to your book.json file, then run gitbook install :</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">"plugins"</span>: [<span class="string">"chinese-video"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>Usage<br>Currently, This plugin support:</p> <p>Bilibili<br>Youku<br>Iqiyi<br>QQ<br>Sohu<br>Mgtv<br>PPTV<br>There are each methods which you should use to insert matched website’s video.</p> <p>Tips:</p> <p>[xxx] is optional parameter. You can ignore it but don’t ignore any @.<br>The width x height, which is defined by you, is the largest size of the player and if you have a small screen to look through the page, Page will zoom the player with the scale of your width x height.<br>Bilibili<br>html5 https</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bilibili %&#125; avCode @ [section] @ [width x height] &#123;% endbilibili %&#125;</span><br></pre></td></tr></table></figure> <p>avCode is bilibili video’s serial number. Just like this: <a href="https://www.bilibili.com/video/av" target="_blank" rel="noopener">https://www.bilibili.com/video/av</a> 170001</p> <p>avCode should be a number. Don’t attach “av” to it.</p> <p>section is matched video’s sub video’s serial number.</p> <p>width x height is player’s size.</p> <p>Youku<br>html5 flash https</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youku %&#125; videoCode @ [mode] @ [width x height] &#123;% endyouku %&#125;</span><br></pre></td></tr></table></figure> <p>mode is player’s mode. js(html5) or flash.</p> <p>videoCode just like this: <a href="https://v.youku.com/v_show/id" target="_blank" rel="noopener">https://v.youku.com/v_show/id</a>_ XNDU4MjQ3MzA0 .html</p> <p>width x height is player’s size.</p> <p>Iqiyi<br>html5 flash https(HTML5 player) http(Flash player)</p> <p>Iqiyi’s parameter just like shit!!!</p> <p>Flash player</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iqiyi %&#125; flash @ parameter1 @ video @ albumId @ tvId @ [width x height] &#123;% endiqiyi %&#125;</span><br></pre></td></tr></table></figure> <p>flash is key word. Don’t change it.</p> <p>You only can visit Iqiyi’s video’s Sharing page and copy its HTML to get these parameters. It just like this:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bilibili %&#125; <span class="number">170001</span> @ [section] @ [<span class="number">640</span> x <span class="number">480</span>] &#123;% endbilibili %&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Conf </tag>
            
            <tag> Gitbook </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.1.2 Pytorch 之MNIST手写字识别分类.md</title>
      <link href="//pytorchMNIST/"/>
      <url>//pytorchMNIST/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录的是学习Pytorch 之MNIST手写字识别分类过程实现的笔记，包括MNIST分类实现的算法定义和代码实现。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <h1 id="一、MNIST"><a href="#一、MNIST" class="headerlink" title="一、MNIST"></a>一、MNIST</h1><p>MNIST数据集是一个关于手写的数字识别的数据集，详见<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">MNIST数据集官网</a></p> <h2 id="1-1-数据集介绍"><a href="#1-1-数据集介绍" class="headerlink" title="1.1 数据集介绍"></a>1.1 数据集介绍</h2><p><img src="/image3/MNIST_1.png" alt="MNIST数据集内容"></p> <p><strong>数据集分为4个部分：</strong></p> <ul> <li>Training set images: <a href="http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz" target="_blank" rel="noopener">train-images-idx3-ubyte.gz</a> (9.9 MB, 解压后 47 MB, 包含 60,000 个样本)</li> <li>Training set labels: <a href="http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz" target="_blank" rel="noopener">train-labels-idx1-ubyte.gz</a> (29 KB, 解压后 60 KB, 包含 60,000 个标签)</li> <li>Test set images: <a href="http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz" target="_blank" rel="noopener">t10k-images-idx3-ubyte.gz</a> (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本)</li> <li>Test set labels: <a href="http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz" target="_blank" rel="noopener">t10k-labels-idx1-ubyte.gz</a> (5KB, 解压后 10 KB, 包含 10,000 个标签)</li> </ul> <blockquote> <p>MNIST 数据集来自美国国家标准与技术研究所, National Institute of Standards and Technology (NIST). 训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员. 测试集(test set) 也是同样比例的手写数字数据.</p> </blockquote> <p>数据集并非-常规的文本文件或者图片文件，值得注意的是，我们下载解压后会发现文件是二进制的文件，如下图所示：</p> <p><img src="/image3/MNIST_2.png" alt="MNIST数据集内容"></p> <p>MNIST（Mixed National Institute of Standards and Technology database）是一个计算机视觉数据集，它包含70000张手写数字的灰度图片，其中每一张图片包含 28 X 28 个像素点。可以用一个数字数组来表示这张图片：</p> <p><img src="/image3/MNIST_3.png" alt="MNIST数据集内容"></p> <p>每一张图片都有对应的标签，也就是图片对应的数字，例如上面这张图片的标签就是 1</p> <p>数据集被分成两部分：</p> <p>60000 行的训练数据集（mnist.train）和10000行的测试数据集（mnist.test）。</p> <blockquote> <p>其中：60000 行的训练集分拆为 55000 行的训练集和 5000 行的验证集。</p> </blockquote> <p>60000行的训练数据集是一个形状为 [60000, 784] 的张量，第一个维度数字用来索引图片，第二个维度数字用来索引每张图片中的像素点。（28x28=784）在此张量里的每一个元素，都表示某张图片里的某个像素的强度值，值介于 0 和 1 之间。</p> <p><img src="/image3/MNIST_4.png" alt="MNIST数据集内容"></p> <h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h2><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> MNIST </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.2 tensorflow1.x常用函数使用</title>
      <link href="//tfComFunction/"/>
      <url>//tfComFunction/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录tensorflow的学习入门过程，主要是tensorflow中的常用函数的介绍。</p> <p>Tensorflow的设计理念称之为计算流图，在编写程序时，首先构筑整个系统的graph，代码并不会直接生效，这一点和python的其他数值计算库（如Numpy等）不同，graph为静态的，类似于docker中的镜像。</p> <p>然后，在实际的运行时，启动一个session，程序才会真正的运行。这样做的好处就是：避免反复地切换底层程序实际运行的上下文，tensorflow帮你优化整个系统的代码。我们知道，很多python程序的底层为C语言或者其他语言，执行一行脚本，就要切换一次，是有成本的，tensorflow通过计算流图的方式，帮你优化整个session需要执行的代码，还是很有优势的。</p> <pre><code>所以placeholder()函数是在神经网络构建graph的时候在模型中的占位，此时并没有把要输入的数据传入模型，它只会分配必要的内存。等建立session，在会话中，运行模型的时候通过feed_dict()函数向占位符喂入数据。 </code></pre><hr> <p>作者：清晨的光明<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/kdongyi/article/details/82343712" target="_blank" rel="noopener">https://blog.csdn.net/kdongyi/article/details/82343712</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p> <a id="more"></a> <h3 id="tf-Session"><a href="#tf-Session" class="headerlink" title="tf.Session()"></a>tf.Session()</h3><p>TensorFlow 运行模型 — 会话</p> <p>会话拥有并管理TensrFlow程序运行的所有资源。</p> <h3 id="tf-placeholder"><a href="#tf-placeholder" class="headerlink" title="tf.placeholder()"></a>tf.placeholder()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tf.placeholder(</span><br><span class="line"> dtype,</span><br><span class="line"> shape=<span class="keyword">None</span>,</span><br><span class="line"> name=<span class="keyword">None</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure> <ul> <li>参数：</li> </ul> <p><strong>dtype：</strong> 数据类型。常用的是tf.float32,tf.float64等数值类型</p> <p><strong>shape：</strong> 数据形状。默认是None，就是一维值，也可以是多维（比如[2,3], [None, 3]表示列是3，行不定）</p> <p><strong>name：</strong> 名称</p> <p>placeholder()函数是在神经网络构建graph的时候在模型中的占位，此时并没有把要输入的数据传入模型，它只会分配必要的内存。等建立session，在会话中，运行模型的时候通过feed_dict()函数向占位符喂入数据。</p> <ul> <li>例子<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">input1 = tf.placeholder(tf.float32)</span><br><span class="line">input2 = tf.placeholder(tf.float32)</span><br><span class="line"> </span><br><span class="line">output = tf.multiply(input1, input2)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"> <span class="keyword">print</span> sess.run(output, feed_dict = &#123;input1:[<span class="number">3.</span>], input2: [<span class="number">4.</span>]&#125;)</span><br></pre></td></tr></table></figure> </li> </ul> <h3 id="tf-truncated-normal"><a href="#tf-truncated-normal" class="headerlink" title="tf.truncated_normal"></a>tf.truncated_normal</h3><h3 id="tf-greater"><a href="#tf-greater" class="headerlink" title="tf.greater()"></a>tf.greater()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greater</span><span class="params">(x: Any,</span></span></span><br><span class="line"><span class="function"><span class="params"> y: Any,</span></span></span><br><span class="line"><span class="function"><span class="params"> name: Any = None)</span> -&gt; object</span></span><br></pre></td></tr></table></figure> <p>Returns the truth value of (x &gt; y) element-wise.<br>NOTE: math.greater supports broadcasting. More</p> <p>tf.greater(x,y), 即和c语言的条件语句 x&gt;y?True:Flase;但是不用的是，这个函数返回bool值。</p> <h3 id="tf-where"><a href="#tf-where" class="headerlink" title="tf.where()"></a>tf.where()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">where</span><span class="params">(condition: Any,</span></span></span><br><span class="line"><span class="function"><span class="params"> x: Any = None,</span></span></span><br><span class="line"><span class="function"><span class="params"> y: Any = None,</span></span></span><br><span class="line"><span class="function"><span class="params"> name: Any = None)</span> -&gt; Any</span></span><br></pre></td></tr></table></figure> <p>Return the elements, either from x or y, depending on the condition.</p> <h3 id="tf-train-exponential-decay"><a href="#tf-train-exponential-decay" class="headerlink" title="tf.train.exponential_decay()"></a>tf.train.exponential_decay()</h3><p>tf.train.exponential_decay(LEARNING_RATE_BASE, global_step, LEARNING_RATE_STEP,LEARNING_RATE_DECAY, staircase=True)</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> tf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.2.1 tensorflow之MNIST</title>
      <link href="//tfMNIST/"/>
      <url>//tfMNIST/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录tensorflow的学习入门过程，主要是MNIST在tensorflow中完成的整个过程进行笔记的记录。</p> <a id="more"></a> <h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 在不使用keras的情况下</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">import</span> scipy.misc</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg <span class="comment"># mpimg 用于读取图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 从MNIST_data/中读取数据，如果不存在就会自动下载</span></span><br><span class="line"><span class="comment"># 这个input_data在mnist文件夹下</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(mnist.train.images.shape)</span></span><br><span class="line"><span class="comment"># print(mnist.train.labels.shape)</span></span><br><span class="line"><span class="comment"># print(mnist.validation.images.shape)</span></span><br><span class="line"><span class="comment"># print(mnist.validation.labels.shape)</span></span><br><span class="line"><span class="comment"># print(mnist.test.images.shape)</span></span><br><span class="line"><span class="comment"># print(mnist.test.labels.shape)</span></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">print(mnist.__dir__())</span><br><span class="line"><span class="comment"># print(dir(mnist))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把原始图片存在这个路径下</span></span><br><span class="line">save_dir = <span class="string">'MNIST_data/raw/'</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(save_dir) <span class="keyword">is</span> <span class="keyword">False</span>:</span><br><span class="line">os.makedirs(save_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line"> <span class="comment"># 请注意，mnist.train.images[i, :]就表示第i张图片</span></span><br><span class="line">image_arry = mnist.train.images[i, :]</span><br><span class="line">image_arry = image_arry.reshape(<span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line"> <span class="comment"># 保存文件的格式为:</span></span><br><span class="line"> <span class="comment"># mnist_train_0.jpg, mnist_train_1.jpg, ..., mnist_train_19.jpg</span></span><br><span class="line">filename = save_dir + <span class="string">'mnist_train_%d.jpg'</span> % i</span><br><span class="line"> <span class="comment"># 将iamge_array 保存为图片</span></span><br><span class="line">scipy.misc.toimage(image_arry, cmin=<span class="number">0.0</span>, cmax=<span class="number">1.0</span>).save(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 看前10张图片的样子</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">plotwindow = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"> <span class="comment"># 得到的都是one-hot 表示</span></span><br><span class="line">one_hot_label = mnist.train.labels[i, :]</span><br><span class="line">label = np.argmax(one_hot_label)</span><br><span class="line">print(<span class="string">'mnist_train_%d.jpg label:%d'</span> % (i, label))</span><br><span class="line">file = mpimg.imread(<span class="string">'MNIST_data/raw/mnist_train_%d.jpg'</span> % i)</span><br><span class="line">plt.imshow(file, cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">u'image-%i'</span> % label, loc=<span class="string">'left'</span>)</span><br><span class="line">plt.show()</span><br><span class="line">plt.clf()</span><br><span class="line">plt.close()</span><br></pre></td></tr></table></figure> <blockquote> <p>一般国内上google是上不了的，所以如果你先前没在MNIST_data/ 文件路径下放好这四个压缩包，一般会提示网络连接超时。此时自己去百度下载好这四个训练样本。</p> </blockquote> <p>结果出来想问下这个数字到底是几啊，我没看出来，但是标签里写的是7</p> <p><img src="/tfMNIST/MNIST_number_is7.png" alt="这个图像出来是数字7吗？"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> MNIST </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> MNIST </tag>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.6 win10+ubuntu双系统修复ubuntu启动引导</title>
      <link href="//doubleSysRepair/"/>
      <url>//doubleSysRepair/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了win10+ubuntu双系统修复ubuntu启动引导，解决最新版win10系统的UEFI快速启动带来的双系统安装启动问题（开机引导无法修复的解决方法）。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="win10-ubuntu双系统修复ubuntu启动引导"><a href="#win10-ubuntu双系统修复ubuntu启动引导" class="headerlink" title="win10+ubuntu双系统修复ubuntu启动引导"></a>win10+ubuntu双系统修复ubuntu启动引导</h1><h2 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h2><p>我的环境是：uefi启动模式下的win10 + ubutu18.04，其中win10 安装在 128G固态硬盘上，Ubuntu18.04LTS 安装在1T 机械硬盘上，由于我已安装好的ubuntu18 没有UEFI，但是ubuntu18确实是支持UEFI的，难道我必须要重新安装下ubuntu系统吗？（我ubuntu上好不容易安装好了好多软件，此时内心是崩溃的）</p> <h2 id="一、啥都不用改的解决办法（有点不推荐）"><a href="#一、啥都不用改的解决办法（有点不推荐）" class="headerlink" title="一、啥都不用改的解决办法（有点不推荐）"></a>一、啥都不用改的解决办法（有点不推荐）</h2><ul> <li>每次打开电脑后狂按F12按键，会进入Boot引导管理，然后选择你的Ubuntu系统进入即可打开ubuntu，如果你要打开window10 你可以按下开机电源后啥都不做就能进入，或者，也是狂按F12进入Boot管理界面，选择windows。</li> </ul> <blockquote> <p>每次开机都得这么累，所以不推荐</p> </blockquote> <h2 id="二、先进入Ubuntu-然后执行如下命令（就是安装Ubuntu的引导修复工具软件）"><a href="#二、先进入Ubuntu-然后执行如下命令（就是安装Ubuntu的引导修复工具软件）" class="headerlink" title="二、先进入Ubuntu 然后执行如下命令（就是安装Ubuntu的引导修复工具软件）"></a>二、先进入Ubuntu 然后执行如下命令（就是安装Ubuntu的引导修复工具软件）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su</span><br><span class="line"><span class="comment"># sudo add-apt-repository ppa:yannubuntu/boot-repair</span></span><br><span class="line"><span class="comment"># apt-get update</span></span><br><span class="line"><span class="comment"># apt-get install boot-repair</span></span><br><span class="line">1.在dash中搜索boot-repair</span><br><span class="line">2.点recommand repair</span><br><span class="line"> 之后会自动执行</span><br></pre></td></tr></table></figure> <p><img src="/image1/LinuxAndWin10Boot.jpeg" alt="recommand repair"></p> <p>执行完以上步骤后会出现如下图所示的信息：</p> <p><img src="/image1/LinuxAndWin10Boot2.1.jpeg" alt="执行完后显示"></p> <p>然后重启电脑，然后狂按F2,进入BOOT设置界面，设置UEFI 和 Enable。</p> <p><img src="/image1/LinuxAndWin10Boot2.2.jpeg" alt="执行完后显示"></p> <p>接下来设置个Supervisor密码，注意后期退出并保存这个boot配置时，要重新设置这个密码，新密码直接全敲回车（这样代表不设置密码，面对你以后密码忘记了）如下图：</p> <p><img src="/image1/LinuxAndWin10Boot2.3.jpeg" alt="执行完后显示"></p> <p>设置密码后，下面灰色的选项就可以用了。此时进入 <strong>Select an UEFI file as trust executing</strong> ,进入的界面如下图</p> <p><img src="/image1/LinuxAndWin10Boot2.4.jpeg" alt="执行完后显示"></p> <p>||</p> <p><img src="/image1/LinuxAndWin10Boot2.5.jpeg" alt="执行完后显示"></p> <p>||</p> <p><img src="/image1/LinuxAndWin10Boot2.6.jpeg" alt="执行完后显示"></p> <p>||</p> <p><img src="/image1/LinuxAndWin10Boot2.7.jpeg" alt="执行完后显示"></p> <p>接下来，回到Boot设置栏，讲EFI 的Ubuntu 重新排序，排到最高优先级，我这排到了我的windows启动选项的前面的，如果你了解你的windows启动标志，直接放到windows启动选项前也就可以的。</p> <p><img src="/image1/LinuxAndWin10Boot2.8.jpeg" alt="执行完后显示"></p> <ul> <li>到此设置结束，但是不要忘了，把你之前的Security选项里的密码重新清楚掉哦，就是重新设置新密码，新密码内容设置为回车就好了，下次你要使用就会直接提示你输入新密码。</li> </ul> <p>接下来F10保存并退出。然后启动你的电脑，会直接进入linux的引导界面，还包括了Windows的启动界面选项，这时你想进Ubuntu还是windows都是很好选择的。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Conf </tag>
            
            <tag> 系统引导 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.5 Ubuntu下常用工具软件配置安装</title>
      <link href="//linuxcommontool/"/>
      <url>//linuxcommontool/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了Ubuntu下常用工具软件配置、安装，包括高速下载的工具安装使用，具体安装和介绍见文章内容所述。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="Ubuntu下常用工具软件配置安装"><a href="#Ubuntu下常用工具软件配置安装" class="headerlink" title="Ubuntu下常用工具软件配置安装"></a>Ubuntu下常用工具软件配置安装</h1><blockquote> <p>终端打开软件，不占用终端的方法是在命令后面加&amp;</p> </blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo matlab &amp;</span><br></pre></td></tr></table></figure> <h2 id="一、安装高速下载工具"><a href="#一、安装高速下载工具" class="headerlink" title="一、安装高速下载工具"></a>一、安装高速下载工具</h2><p>uGet：是一款图形化界面软件， 支持队列下载和恢复下载的功能。uGet官网<br>aira2：是一个命令行下载工具，使用不方便，需要配合其他图形界面的下载软件使用。其下载原理类似于Windows上的迅雷，通过搜索资源、为己所用，而不是仅仅从原始地址这单一资源处下载。<br>uGet采用aria2作为后端，安装aria2插件后可与其进行交互。支持的下载协议包括：HTTP，HTTPS，FTP，BitTorrent和Metalink。</p> <hr> <p>作者：Geroff<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/fengyulinde/article/details/78309314" target="_blank" rel="noopener">https://blog.csdn.net/fengyulinde/article/details/78309314</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p> <h3 id="1-1-安装步骤"><a href="#1-1-安装步骤" class="headerlink" title="1.1 安装步骤"></a>1.1 安装步骤</h3><ul> <li>安装 uget aria2</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:plushuang-tw/uget-stable</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install uget aria2</span><br></pre></td></tr></table></figure> <h3 id="1-2卸载"><a href="#1-2卸载" class="headerlink" title="1.2卸载"></a>1.2卸载</h3><ul> <li>1.如果要移除uGet和aria2，可执行如下命令</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove --purge uget aria2</span><br></pre></td></tr></table></figure> <ul> <li>2.移除相应ppa，执行如下步骤 </li> </ul> <p>先安装ppa-purge</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ppa-purge</span><br></pre></td></tr></table></figure> <p>接着删除相应ppa</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ppa-purge ppa:plushuang-tw/uget-stable</span><br></pre></td></tr></table></figure> <h3 id="1-3-uGet设置"><a href="#1-3-uGet设置" class="headerlink" title="1.3 uGet设置"></a>1.3 uGet设置</h3><p>如图界面选择插件–&gt; aria2即可，更多的帮助请在终端中输入，aria2c -h即可看到。</p> <p><img src="/image1/ubuntuTool_1.1.png" alt="uGet设置"></p> <h2 id="二、终端相关的配置"><a href="#二、终端相关的配置" class="headerlink" title="二、终端相关的配置"></a>二、终端相关的配置</h2><ul> <li>终端打开软件，但当软件打开后，不想让终端占用软件的方法</li> </ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">software &amp;</span><br></pre></td></tr></table></figure> <p>即在软件的后面加上 &amp; 符号</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Conf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.4 Latex 排版使用笔记</title>
      <link href="//latexnotes/"/>
      <url>//latexnotes/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了Latex排版相关的语法句法使用，是对latex学习中的一种总结，笔记，具体笔记见文中内容所描述。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="Latex-排版使用笔记"><a href="#Latex-排版使用笔记" class="headerlink" title="Latex 排版使用笔记"></a>Latex 排版使用笔记</h1><h2 id="一、-简单的介绍"><a href="#一、-简单的介绍" class="headerlink" title="一、 简单的介绍"></a>一、 简单的介绍</h2><blockquote> <p>LaTeX（LATEX，音译“拉泰赫”）是一种基于ΤΕΧ的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80年代初期开发，利用这种格式，即使使用者没有排版和程序设计的知识也可以充分发挥由TeX所提供的强大功能，能在几天，甚至几小时内生成很多具有书籍质量的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学类文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档。</p> </blockquote> <blockquote> <p>LaTeX 是一款非常优秀的科技论文排版系统，除了编写学术论文、幻灯片、书籍、报告等之外，甚至可以画矢量图。尤其在学术界非常认可，各个主流的学术期刊都提供了相应的 latex 模板。与 word 排版不同，它不是一个所见即所得的编辑器，而是基于许多的规范的 TeX 语法。正是基于此，LaTeX 在使用时可以让作者花更少的时间在文章的格式排版上，而是更关注与内容的编辑。</p> </blockquote> <h3 id="1-1-TeXLive"><a href="#1-1-TeXLive" class="headerlink" title="1.1 TeXLive"></a>1.1 TeXLive</h3><p>TeXLive 是一款经典的官方发布的 TeX 系统，特点是跨平台（Unix、Linux、Windows 操作系统均可）安装，不断有开发人员在维护和更新，解决BUG。缺点是软件仅仅是一个编译系统，与 CTeX 相比缺少了编译器和查看器，需要另外安装；</p> <p>当然也可以不使用编辑软件，直接使用命令行（command line）或记事本编辑，再使用命令行的指令进行编译（latex、pdflatex、bibtex、dvi2ps 等），一般人当然接受不了（只有极少数程序员会这么做），开发也不方便。</p> <h3 id="1-2-CTeX"><a href="#1-2-CTeX" class="headerlink" title="1.2 CTeX"></a>1.2 CTeX</h3><blockquote> <p>CTeX 环境（适合中国人使用的 Chinese TeX 环境）中文套装是基于 Windows 下的 MiKTeX 系统，集成了编辑器 WinEdt 和 PostScript 处理软件 Ghostscript 和 GSview 等主要工具。 CTeX 中文套装在 MiKTeX 的基础上增加了对中文的完整支持。 </p> </blockquote> <ul> <li>WinEdt 一款 CTeX 自带的编辑软件，并不是免费的软件，需要（和谐）之后才好使用，否则会不断提示你进行 register。</li> </ul> <p><img src="/image1/Latex_WinEdt.jpeg" alt="Latex_WinEdt"></p> <ul> <li>WinEdt 提供了许多按钮式的数学符号、运算、字母提示，不需要记忆很多命令； </li> </ul> <p><img src="/image1/Latex_WinEdt_Formular.jpeg" alt="WinEdt 公式编辑"></p> <h3 id="1-3-TexStudio-推荐"><a href="#1-3-TexStudio-推荐" class="headerlink" title="1.3 TexStudio [推荐]"></a>1.3 TexStudio [推荐]</h3><p>TeXstudio 是一款非常精良的 LaTeX 免费开发软件（不包括 TeX 编译环境，需要另外安装 CTeX 或 TeXLive），有着许多实用、便捷的功能：</p> <ul> <li><p>配置非常简单，基本使用默认的配置即可，个人喜欢修改字体为 Consolas，编译方式 DVI-&gt;PS-&gt;PDF，编码 UTF-8（对中文兼容）、加入英语拼写检查（Spell Check，en_US）；</p> </li> <li><p>自带 PDF 查看器，即界面左边为编辑文档，右边显示编译生成的 PDF 文档，在 pdflatex 编译之后，支持对象反查（代码 –&gt; PDF（右键 Go to PDF）、PDF–&gt; 代码（右键 Go to Source））；</p> </li> <li><p>代码自动提示，可以自动补全，菜单里含有丰富的命令； </p> </li> </ul> <p><img src="/image1/Latex_TexStudio_1.jpeg" alt="1"><br><img src="/image1/Latex_TexStudio_2.jpeg" alt="2"><br><img src="/image1/Latex_TexStudio_3.jpeg" alt="3"></p> <h2 id="二、Latex基本语法"><a href="#二、Latex基本语法" class="headerlink" title="二、Latex基本语法"></a>二、Latex基本语法</h2><h2 id="三、Latex-在线参考资料"><a href="#三、Latex-在线参考资料" class="headerlink" title="三、Latex 在线参考资料"></a>三、Latex 在线参考资料</h2><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Conf </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.3 Ubuntu18 git命令使用总结</title>
      <link href="//gitcommand/"/>
      <url>//gitcommand/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了 Ubuntu18 git命令使用总结，主要包括git的指令使用帮助，本文不是指导如何调试代码和修复代码，具体内容见文中内容所示。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="git-相关命令学习"><a href="#git-相关命令学习" class="headerlink" title="git 相关命令学习"></a>git 相关命令学习</h1><h2 id="一、git-remote-命令用法"><a href="#一、git-remote-命令用法" class="headerlink" title="一、git remote 命令用法"></a>一、<a href="https://www.git-scm.com/docs/git-remote" target="_blank" rel="noopener">git remote 命令用法</a></h2><h3 id="1-1-git-remote-命令用法"><a href="#1-1-git-remote-命令用法" class="headerlink" title="1.1 git remote 命令用法"></a>1.1 <a href="https://www.git-scm.com/docs/git-remote" target="_blank" rel="noopener">git remote 命令用法</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git remote [-v | --verbose] <span class="comment">#不带参数，列出已经存在的远程分支</span></span><br><span class="line">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;</span><br><span class="line">git remote rename &lt;old&gt; &lt;new&gt;</span><br><span class="line">git remote remove &lt;name&gt;</span><br><span class="line">git remote <span class="built_in">set</span>-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)</span><br><span class="line">git remote <span class="built_in">set</span>-branches [--add] &lt;name&gt; &lt;branch&gt;…​</span><br><span class="line">git remote get-url [--push] [--all] &lt;name&gt;</span><br><span class="line">git remote <span class="built_in">set</span>-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]</span><br><span class="line">git remote <span class="built_in">set</span>-url --add [--push] &lt;name&gt; &lt;newurl&gt;</span><br><span class="line">git remote <span class="built_in">set</span>-url --delete [--push] &lt;name&gt; &lt;url&gt;</span><br><span class="line">git remote [-v | --verbose] show [-n] &lt;name&gt;…​</span><br><span class="line">git remote prune [-n | --dry-run] &lt;name&gt;…​</span><br><span class="line">git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…​]</span><br></pre></td></tr></table></figure> <h2 id="二、例程代码"><a href="#二、例程代码" class="headerlink" title="二、例程代码"></a>二、例程代码</h2><h3 id="2-1-例程代码"><a href="#2-1-例程代码" class="headerlink" title="2.1 例程代码"></a>2.1 例程代码</h3><ul> <li>查看当前的远程库 </li> </ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"> origin git://github.com/schacon/ticgit.git如果有多个远程仓库,此命令将全部列出.比如在我的 Grit 项目中,可以看到.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote <span class="comment">#不带参数，列出已经存在的远程分支</span></span></span><br><span class="line"> origin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果提示：error: 无法推送一些引用到 <span class="string">'https://github.com/porterpan/gitbook-tutorial.git'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提示：再次推送前，先与远程变更合并（如 <span class="string">'git pull ...'</span>）。详见</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提示：<span class="string">'git push --help'</span> 中的 <span class="string">'Note about fast-forwards'</span> 小节。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch origin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge origin/mastergit</span></span><br></pre></td></tr></table></figure> <h3 id="正常流程"><a href="#正常流程" class="headerlink" title="正常流程"></a>正常流程</h3><ul> <li><p>如果都是自己在开发的类，当然优先使用pull-&gt;commit-&gt;push，为什么我更倾向这种方式呢，因为这样会减少Git没有必要的merge。</p> </li> <li><p>如果有冲突的情况下，先pull了会出现什么问题呢？<br>如果你的判断失误，在本地修改与远程代码有冲突的情况下，先执行了git-pull，即使是这样也不用担心，git会给你一个错误提示，这时候你再去执行commit-&gt;pull-&gt;push也是没有问题的。</p> </li> </ul> <h2 id="git代理配置"><a href="#git代理配置" class="headerlink" title="git代理配置"></a>git代理配置</h2><h3 id="git设置代理"><a href="#git设置代理" class="headerlink" title="git设置代理"></a>git设置代理</h3><ul> <li><p>代理类型是socks5</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure> </li> <li><p>代理类型是普通的http/https</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure> </li> </ul> <h3 id="git取消代理"><a href="#git取消代理" class="headerlink" title="git取消代理"></a>git取消代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Conf </tag>
            
            <tag> git命令 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.2 Ubuntu18安装Gitbook</title>
      <link href="//installgitbook/"/>
      <url>//installgitbook/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了 Ubuntu18安装Gitbook的相关步骤，和某些关键的终点输入指令，本文不是指导如何调试代码和修复代码，本文给出了一种安装的方法，具体修复方法见文中内容所示。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="Ubuntu18-安装Gitbook-记录"><a href="#Ubuntu18-安装Gitbook-记录" class="headerlink" title="Ubuntu18 安装Gitbook 记录"></a>Ubuntu18 安装Gitbook 记录</h1><h1 id="1-安装nodejs"><a href="#1-安装nodejs" class="headerlink" title="1. 安装nodejs"></a>1. 安装nodejs</h1><ul> <li>进入<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs官网</a>，选择10.15.0 LTS下面的other Downloads.</li> </ul> <p><img src="https://s2.ax1x.com/2019/01/06/FbSReA.png" alt="FbSReA.png"></p> <ul> <li>然后进入下载界面</li> </ul> <p><a href="https://imgchr.com/i/FbpJtP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/01/06/FbpJtP.md.png" alt="FbpJtP.md.png"></a></p> <ul> <li>解压，开始安装<blockquote> <p>安装就是直接把解压后的放到你想安装的位置，我们直接解压到</p> </blockquote> </li> </ul> <p>/usr/local路径中。这就安装好了，不需要运行，直接执行下面步骤。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/node-v4.2.4-linux-x64/bin/node /usr/<span class="built_in">local</span>/bin/node sudo ln -s /usr/<span class="built_in">local</span>/node-v4.2.4-linux-x64/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br></pre></td></tr></table></figure> <p>至此nodejs安装完成</p> <hr> <p>#2. 安装gitbook</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gitbook-cli</span><br></pre></td></tr></table></figure> <blockquote> <p>之后在终端输入以下命令，否则，你在终端执行 gitbook -V 会提示命令不存在。</p> </blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/node-v4.2.4-linux-x64/bin/gitbook /usr/<span class="built_in">local</span>/bin/gitbook</span><br><span class="line">gitbook -v <span class="comment"># 输出安装后的版本信息</span></span><br></pre></td></tr></table></figure> <ul> <li>安装结束然后</li> </ul> <hr> <h1 id="3-Gitbook使用教程"><a href="#3-Gitbook使用教程" class="headerlink" title="3. Gitbook使用教程"></a>3. Gitbook使用教程</h1><h2 id="3-1-gitbook-命令"><a href="#3-1-gitbook-命令" class="headerlink" title="3.1 gitbook 命令"></a>3.1 gitbook 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gitbook -V 检测安装成功 </span><br><span class="line">gitbook init 初始化 </span><br><span class="line">gitbook build 编译当前的生成网页，但是不启动本地服务器</span><br><span class="line">gitbook serve -p 8080 . 编译当前的生成网页，启动本地服务器</span><br><span class="line">gitbook serve . 启动本地服务器</span><br><span class="line">gitbook update 更新软件</span><br></pre></td></tr></table></figure> <p>README.md是关于你的书的介绍，而SUMMARY.md中则包含了书目，即章节结构，它的格式大致是：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* [第1章](./绪论/c1.md) # 注意章的要顶格写,此处第一章全放在根目录的绪论文件夹中的</span><br><span class="line"> * [第1节](c1s1.md) # 注意节要有空格号</span><br><span class="line"> * [第2节](c1s2.md) # 注意节要有空格号</span><br><span class="line">* [第2章](c2.md) # 注意章的要顶格写</span><br></pre></td></tr></table></figure> <p>剩下的东西就很好理解了，你只需要编写相应章节即可。在编辑完README.md和SUMMARY.md后，你可以运行以下命令：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook serve -p 8080 .</span><br></pre></td></tr></table></figure> <p>Gitbook首先把你的Markdown文件编译为HTML文件，并根据SUMMARY.md生成书的目录。所有生存的文件都保存在当前目录下的一个名为_book的子目录中。完成这些工作后，Gitbook会作为一个HTTP Server运行，并在8080端口监听HTTP请求。</p> <p>运行以上命令后，打开浏览器，在地址栏输入：<a href="http://localhost:8080即可看到你的书页了。" target="_blank" rel="noopener">http://localhost:8080即可看到你的书页了。</a></p> <blockquote> <p>其中位于左侧书目顶部的Introduction一节就编译自README.md，而书目本身自编译自SUMMARY.md。你要在自己的网站上发布新书，只需把_book目录复制到服务器相应目录即可。至此Gitbook的基本用法就介绍完毕。</p> </blockquote> <h2 id="3-2-Gitbook的插件支持"><a href="#3-2-Gitbook的插件支持" class="headerlink" title="3.2 Gitbook的插件支持"></a>3.2 Gitbook的插件支持</h2><p>Gitbook可以生成HTML，因此它支持一些外部的JavaScript文件嵌入到HTML中，例如Google统计、Disqus评论系统等。以下以页面中嵌入Disqus评论为例。</p> <p>首先是安装Gitbook的Disqus插件。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gitbook-plugin-disqus</span><br><span class="line"></span><br><span class="line">或者先写好book.json 然后执行</span><br><span class="line">gitbook install #推荐这种方法</span><br></pre></td></tr></table></figure> <p>然后建立一个book.json文件，其格式如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;plugins&quot;: [&quot;disqus&quot;],</span><br><span class="line"> &quot;pluginsConfig&quot;: &#123;</span><br><span class="line"> &quot;disqus&quot;: &#123;</span><br><span class="line"> &quot;shortName&quot;: &quot;NAME-FROM-DISQUS&quot;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <p>把上面的 NAME-FROM-DISQUS 修改为你在Disqus上的项目名即可。</p> <p>要卸载的话（假如我要卸载的插件是：gitchinese-video），执行如下命令</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall gitchinese-video</span><br></pre></td></tr></table></figure> <p>再次运行命令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook serve -p 8080 .</span><br></pre></td></tr></table></figure> <p>并刷新浏览器，即可看到附加了Disqus评论的页面。</p> <h2 id="3-3-生成图书"><a href="#3-3-生成图书" class="headerlink" title="3.3 生成图书"></a>3.3 生成图书</h2><p>当你在自己的电脑上编辑好图书之后，你可以使用Gitbook<br>的命令行进行本地预览：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook serve .</span><br></pre></td></tr></table></figure> <p>然后浏览器中输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以预览生成的以网页形式组织的书籍。<br>这里你会发现，你在你的图书项目的目录中多了一个名为<br>_book的文件目录，而这个目录中的文件，即是生成的静态网站内容。<br>使用build参数生成到指定目录<br>与直接预览生成的静态网站文件不一样的是，使用这个命令，<br>你可以将内容输入到你所想要的目录中去：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /tmp/gitbook</span><br><span class="line">$ gitbook build --output=/tmp/gitbook</span><br></pre></td></tr></table></figure> <h2 id="3-4-输出PDF文件"><a href="#3-4-输出PDF文件" class="headerlink" title="3.4 输出PDF文件"></a>3.4 输出PDF文件</h2><p>输入为PDF文件，需要先使用NPM安装上gitbook pdf：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install gitbook-pdf -g</span><br></pre></td></tr></table></figure> <hr> <h1 id="4-更多的gitbook-插件支持请访问-gitbook官方插件库"><a href="#4-更多的gitbook-插件支持请访问-gitbook官方插件库" class="headerlink" title="4 更多的gitbook 插件支持请访问 gitbook官方插件库"></a>4 更多的gitbook 插件支持请访问 <a href="https://plugins.gitbook.com/" target="_blank" rel="noopener">gitbook官方插件库</a></h1><p><a href="https://blog.csdn.net/feosun/article/details/72806825" target="_blank" rel="noopener">参考来源</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Conf </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.1 Ubuntu18下有道词典的配置</title>
      <link href="//youdaoconf/"/>
      <url>//youdaoconf/</url>
      
        <content type="html"><![CDATA[<!-- build time:Tue Oct 08 2019 14:25:42 GMT+0800 (GMT+08:00) --><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文记录了ubuntu 17+，Debian 等新版本的linux系统中有道词典不能安装的问题修复，由于官方提供的deb安装文件，可以解包调试，会发现Qt5版本低的原因导致的出错，本文不是指导如何调试代码和修复代码，本文给出了一种修复的方法，具体修复方法见文中内容所示。</p> <ul> <li style="list-style: none"><input type="checkbox" checked> Edit By Porter, 积水成渊,蛟龙生焉。</li> </ul> <a id="more"></a> <p>文章同步于: <a href="https://porter.gitbook.io/" target="_blank" rel="noopener">我的gitbook</a></p> <h1 id="有道词典解包dep，修改源码接着玩"><a href="#有道词典解包dep，修改源码接着玩" class="headerlink" title="有道词典解包dep，修改源码接着玩"></a>有道词典解包dep，修改源码接着玩</h1><h2 id="Ubnutu18-安装有道词典"><a href="#Ubnutu18-安装有道词典" class="headerlink" title="Ubnutu18 安装有道词典"></a>Ubnutu18 安装有道词典</h2><ul> <li>若要成功安装Ubuntu18下的有道词典，请移步大牛的仓库，配置下就好</li> </ul> <p><a href="https://github.com/yomun/youdaodict_5.5" target="_blank" rel="noopener">大牛Ubuntu16后都支持的有道词典安装包和安装方法</a>,这个支持Qt5.5 到我的是Qt5.9也支持，貌似以后版本这个可能也支持的，移步去安装吧。</p> <blockquote> <p>提示，建议你不要开有道词典的划词，因为会卡死你，太占内存了，你ps下会发现好多的啊，全是ORC识别的进程<strong>tesseract 进程</strong>,就是这句话</p> </blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装ORC插件，支持有道划词，桌面翻译功能</span></span><br><span class="line">apt install tesseract-ocr tesseract-ocr-eng tesseract-ocr-chi-sim tesseract-ocr-chi-tra</span><br></pre></td></tr></table></figure> <ul> <li>说实话，不知道怎么生成那么多进程，卡死了，所以我没装这个插件，也没用划词，划词我直接浏览器安装插件解决。仅供参考。</li> </ul> <hr> <blockquote> <p>本来准备安装有道云笔记的，但是我的linux是ubuntu18的Qt是5.9 用不了啊，他的Qt是哪个版本的没弄清楚，好像是5.4的，结果就是我安装不上，做这个笔记就是为了想办法重新改写他的源码看看能不能好点支持。</p> </blockquote> <p><a href="https://blog.csdn.net/wangxiao7474/article/details/61196238?utm_source=blogxgwz4" target="_blank" rel="noopener">文章参考来源</a></p> <hr> <p>该版本依赖于python3，需要如下依赖包：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Depends: python3, python3-pyqt5, python3-requests, python3-xlib, tesseract-ocr, tesseract-ocr-eng, tesseract-ocr-chi-sim, tesseract-ocr-chi-tra, python3-pil, ttf-wqy-microhei, python3-lxml, python3-xdg, python3-pyqt5.qtmultimedia, python3-pyqt5.qtquick, python3-pyqt5.qtwebkit, gir1<span class="number">.2</span>-appindicator3<span class="number">-0.1</span>, python3-dbus, qtdeclarative5-controls-plugin, libqt5multimedia5-plugins,gstreamer0<span class="number">.10</span>-plugins-ugly</span><br></pre></td></tr></table></figure> <p>gstreamer0.10-plugins-ugly 这个可以不用，用这个替换</p> <blockquote> <p>这个模块主要用于单词的发音： </p> <p>sudo apt-get install gstreamer1.0-libav</p> </blockquote> <ul> <li>Ok， 没有条件我们开始创造条件</li> </ul> <h3 id="第一步、下载有道词典的dep包"><a href="#第一步、下载有道词典的dep包" class="headerlink" title="第一步、下载有道词典的dep包"></a>第一步、下载有道词典的dep包</h3><p>进入官网，然后选择ubuntu的包下载</p> <blockquote> <p>下载的是deb包，文件名为：youdao-dict_1.1.0-0-ubuntu_amd64.deb 。</p> </blockquote> <h3 id="第二步、解包"><a href="#第二步、解包" class="headerlink" title="第二步、解包"></a>第二步、解包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#解压deb包到youdao-dict目录</span><br><span class="line">dpkg -X youdao-dict_1.1.0-0-ubuntu_amd64.deb youdao-dict</span><br><span class="line">#解压deb包中的control信息，control中写有该软件的依赖信息</span><br><span class="line">dpkg -e youdao-dict_1.1.0-0-ubuntu_amd64.deb youdao-dict/DEBIAN</span><br></pre></td></tr></table></figure> <h3 id="第三步、修改"><a href="#第三步、修改" class="headerlink" title="第三步、修改"></a>第三步、修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd youdao-dict</span><br><span class="line">cd DEBIAN</span><br><span class="line">vim control</span><br><span class="line">#进入解压目录，编辑control文件，删除文件中Depends：后面的gstreamer0.10-plugins-ugly，并保存</span><br></pre></td></tr></table></figure> <p>[v] 接着就是修改工程中的源码</p> <p>[v] 接着就是保存修改</p> <h3 id="第四步、重新打包"><a href="#第四步、重新打包" class="headerlink" title="第四步、重新打包"></a>第四步、重新打包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/下载</span><br><span class="line">#将修改后的安装文件重新打包</span><br><span class="line">dpkg-deb -b youdao-dict youdao-dict_new.deb</span><br></pre></td></tr></table></figure> <p>第五步、重新安装</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#安装重新打包的deb包</span><br><span class="line">sudo dpkg -i youdao-dict_new.deb</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Conf </tag>
            
            <tag> 有道词典 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
